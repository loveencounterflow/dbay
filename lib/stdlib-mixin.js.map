{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/stdlib-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/MIXIN/STDLIB'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ freeze\n  lets }                  = require 'letsfreezethat'\nE                         = require './errors'\n\n\n#-----------------------------------------------------------------------------------------------------------\nwalk_split_parts = ( text, splitter, omit_empty ) ->\n  parts = text.split splitter\n  parts = ( part for part in parts when ( not omit_empty ) or ( part isnt '' ) )\n  count = parts.length\n  for part, idx in parts\n    lnr = idx + 1\n    rnr = count - idx\n    yield { lnr, rnr, part, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@DBay_stdlib = ( clasz = Object ) => class extends clasz\n  ### TAINT use `cfg` ###\n\n  #---------------------------------------------------------------------------------------------------------\n  _$stdlib_initialize: ->\n    @_stdlib_created = false\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  create_stdlib: ->\n    return null if @_stdlib_created\n    @_stdlib_created = true\n    prefix = 'std_'\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'str_reverse'\n      deterministic:  true\n      varargs:        false\n      call:           ( s ) -> ( Array.from s ).reverse().join ''\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'str_join'\n      deterministic:  true\n      varargs:        true\n      call:           ( joiner, P... ) -> P.join joiner\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_table_function\n      name:           prefix + 'str_split'\n      columns:        [ 'lnr', 'rnr', 'part', ]\n      parameters:     [ 'text', 'splitter', 'omit_empty', ]\n      deterministic:  true\n      varargs:        false\n      rows:           ( text, splitter, omit_empty = false ) ->\n        omit_empty = !!omit_empty\n        yield from walk_split_parts text, splitter, omit_empty\n        return null\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_table_function\n      name:           prefix + 'str_split_re'\n      columns:        [ 'lnr', 'rnr', 'part', ]\n      parameters:     [ 'text', 'splitter', 'flags', 'omit_empty', ]\n      deterministic:  false\n      varargs:        true\n      rows:           ( text, splitter, flags = null, omit_empty = false ) ->\n        omit_empty = !!omit_empty\n        if flags?     then  re = new RegExp splitter, flags\n        else                re = new RegExp splitter\n        yield from walk_split_parts text, re, omit_empty\n        return null\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_table_function\n      name:           prefix + 'str_split_first'\n      columns:        [ 'prefix', 'suffix', ]\n      parameters:     [ 'text', 'splitter', ]\n      deterministic:  true\n      varargs:        false\n      rows:           ( text, splitter ) ->\n        return null if ( text is null ) or ( splitter is null )\n        if ( idx = text.indexOf splitter ) < 0 then yield [ text, null, ]\n        else                                        yield [ text[ ... idx ], text[ idx + 1 .. ], ]\n        return null\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_table_function\n      name:           prefix + 'generate_series'\n      columns:        [ 'value', ]\n      parameters:     [ 'start', 'stop', 'step', ]\n      varargs:        true\n      deterministic:  true\n      rows: ( start, stop = Infinity, step = 1 ) ->\n        ### NOTE: `stop` differs from SQLite3, which has 9223372036854775807 ###\n        value = start\n        loop\n          break if value > stop\n          yield [ value, ]\n          value += step\n        return null\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_table_function\n      name:         prefix + 're_matches'\n      columns:      [ 'match', 'capture', ]\n      parameters:   [ 'text', 'pattern', ]\n      rows: ( text, pattern ) ->\n        regex = new RegExp pattern, 'g'\n        while ( match = regex.exec text )?\n          yield [ match[ 0 ], ( match[ 1 ] ? null ), ]\n        return null\n\n    #=======================================================================================================\n    # VARIABLES\n    #-------------------------------------------------------------------------------------------------------\n    @variables  = {}\n    self        = @\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function name: prefix + 'getv', deterministic: false, call: @getv.bind @\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_table_function\n      name:           prefix + 'variables',\n      deterministic:  false,\n      columns:        [ 'name', 'value', ]\n      parameters:     []\n      rows:           ( ( name ) -> yield [ name, ( @getv name ), ] for name of @variables ).bind @\n\n    #-------------------------------------------------------------------------------------------------------\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  setv: ( name, value ) -> @variables[ name ] = value\n\n  #---------------------------------------------------------------------------------------------------------\n  getv: ( name ) ->\n    if ( R = @variables[ name ] ) is undefined\n      throw new E.DBay_unknown_variable '^dbay/stdlib@1^', name\n    return switch\n      when R is true  then 1\n      when R is false then 0\n      else R\n"
  ]
}