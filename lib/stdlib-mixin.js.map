{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/stdlib-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/MIXIN/STDLIB'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nE                         = require './errors'\n#-----------------------------------------------------------------------------------------------------------\nGUY                       = require 'guy'\n### https://day.js.org ###\ndayjs                     = require 'dayjs'\ndo =>\n  utc               = require 'dayjs/plugin/utc';               dayjs.extend utc\n  relativeTime      = require 'dayjs/plugin/relativeTime';      dayjs.extend relativeTime\n  toObject          = require 'dayjs/plugin/toObject';          dayjs.extend toObject\n  customParseFormat = require 'dayjs/plugin/customParseFormat'; dayjs.extend customParseFormat\n  duration          = require 'dayjs/plugin/duration';          dayjs.extend duration\n\n\n#-----------------------------------------------------------------------------------------------------------\nwalk_split_parts = ( text, splitter, omit_empty ) ->\n  parts = text.split splitter\n  parts = ( part for part in parts when ( not omit_empty ) or ( part isnt '' ) )\n  count = parts.length\n  for part, idx in parts\n    lnr = idx + 1\n    rnr = count - idx\n    yield { lnr, rnr, part, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@DBay_stdlib = ( clasz = Object ) => class extends clasz\n  ### TAINT use `cfg` ###\n\n  #---------------------------------------------------------------------------------------------------------\n  _$stdlib_initialize: ->\n    GUY.props.hide @_me, '_dayjs',                              dayjs\n    GUY.props.hide @_me, '_dt_dbay_timestamp_input_template',   'YYYYMMDD-HHmmssZ'\n    GUY.props.hide @_me, '_dt_dbay_timestamp_output_template',  'YYYYMMDD-HHmmss[Z]'\n    @_me._stdlib_created = false\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  create_stdlib: ->\n    return null if @_stdlib_created\n    @_stdlib_created = true\n    prefix = 'std_'\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'sql_i'\n      deterministic:  true\n      varargs:        false\n      call:           ( name ) => @sql.I name\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'str_reverse'\n      deterministic:  true\n      varargs:        false\n      call:           ( s ) -> ( Array.from s ).reverse().join ''\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'str_join'\n      deterministic:  true\n      varargs:        true\n      call:           ( joiner, P... ) -> P.join joiner\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'str_is_blank'\n      deterministic:  true\n      varargs:        false\n      call:           ( s ) -> if ( /^\\s+$/ ).test s then 1 else 0\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_table_function\n      name:           prefix + 'str_split'\n      columns:        [ 'lnr', 'rnr', 'part', ]\n      parameters:     [ 'text', 'splitter', 'omit_empty', ]\n      deterministic:  true\n      varargs:        false\n      rows:           ( text, splitter, omit_empty = false ) ->\n        omit_empty = !!omit_empty\n        yield from walk_split_parts text, splitter, omit_empty\n        return null\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_table_function\n      name:           prefix + 'str_split_re'\n      columns:        [ 'lnr', 'rnr', 'part', ]\n      parameters:     [ 'text', 'splitter', 'flags', 'omit_empty', ]\n      deterministic:  false\n      varargs:        true\n      rows:           ( text, splitter, flags = null, omit_empty = false ) ->\n        omit_empty = !!omit_empty\n        if flags?     then  re = new RegExp splitter, flags\n        else                re = new RegExp splitter\n        yield from walk_split_parts text, re, omit_empty\n        return null\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_table_function\n      name:           prefix + 'str_split_first'\n      columns:        [ 'prefix', 'suffix', ]\n      parameters:     [ 'text', 'splitter', ]\n      deterministic:  true\n      varargs:        false\n      rows:           ( text, splitter ) ->\n        return null if ( text is null ) or ( splitter is null )\n        if ( idx = text.indexOf splitter ) < 0 then yield [ text, null, ]\n        else                                        yield [ text[ ... idx ], text[ idx + 1 .. ], ]\n        return null\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_table_function\n      name:           prefix + 'generate_series'\n      columns:        [ 'value', ]\n      parameters:     [ 'start', 'stop', 'step', ]\n      varargs:        true\n      deterministic:  true\n      rows: ( start, stop = Infinity, step = 1 ) ->\n        ### NOTE: `stop` differs from SQLite3, which has 9223372036854775807 ###\n        value = start\n        loop\n          break if value > stop\n          yield [ value, ]\n          value += step\n        return null\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_table_function\n      name:           prefix + 're_matches'\n      columns:        [ 'match', 'capture', ]\n      parameters:     [ 'text', 'pattern', ]\n      rows: ( text, pattern ) ->\n        regex = new RegExp pattern, 'g'\n        while ( match = regex.exec text )?\n          yield [ match[ 0 ], ( match[ 1 ] ? null ), ]\n        return null\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 're_is_match'\n      deterministic:  false\n      varargs:        false\n      call:           ( text, pattern ) -> if ( new RegExp pattern, 'g' ).test text then 1 else 0\n\n\n    #=======================================================================================================\n    # ASSERTS AND EXCEPTIONS\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'echo'\n      deterministic:  false\n      varargs:        false\n      call:           ( message ) -> echo message; return message\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'debug'\n      deterministic:  false\n      varargs:        false\n      call:           ( message ) -> debug message; return message\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'info'\n      deterministic:  false\n      varargs:        false\n      call:           ( message ) -> info message; return message\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'warn'\n      deterministic:  false\n      varargs:        false\n      call:           ( message ) -> warn message; return message\n\n\n    #=======================================================================================================\n    # ASSERTS AND EXCEPTIONS\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'raise'\n      deterministic:  true\n      varargs:        false\n      call: ( message ) ->\n        throw new Error message\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'raise_json'\n      deterministic:  true\n      varargs:        false\n      call: ( facets_json ) ->\n        try facets = JSON.parse facets_json catch error\n          throw new Error \"not a valid argument for std_raise_json: #{rpr facets}\"\n        error = new Error facets.message ? \"(no error message given)\"\n        for k, v of facets\n          continue if k is 'message'\n          error[ k ] = v\n        throw error\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'assert'\n      deterministic:  true\n      varargs:        false\n      call:           ( test, message ) ->\n        if ( not test? ) or ( test is 0 )\n          throw new Error message\n        return test\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'warn_if'\n      deterministic:  true\n      varargs:        false\n      call:           ( test, message ) -> warn message if ( test is 1 ); test\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'warn_unless'\n      deterministic:  true\n      varargs:        false\n      call:           ( test, message ) -> warn message if ( not test? ) or ( test is 0 ); test\n\n\n    #=======================================================================================================\n    # VARIABLES\n    #-------------------------------------------------------------------------------------------------------\n    @variables  = {}\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           prefix + 'getv'\n      deterministic:  false\n      call:           @getv.bind @\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_table_function\n      name:           prefix + 'variables',\n      deterministic:  false,\n      columns:        [ 'name', 'value', ]\n      parameters:     []\n      rows:           ( ( name ) -> yield [ name, ( @getv name ), ] for name of @variables ).bind @\n\n    #=======================================================================================================\n    # DATETIME\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      ### Returns a DBay_timestamp representing the present point in time. ###\n      name:           prefix + 'dt_now'\n      deterministic:  false\n      varargs:        false\n      call:           => @dt_now()\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      ### Given a DBay_timestamp, returns an English human-readable text indicating the remoteness of that\n      time relative to now, like 'four minutes ago' or 'in a week'. ###\n      name:           prefix + 'dt_from_now'\n      deterministic:  false\n      varargs:        false\n      call:           ( dbay_timestamp ) => @dt_from_now dbay_timestamp\n\n    #-------------------------------------------------------------------------------------------------------\n    return null\n\n\n  #=========================================================================================================\n  # VARIABLES (2)\n  #---------------------------------------------------------------------------------------------------------\n  setv: ( name, value ) -> @variables[ name ] = value\n\n  #---------------------------------------------------------------------------------------------------------\n  getv: ( name ) ->\n    if ( R = @variables[ name ] ) is undefined\n      throw new E.DBay_unknown_variable '^dbay/stdlib@1^', name\n    return switch\n      when R is true  then 1\n      when R is false then 0\n      else R\n\n  #=========================================================================================================\n  # DATETIME (2)\n  #---------------------------------------------------------------------------------------------------------\n  dt_from_now: ( dbay_timestamp ) ->\n    return ( @dt_parse dbay_timestamp ).fromNow()\n\n  #---------------------------------------------------------------------------------------------------------\n  dt_now: -> @_dayjs().utc().format @_dt_dbay_timestamp_output_template\n\n  #---------------------------------------------------------------------------------------------------------\n  dt_parse: ( dbay_timestamp ) ->\n    @types.validate.dbay_dt_timestamp dbay_timestamp\n    R = ( @_dayjs dbay_timestamp, @_dt_dbay_timestamp_input_template ).utc()\n    throw new E.DBay_invalid_timestamp '^dbay/stdlib@1^', dbay_timestamp unless @types.isa.dbay_dt_valid_dayjs R\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  dt_format: ( dbay_timestamp, P... ) ->\n    R = @dt_parse dbay_timestamp\n    return R.format P...\n"
  ]
}