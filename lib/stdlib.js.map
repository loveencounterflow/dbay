{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/stdlib.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/STD'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n\n#-----------------------------------------------------------------------------------------------------------\n@Stdlib_mixin = ( clasz = Object ) => class extends clasz\n  ### TAINT use `cfg` ###\n  create_stdlib: ( cfg ) ->\n    @types.validate.dba_create_stdlib_cfg ( cfg = { @types.defaults.dba_create_stdlib_cfg..., cfg..., } )\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           cfg.prefix + 'str_reverse'\n      deterministic:  true\n      varargs:        false\n      call:           ( s ) -> ( Array.from s ).reverse().join ''\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_function\n      name:           cfg.prefix + 'str_join'\n      deterministic:  true\n      varargs:        true\n      call:           ( joiner, P... ) -> P.join joiner\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_table_function\n      name:           cfg.prefix + 'str_split_first'\n      columns:        [ 'prefix', 'suffix', ]\n      parameters:     [ 'text', 'splitter', ]\n      deterministic:  true\n      varargs:        false\n      rows:           ( text, splitter ) ->\n        return null if ( text is null ) or ( splitter is null )\n        if ( idx = text.indexOf splitter ) < 0 then yield [ text, null, ]\n        else                                        yield [ text[ ... idx ], text[ idx + 1 .. ], ]\n        return null\n\n    #-------------------------------------------------------------------------------------------------------\n    @create_table_function\n      name:           cfg.prefix + 'generate_series'\n      columns:        [ 'value', ]\n      parameters:     [ 'start', 'stop', 'step', ]\n      varargs:        true\n      deterministic:  true\n      rows: ( start, stop = Infinity, step = 1 ) ->\n        ### NOTE: `stop` differs from SQLite3, which has 9223372036854775807 ###\n        value = start\n        loop\n          break if value > stop\n          yield [ value, ]\n          value += step\n        return null\n\n    #-------------------------------------------------------------------------------------------------------\n    return null\n"
  ]
}