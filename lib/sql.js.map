{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sql.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,OAAA;;;EAKA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,KAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,iBAFF,EAGE,OAHF,EAIE,OAJF,EAKE,OALF,CAAA,GAK4B,KAL5B;;EAMA,CAAA,GAA4B,OAAA,CAAQ,UAAR,EAtB5B;;;EA0BM,IAAC,CAAA;IAAP,MAAA,IAAA;;;YAYE,CAAA,QAAA,CAAA;;YAGA,CAAA,QAAA,CAAA;;YAWA,CAAA,QAAA,CAAA;;;MAdA,CAAG,CAAE,IAAF,CAAA;eAAY,GAAA,GAAM,CAAE,IAAI,CAAC,OAAL,CAAa,IAAb,EAAmB,IAAnB,CAAF,CAAN,GAAoC;MAAhD;;MAGH,CAAG,CAAE,CAAF,CAAA;AACL,YAAA;QAAI,IAAqB,SAArB;AAAA,iBAAO,OAAP;;AACA,gBAAO,IAAA,GAAO,OAAA,CAAQ,CAAR,CAAd;AAAA,eACO,MADP;AACyB,mBAAQ,GAAA,GAAM,CAAE,CAAC,CAAC,OAAF,CAAU,IAAV,EAAgB,IAAhB,CAAF,CAAN,GAAiC,IADlE;;AAAA,eAGO,OAHP;AAGyB,mBAAO,CAAC,CAAC,QAAF,CAAA;AAHhC,eAIO,SAJP;AAIyB,mBAAO,CAAK,CAAH,GAAU,GAAV,GAAmB,GAArB;AAJhC,SADJ;;QAOI,MAAM,IAAI,CAAC,CAAC,mBAAN,CAA0B,WAA1B,EAAuC,IAAvC,EAA6C,CAA7C;MARL;;MAWH,CAAG,CAAE,CAAF,CAAA;AACL,YAAA,CAAA,EAAA;QAAI,IAAiE,CAAE,IAAA,GAAO,OAAA,CAAQ,CAAR,CAAT,CAAA,KAAwB,MAAzF;UAAA,MAAM,IAAI,CAAC,CAAC,wBAAN,CAA+B,WAA/B,EAA4C,IAA5C,EAAkD,CAAlD,EAAN;;AACA,eAAO,IAAA,GAAO,CAAE;;AAAE;UAAA,KAAA,mCAAA;;yBAAA,IAAC,CAAA,CAAD,CAAG,CAAH;UAAA,CAAA;;qBAAF,CAAmB,CAAC,IAApB,CAAyB,IAAzB,CAAF,CAAP,GAA2C;MAFjD;;IA1BL;;;;;;;;;kBASE,GAAA,GAAK,MAAM,CAAC;;;;;;EAnCd;;;;;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/SQL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\ntypes                     = require './types'\n{ isa\n  validate\n  validate_optional\n  declare\n  size_of\n  type_of }               = types\nE                         = require './errors'\n\n\n#===========================================================================================================\nclass @Sql\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ( dba ) ->\n  #   # super()\n  #   @cfg    = cfg ### TAINT freeze ###\n  #   return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  SQL: String.raw\n\n  #---------------------------------------------------------------------------------------------------------\n  I: ( name ) => '\"' + ( name.replace /\"/g, '\"\"' ) + '\"'\n\n  #---------------------------------------------------------------------------------------------------------\n  L: ( x ) =>\n    return 'null' unless x?\n    switch type = type_of x\n      when 'text'       then return  \"'\" + ( x.replace /'/g, \"''\" ) + \"'\"\n      # when 'list'       then return \"'#{@list_as_json x}'\"\n      when 'float'      then return x.toString()\n      when 'boolean'    then return ( if x then '1' else '0' )\n      # when 'list'       then throw new Error \"^dba@23^ use `X()` for lists\"\n    throw new E.Dba_sql_value_error '^dba@404^', type, x\n\n  #---------------------------------------------------------------------------------------------------------\n  X: ( x ) =>\n    throw new E.Dba_sql_not_a_list_error '^dba@405^', type, x unless ( type = type_of x ) is 'list'\n    return '( ' + ( ( @L e for e in x ).join ', ' ) + ' )'\n\n  # #---------------------------------------------------------------------------------------------------------\n  # interpolate: ( sql, Q ) -> sql.replace @_interpolation_pattern, ( $0, $1 ) => @as_sql Q[ $1 ]\n  #     # try\n  #     #   return @as_sql Q[ $1 ]\n  #     # catch error\n  #     #   throw new E.Dba_error \\\n  #     #     \"Âµ773 when trying to express placeholder #{rpr $1} as SQL literal, an error occurred: #{rpr error.message}\"\n  # _interpolation_pattern: /// \\$ (?: ( .+? ) \\b | \\{ ( [^}]+ ) \\} ) ///g\n"
  ]
}