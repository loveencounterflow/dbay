{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/udf-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/FUNCTIONS-MIXIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nE                         = require './errors'\nSQL                       = String.raw\nguy                       = require 'guy'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Dbay_udf = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  _$udf_initialize: ->\n    @_me._udf_catalog = {}\n\n  #---------------------------------------------------------------------------------------------------------\n  _register_udf: ( udf_type, cfg ) ->\n    ### TAINT validate more thoroughly, especially cfg._dba_udf_type ###\n    ### TAINT consider to use (virtual?) table for this ###\n    @types.validate.nonempty_text udf_type\n    @types.validate.object cfg\n    @types.validate.nonempty_text cfg.name\n    { name, } = cfg\n    switch udf_type\n      when 'single_valued'\n        entry =\n          name:   name\n          arity:  cfg.call.length ### TAINT respect varargs ###\n      else\n        entry =\n          name:   name\n          cfg:    cfg\n    @_udf_catalog = guy.lft.lets @_udf_catalog, ( d ) -> d[ cfg.name ] = entry\n    return null\n\n  #=========================================================================================================\n  # USER-DEFINED FUNCTIONS\n  #---------------------------------------------------------------------------------------------------------\n  create_function: ( cfg ) ->\n    @types.validate.dbay_create_function_cfg ( cfg = { @constructor.C.defaults.dbay_create_function_cfg..., cfg..., } )\n    { name\n      call\n      directOnly\n      deterministic\n      varargs }     = cfg\n    @sqlt1.function name, { deterministic, varargs, directOnly, }, call\n    @_register_udf 'single_valued', cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  create_aggregate_function: ( cfg ) ->\n    @types.validate.dbay_create_aggregate_function_cfg ( cfg = { @constructor.C.defaults.dbay_create_aggregate_function_cfg..., cfg..., } )\n    { name\n      start\n      step\n      directOnly\n      deterministic\n      varargs }     = cfg\n    @sqlt1.aggregate name, { start, step, deterministic, varargs, directOnly, }\n    @_register_udf 'aggregate', cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  create_window_function: ( cfg ) ->\n    @types.validate.dbay_create_window_function_cfg ( cfg = { @constructor.C.defaults.dbay_create_window_function_cfg..., cfg..., } )\n    { name\n      start\n      step\n      inverse\n      result\n      directOnly\n      deterministic\n      varargs }     = cfg\n    @sqlt1.aggregate name, { start, step, inverse, result, deterministic, varargs, directOnly, }\n    @_register_udf 'window', cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  create_table_function: ( cfg ) ->\n    @types.validate.dbay_create_table_function_cfg ( cfg = { @constructor.C.defaults.dbay_create_table_function_cfg..., cfg..., } )\n    { name\n      parameters\n      columns\n      rows\n      directOnly\n      deterministic\n      varargs }     = cfg\n    @sqlt1.table name, { parameters, columns, rows, deterministic, varargs, directOnly, }\n    @_register_udf 'table_function', cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  create_virtual_table: ( cfg ) ->\n    @types.validate.dbay_create_virtual_table_cfg ( cfg = { @constructor.C.defaults.dbay_create_virtual_table_cfg..., cfg..., } )\n    { name, create, } = cfg\n    @sqlt1.table name, create\n    @_register_udf 'virtual_table', cfg\n    return null\n\n\n"
  ]
}