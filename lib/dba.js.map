{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/dba.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/DBA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nHOLLERITH                 = require 'hollerith-codec'\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = @types\nLFT                       = require 'letsfreezethat'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Dba\n\n  #---------------------------------------------------------------------------------------------------------\n  @_defaults:\n    sqlt:       null  ### [`better-sqlite3`](https://github.com/JoshuaWise/better-sqlite3/) instance ###\n    echo:       false ### whether to echo statements to the terminal ###\n    debug:      false ### whether to print additional debugging info ###\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @_statements = {}\n    return null\n\n\n  #=========================================================================================================\n  # DEBUGGING\n  #---------------------------------------------------------------------------------------------------------\n  _echo: ( ref, sql ) ->\n    return null unless @settings.echo\n    echo ( CND.reverse CND.blue \"^icql@888-#{ref}^\" ) + ( CND.reverse CND.yellow sql )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _debug: ( P... ) ->\n    return null unless @settings.debug\n    debug P...\n    return null\n\n\n  #=========================================================================================================\n  # QUERY RESULT ADAPTERS\n  #---------------------------------------------------------------------------------------------------------\n  limit: ( n, iterator ) ->\n    count = 0\n    for x from iterator\n      return if count >= n\n      count += +1\n      yield x\n    return\n\n  #---------------------------------------------------------------------------------------------------------\n  single_row:   ( iterator ) ->\n    throw new Error \"µ33833 expected at least one row, got none\" if ( R = @first_row iterator ) is undefined\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  all_first_values: ( iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        R.push value\n        break\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_values: ( iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        yield value\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_row:    ( iterator  ) -> return row for row from iterator\n  ### TAINT must ensure order of keys in row is same as order of fields in query ###\n  single_value: ( iterator  ) -> return value for key, value of @single_row iterator\n  first_value:  ( iterator  ) -> return value for key, value of @first_row iterator\n  all_rows:     ( iterator  ) -> [ iterator..., ]\n\n\n  #=========================================================================================================\n  # QUERYING\n  #---------------------------------------------------------------------------------------------------------\n  query: ( sql, P... ) ->\n    @_echo 'query', sql\n    statement = ( @_statements[ sql ] ?= @db.prepare sql )\n    return statement.iterate P...\n\n  #---------------------------------------------------------------------------------------------------------\n  run: ( sql, P... ) ->\n    @_echo 'run', sql\n    statement = ( @_statements[ sql ] ?= @db.prepare sql )\n    return statement.run P...\n\n  #---------------------------------------------------------------------------------------------------------\n  _run_or_query: ( entry_type, is_last, sql, Q ) ->\n    @_echo '_run_or_query', sql\n    statement     = ( @_statements[ sql ] ?= @db.prepare sql )\n    returns_data  = statement.reader\n    #.......................................................................................................\n    ### Always use `run()` method if statement does not return data: ###\n    unless returns_data\n      return if Q? then ( statement.run Q ) else statement.run()\n    #.......................................................................................................\n    ### If statement does return data, consume iterator unless this is the last statement: ###\n    if ( entry_type is 'procedure' ) or ( not is_last )\n      return if Q? then ( statement.all Q ) else statement.all()\n    #.......................................................................................................\n    ### Return iterator: ###\n    return if Q? then ( statement.iterate Q ) else statement.iterate()\n\n  #---------------------------------------------------------------------------------------------------------\n  execute: ( sql  ) ->\n    @_echo 'execute', sql\n    return @db.exec sql\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare: ( sql  ) ->\n    @_echo 'prepare', sql\n    return @db.prepare sql\n\n\n  #=========================================================================================================\n  # OTHER\n  #---------------------------------------------------------------------------------------------------------\n  aggregate:      ( P...  ) -> @db.aggregate        P...\n  backup:         ( P...  ) -> @db.backup           P...\n  checkpoint:     ( P...  ) -> @db.checkpoint       P...\n  close:          ( P...  ) -> @db.close            P...\n  read:           ( path  ) -> @db.exec FS.readFileSync path, { encoding: 'utf-8', }\n  function:       ( P...  ) -> @db.function         P...\n  load:           ( P...  ) -> @db.loadExtension    P...\n  pragma:         ( P...  ) -> @db.pragma           P...\n  transaction:    ( P...  ) -> @db.transaction      P...\n\n\n  #=========================================================================================================\n  # DB STRUCTURE REPORTING\n  #---------------------------------------------------------------------------------------------------------\n  catalog: ->\n    ### TAINT kludge: we sort by descending types so views, tables come before indexes (b/c you can't drop a\n    primary key index in SQLite) ###\n    # throw new Error \"µ45222 deprecated until next major version\"\n    @query \"select * from sqlite_master order by type desc, name;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  list_objects: ( schema = 'main' ) ->\n    validate.ic_schema schema\n    schema_x = @as_identifier schema\n    return @all_rows @query \"\"\"\n      select\n          type      as type,\n          name      as name,\n          sql       as sql\n        from #{schema_x}.sqlite_master\n        order by type desc, name;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  list_objects_2: ( imagine_options_object_here ) ->\n    validate.ic_schema schema\n    # for schema in @list_schema_names()\n    schema_x = @as_identifier schema\n\n    ### thx to https://stackoverflow.com/a/53160348/256361 ###\n    \"\"\"\n    select\n      m.name as table_name,\n      p.name as column_name\n    from\n      #{schema_x}.sqlite_master as m\n    join\n      #{schema_x}.pragma_table_info( m.name ) as p\n    order by\n      m.name,\n      p.cid;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  # list_schemas:       -> @pragma \"database_list;\"\n  list_schemas:       -> @all_rows @query \"select * from pragma_database_list order by name;\"\n  list_schema_names:  -> ( d.name for d in @list_schemas() )\n\n  #---------------------------------------------------------------------------------------------------------\n  type_of: ( name, schema = 'main' ) ->\n    for row from @catalog()\n      return row.type if row.name is name\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  column_types: ( table ) ->\n    R = {}\n    ### TAINT we apparently have to call the pragma in this roundabout fashion since SQLite refuses to\n    accept placeholders in that statement: ###\n    for row from @query @interpolate \"pragma table_info( $table );\", { table, }\n      R[ row.name ] = row.type\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _dependencies_of: ( table, schema = 'main' ) ->\n    return @query \"pragma #{@as_identifier schema}.foreign_key_list( #{@as_identifier table} )\"\n\n  #---------------------------------------------------------------------------------------------------------\n  dependencies_of:  ( table, schema = 'main' ) ->\n    validate.ic_schema schema\n    return ( row.table for row from @_dependencies_of table )\n\n  #---------------------------------------------------------------------------------------------------------\n  get_toposort: ( schema = 'main' ) ->\n    LTSORT  = require 'ltsort'\n    g       = LTSORT.new_graph()\n    indexes = []\n    types   = {}\n    sqls    = {}\n    for x from @list_objects schema\n      types[ x.name ] = x.type\n      sqls[  x.name ] = x.sql\n      unless x.type is 'table'\n        indexes.push x.name\n        continue\n      dependencies = @dependencies_of x.name\n      if dependencies.length is 0\n        LTSORT.add g, x.name\n      else\n        for dependency in dependencies\n          LTSORT.add g, x.name, dependency\n    R = [ ( LTSORT.linearize g )..., indexes..., ]\n    return ( { name, type: types[ name ], sql: sqls[ name ] } for name in R )\n\n\n\n  #=========================================================================================================\n  # DB STRUCTURE MODIFICATION\n  #---------------------------------------------------------------------------------------------------------\n  clear: ->\n    count = 0\n    for { type, name, } in @get_toposort()\n      statement = \"drop #{type} if exists #{@as_identifier name};\"\n      @execute statement\n      count += +1\n    return count\n\n  #---------------------------------------------------------------------------------------------------------\n  attach: ( path, schema ) ->\n    validate.ic_path path\n    validate.ic_schema schema\n    return @execute \"attach #{@as_sql path} as #{@as_identifier schema};\"\n\n\n  #=========================================================================================================\n  # IN-MEMORY PROCESSING\n  #-----------------------------------------------------------------------------------------------------------\n  copy_schema: ( from_schema, to_schema ) ->\n    schemas       = @list_schema_names()\n    inserts       = []\n    validate.ic_schema from_schema\n    validate.ic_schema to_schema\n    throw new Error \"µ57873 unknown schema #{rpr from_schema}\" unless from_schema in schemas\n    throw new Error \"µ57873 unknown schema #{rpr to_schema}\"   unless to_schema   in schemas\n    @pragma \"#{@as_identifier to_schema}.foreign_keys = off;\"\n    to_schema_x   = @as_identifier to_schema\n    from_schema_x = @as_identifier from_schema\n    #.......................................................................................................\n    for d in @list_objects from_schema\n      @_debug '^44463^', \"DB object:\", d\n      continue if ( not d.sql? ) or ( d.sql is '' )\n      continue if d.name in [ 'sqlite_sequence', ]\n      #.....................................................................................................\n      ### TAINT consider to use `validate.ic_db_object_type` ###\n      unless d.type in [ 'table', 'view', 'index', ]\n        throw new Error \"µ49888 unknown type #{rpr d.type} for DB object #{rpr d}\"\n      #.....................................................................................................\n      ### TAINT using not-so reliable string replacement as substitute for proper parsing ###\n      name_x  = @as_identifier d.name\n      sql     = d.sql.replace /\\s*CREATE\\s*(TABLE|INDEX|VIEW)\\s*/i, \"create #{d.type} #{to_schema_x}.\"\n      #.....................................................................................................\n      if sql is d.sql\n        throw new Error \"µ49889 unexpected SQL string #{rpr d.sql}\"\n      #.....................................................................................................\n      @execute sql\n      if d.type is 'table'\n        inserts.push \"insert into #{to_schema_x}.#{name_x} select * from #{from_schema_x}.#{name_x};\"\n    #.......................................................................................................\n    @_debug '^49864^', \"starting with inserts\"\n    @_debug '^49864^', \"objects in #{rpr from_schema}: #{rpr ( \"(#{d.type})#{d.name}\" for d in @list_objects from_schema ).join ', '}\"\n    @_debug '^49864^', \"objects in #{rpr to_schema}:   #{rpr ( \"(#{d.type})#{d.name}\" for d in @list_objects to_schema ).join ', '}\"\n    #.......................................................................................................\n    @execute sql for sql in inserts\n    @pragma \"#{@as_identifier to_schema}.foreign_keys = on;\"\n    @pragma \"#{@as_identifier to_schema}.foreign_key_check;\"\n    return null\n\n\n  #=========================================================================================================\n  # SQL CONSTRUCTION\n  #---------------------------------------------------------------------------------------------------------\n  as_identifier:  ( text  ) -> '\"' + ( text.replace /\"/g, '\"\"' ) + '\"'\n  # as_identifier:  ( text  ) -> '[' + ( text.replace /\\]/g, ']]' ) + ']'\n\n  #---------------------------------------------------------------------------------------------------------\n  escape_text: ( x ) ->\n    validate.text x\n    x.replace /'/g, \"''\"\n\n  #---------------------------------------------------------------------------------------------------------\n  list_as_json: ( x ) ->\n    validate.list x\n    return JSON.stringify x\n\n  #---------------------------------------------------------------------------------------------------------\n  as_sql: ( x ) ->\n    switch type = type_of x\n      when 'text'     then return \"'#{@escape_text x}'\"\n      when 'list'     then return \"'#{@list_as_json x}'\"\n      when 'float'    then return x.toString()\n      when 'boolean'  then return ( if x then '1' else '0' )\n      when 'null'     then return 'null'\n      when 'undefined'\n        throw new Error \"µ12341 unable to express 'undefined' as SQL literal\"\n    throw new Error \"µ12342 unable to express a #{type} as SQL literal, got #{rpr x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  interpolate: ( sql, Q ) ->\n    return sql.replace @_interpolation_pattern, ( $0, $1 ) =>\n      try\n        return @as_sql Q[ $1 ]\n      catch error\n        throw new Error \\\n          \"µ55563 when trying to express placeholder #{rpr $1} as SQL literal, an error occurred: #{rpr error.message}\"\n  _interpolation_pattern: /// \\$ (?: ( .+? ) \\b | \\{ ( [^}]+ ) \\} ) ///g\n\n\n  #=========================================================================================================\n  # SORTABLE LISTS\n  #---------------------------------------------------------------------------------------------------------\n  as_hollerith:   ( x ) -> HOLLERITH.encode x\n  from_hollerith: ( x ) -> HOLLERITH.decode x\n\n\n"
  ]
}