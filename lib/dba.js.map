{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/dba.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/DBA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nHOLLERITH                 = require 'hollerith-codec'\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = @types\nLFT                       = require 'letsfreezethat'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass @Dba\n\n  #---------------------------------------------------------------------------------------------------------\n  @_defaults:\n    sqlt:       null  ### [`better-sqlite3`](https://github.com/JoshuaWise/better-sqlite3/) instance ###\n    echo:       false ### whether to echo statements to the terminal ###\n    debug:      false ### whether to print additional debugging info ###\n    path:       ''\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg          = { @constructor._defaults..., cfg..., }\n    ### TAINT allow to pass through `better-sqlite3` options with `cfg` ###\n    @sqlt         = @cfg.sqlt ? ( require 'better-sqlite3' ) ( @cfg.path ? '' )\n    @_statements  = {}\n    return null\n\n\n  #=========================================================================================================\n  # DEBUGGING\n  #---------------------------------------------------------------------------------------------------------\n  _echo: ( ref, sql ) ->\n    return null unless @cfg.echo\n    echo ( CND.reverse CND.blue \"^icql@888-#{ref}^\" ) + ( CND.reverse CND.yellow sql )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _debug: ( P... ) ->\n    return null unless @cfg.debug\n    debug P...\n    return null\n\n\n  #=========================================================================================================\n  # INTERNA\n  #---------------------------------------------------------------------------------------------------------\n  _schema_from_cfg: ( cfg ) ->\n    schema    = cfg?.schema ? 'main'\n    schema_x  = @as_identifier schema\n    return { schema, schema_x, }\n\n\n  #=========================================================================================================\n  # QUERY RESULT ADAPTERS\n  #---------------------------------------------------------------------------------------------------------\n  limit: ( n, iterator ) ->\n    count = 0\n    for x from iterator\n      return if count >= n\n      count += +1\n      yield x\n    return\n\n  #---------------------------------------------------------------------------------------------------------\n  single_row:   ( iterator ) ->\n    throw new Error \"µ33833 expected at least one row, got none\" if ( R = @first_row iterator ) is undefined\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  all_first_values: ( iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        R.push value\n        break\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_values: ( iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        yield value\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_row:    ( iterator  ) -> return row for row from iterator\n  ### TAINT must ensure order of keys in row is same as order of fields in query ###\n  single_value: ( iterator  ) -> return value for key, value of @single_row iterator\n  first_value:  ( iterator  ) -> return value for key, value of @first_row iterator\n  all_rows:     ( iterator  ) -> [ iterator..., ]\n\n\n  #=========================================================================================================\n  # QUERYING\n  #---------------------------------------------------------------------------------------------------------\n  query: ( sql, P... ) ->\n    @_echo 'query', sql\n    statement = ( @_statements[ sql ] ?= @sqlt.prepare sql )\n    return statement.iterate P...\n\n  #---------------------------------------------------------------------------------------------------------\n  run: ( sql, P... ) ->\n    @_echo 'run', sql\n    statement = ( @_statements[ sql ] ?= @sqlt.prepare sql )\n    return statement.run P...\n\n  #---------------------------------------------------------------------------------------------------------\n  _run_or_query: ( entry_type, is_last, sql, Q ) ->\n    @_echo '_run_or_query', sql\n    statement     = ( @_statements[ sql ] ?= @sqlt.prepare sql )\n    returns_data  = statement.reader\n    #.......................................................................................................\n    ### Always use `run()` method if statement does not return data: ###\n    unless returns_data\n      return if Q? then ( statement.run Q ) else statement.run()\n    #.......................................................................................................\n    ### If statement does return data, consume iterator unless this is the last statement: ###\n    if ( entry_type is 'procedure' ) or ( not is_last )\n      return if Q? then ( statement.all Q ) else statement.all()\n    #.......................................................................................................\n    ### Return iterator: ###\n    return if Q? then ( statement.iterate Q ) else statement.iterate()\n\n  #---------------------------------------------------------------------------------------------------------\n  execute: ( sql  ) ->\n    @_echo 'execute', sql\n    return @sqlt.exec sql\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare: ( sql  ) ->\n    @_echo 'prepare', sql\n    return @sqlt.prepare sql\n\n\n  #=========================================================================================================\n  # OTHER\n  #---------------------------------------------------------------------------------------------------------\n  aggregate:      ( P...  ) -> @sqlt.aggregate        P...\n  backup:         ( P...  ) -> @sqlt.backup           P...\n  checkpoint:     ( P...  ) -> @sqlt.checkpoint       P...\n  close:          ( P...  ) -> @sqlt.close            P...\n  read:           ( path  ) -> @sqlt.exec FS.readFileSync path, { encoding: 'utf-8', }\n  function:       ( P...  ) -> @sqlt.function         P...\n  load:           ( P...  ) -> @sqlt.loadExtension    P...\n  pragma:         ( P...  ) -> @sqlt.pragma           P...\n  transaction:    ( P...  ) -> @sqlt.transaction      P...\n\n  #---------------------------------------------------------------------------------------------------------\n  get_foreign_key_state: -> not not ( @pragma \"foreign_keys;\" )[ 0 ].foreign_keys\n\n  #---------------------------------------------------------------------------------------------------------\n  set_foreign_key_state: ( onoff ) ->\n    ### TAINT make schema-specific ###\n    validate.boolean onoff\n    @pragma \"foreign_keys = #{onoff};\"\n    return null\n\n\n  #=========================================================================================================\n  # DB STRUCTURE REPORTING\n  #---------------------------------------------------------------------------------------------------------\n  catalog: ->\n    ### TAINT kludge: we sort by descending types so views, tables come before indexes (b/c you can't drop a\n    primary key index in SQLite) ###\n    # throw new Error \"µ45222 deprecated until next major version\"\n    @query \"select * from sqlite_master order by type desc, name;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  list_objects: ( cfg = {} ) ->\n    { schema\n      schema_x }  = @_schema_from_cfg cfg\n    validate.ic_schema schema\n    validate.dba_list_objects_ordering cfg._ordering\n    #.......................................................................................................\n    if cfg._ordering is 'drop'\n      return @all_rows @query \"\"\"\n        select\n            type      as type,\n            name      as name,\n            sql       as sql\n          from #{schema_x}.sqlite_master\n          order by type desc, name;\"\"\"\n    #.......................................................................................................\n    return @all_rows @query \"\"\"\n      select\n          type      as type,\n          name      as name,\n          sql       as sql\n        from #{schema_x}.sqlite_master\n        order by type, name;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  list_objects_2: ( imagine_options_object_here ) ->\n    # for schema in @list_schema_names()\n    schema    = 'main'\n    validate.ic_schema schema\n    schema_x  = @as_identifier schema\n    ### thx to https://stackoverflow.com/a/53160348/256361 ###\n    return @all_rows @query \"\"\"\n      select\n        'main'  as schema,\n        'field' as type,\n        m.name  as relation_name,\n        p.name  as field_name\n      from\n        #{schema_x}.sqlite_master as m\n      join\n        #{schema_x}.pragma_table_info( m.name ) as p\n      order by\n        m.name,\n        p.cid;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  # list_schemas:       -> @pragma \"database_list;\"\n  list_schemas:       -> @all_rows @query \"select * from pragma_database_list order by name;\"\n  list_schema_names:  -> ( d.name for d in @list_schemas() )\n\n  #---------------------------------------------------------------------------------------------------------\n  type_of: ( name, schema = 'main' ) ->\n    for row from @catalog()\n      return row.type if row.name is name\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  column_types: ( table ) ->\n    R = {}\n    ### TAINT we apparently have to call the pragma in this roundabout fashion since SQLite refuses to\n    accept placeholders in that statement: ###\n    for row from @query @interpolate \"pragma table_info( $table );\", { table, }\n      R[ row.name ] = row.type\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _dependencies_of: ( table, schema = 'main' ) ->\n    return @query \"pragma #{@as_identifier schema}.foreign_key_list( #{@as_identifier table} )\"\n\n  #---------------------------------------------------------------------------------------------------------\n  dependencies_of:  ( table, schema = 'main' ) ->\n    validate.ic_schema schema\n    return ( row.table for row from @_dependencies_of table )\n\n\n  #=========================================================================================================\n  # DB STRUCTURE MODIFICATION\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT Error: index associated with UNIQUE or PRIMARY KEY constraint cannot be dropped ###\n  clear: ( cfg ) ->\n    { schema\n      schema_x }  = @_schema_from_cfg cfg\n    validate.ic_schema schema\n    R             = 0\n    fk_state      = @get_foreign_key_state()\n    @set_foreign_key_state off\n    for { type, name, } in @list_objects { schema, _ordering: 'drop', }\n      statement = \"drop #{type} if exists #{@as_identifier name};\"\n      @execute statement\n      R += +1\n    @set_foreign_key_state fk_state\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  attach: ( path, schema ) ->\n    validate.ic_path path\n    validate.ic_schema schema\n    return @execute \"attach #{@as_sql path} as #{@as_identifier schema};\"\n\n\n  #=========================================================================================================\n  # IN-MEMORY PROCESSING\n  #-----------------------------------------------------------------------------------------------------------\n  copy_schema: ( from_schema, to_schema ) ->\n    schemas       = @list_schema_names()\n    inserts       = []\n    validate.ic_schema from_schema\n    validate.ic_schema to_schema\n    throw new Error \"µ57873 unknown schema #{rpr from_schema}\" unless from_schema in schemas\n    throw new Error \"µ57873 unknown schema #{rpr to_schema}\"   unless to_schema   in schemas\n    @pragma \"#{@as_identifier to_schema}.foreign_keys = off;\"\n    to_schema_x   = @as_identifier to_schema\n    from_schema_x = @as_identifier from_schema\n    #.......................................................................................................\n    for d in @list_objects from_schema\n      @_debug '^44463^', \"DB object:\", d\n      continue if ( not d.sql? ) or ( d.sql is '' )\n      continue if d.name in [ 'sqlite_sequence', ]\n      #.....................................................................................................\n      ### TAINT consider to use `validate.ic_db_object_type` ###\n      unless d.type in [ 'table', 'view', 'index', ]\n        throw new Error \"µ49888 unknown type #{rpr d.type} for DB object #{rpr d}\"\n      #.....................................................................................................\n      ### TAINT using not-so reliable string replacement as substitute for proper parsing ###\n      name_x  = @as_identifier d.name\n      sql     = d.sql.replace /\\s*CREATE\\s*(TABLE|INDEX|VIEW)\\s*/i, \"create #{d.type} #{to_schema_x}.\"\n      #.....................................................................................................\n      if sql is d.sql\n        throw new Error \"µ49889 unexpected SQL string #{rpr d.sql}\"\n      #.....................................................................................................\n      @execute sql\n      if d.type is 'table'\n        inserts.push \"insert into #{to_schema_x}.#{name_x} select * from #{from_schema_x}.#{name_x};\"\n    #.......................................................................................................\n    @_debug '^49864^', \"starting with inserts\"\n    @_debug '^49864^', \"objects in #{rpr from_schema}: #{rpr ( \"(#{d.type})#{d.name}\" for d in @list_objects from_schema ).join ', '}\"\n    @_debug '^49864^', \"objects in #{rpr to_schema}:   #{rpr ( \"(#{d.type})#{d.name}\" for d in @list_objects to_schema ).join ', '}\"\n    #.......................................................................................................\n    @execute sql for sql in inserts\n    @pragma \"#{@as_identifier to_schema}.foreign_keys = on;\"\n    @pragma \"#{@as_identifier to_schema}.foreign_key_check;\"\n    return null\n\n\n  #=========================================================================================================\n  # SQL CONSTRUCTION\n  #---------------------------------------------------------------------------------------------------------\n  as_identifier:  ( text  ) -> '\"' + ( text.replace /\"/g, '\"\"' ) + '\"'\n  # as_identifier:  ( text  ) -> '[' + ( text.replace /\\]/g, ']]' ) + ']'\n\n  #---------------------------------------------------------------------------------------------------------\n  escape_text: ( x ) ->\n    validate.text x\n    x.replace /'/g, \"''\"\n\n  #---------------------------------------------------------------------------------------------------------\n  list_as_json: ( x ) ->\n    validate.list x\n    return JSON.stringify x\n\n  #---------------------------------------------------------------------------------------------------------\n  as_sql: ( x ) ->\n    switch type = type_of x\n      when 'text'     then return \"'#{@escape_text x}'\"\n      when 'list'     then return \"'#{@list_as_json x}'\"\n      when 'float'    then return x.toString()\n      when 'boolean'  then return ( if x then '1' else '0' )\n      when 'null'     then return 'null'\n      when 'undefined'\n        throw new Error \"µ12341 unable to express 'undefined' as SQL literal\"\n    throw new Error \"µ12342 unable to express a #{type} as SQL literal, got #{rpr x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  interpolate: ( sql, Q ) ->\n    return sql.replace @_interpolation_pattern, ( $0, $1 ) =>\n      try\n        return @as_sql Q[ $1 ]\n      catch error\n        throw new Error \\\n          \"µ55563 when trying to express placeholder #{rpr $1} as SQL literal, an error occurred: #{rpr error.message}\"\n  _interpolation_pattern: /// \\$ (?: ( .+? ) \\b | \\{ ( [^}]+ ) \\} ) ///g\n\n\n  #=========================================================================================================\n  # SORTABLE LISTS\n  #---------------------------------------------------------------------------------------------------------\n  as_hollerith:   ( x ) -> HOLLERITH.encode x\n  from_hollerith: ( x ) -> HOLLERITH.decode x\n\n\n"
  ]
}