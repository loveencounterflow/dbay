{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/query-mixin.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA;IAAA,oKAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B,EAP5B;;;EASA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,UAAR,EAV5B;;;EAcA,IAAC,CAAA,UAAD,GAAc,CAAE,QAAQ,MAAV,CAAA,GAAA;AAAqB,QAAA;oBAAC,MAAA,QAAc,MAAd;;;;YAalC,CAAA,SAAA,CAAA;OAXF;;;MACE,kBAAoB,CAAA,CAAA;QAClB,GAAG,CAAC,KAAK,CAAC,GAAV,CAAc,IAAC,CAAA,GAAf,EAAoB,aAApB,EAAmC;UAAE,UAAA,EAAY,KAAd;UAAqB,KAAA,EAAO,CAAA;QAA5B,CAAnC;AACA,eAAO;MAFW,CADtB;;;MAME,uBAAyB,CAAA,CAAA;AAC3B,YAAA;QAAI,KAAA,qBAAA;UAAA,OAAO,IAAC,CAAA,WAAW,CAAE,CAAF;QAAnB;AACA,eAAO;MAFgB;;MAKzB,EAAI,CAAE,KAAF,EAAA,GAAS,CAAT,CAAA;AACN,YAAA,SAAA,EAAA;;AAAW,gBAAO,CAAE,IAAA,GAAO,IAAC,CAAA,KAAK,CAAC,OAAP,CAAe,KAAf,CAAT,CAAP;AAAA,eACA,MADA;AAC0B,mBAAO,IAAC,CAAA,qBAAD,CAAuB,KAAvB,EAA8B,GAAA,CAA9B;AADjC,eAEA,QAFA;AAAA,eAEU,UAFV;AAE0B,mBAAO,IAAC,CAAA,gBAAD,CAAkB,KAAlB,EAAyB,GAAA,CAAzB;AAFjC,eAGA,WAHA;YAIH,SAAA,GAAY;YACL,IAAG,SAAS,CAAC,MAAb;qBAA2B,SAAS,CAAC,OAAV,CAAkB,GAAA,CAAlB,EAA3B;aAAA,MAAA;qBAA2D,SAAS,CAAC,GAAV,CAAc,GAAA,CAAd,EAA3D;;AALJ;QAMP,MAAM,IAAI,CAAC,CAAC,eAAN,CAAsB,gBAAtB,EAAwC,kCAAxC,EAA4E,IAA5E;MAPJ,CAXN;;;MAqBE,qBAAuB,CAAE,GAAF,EAAA,GAAO,CAAP,CAAA;AACzB,YAAA,KAAA,EAAA;QAAI,IAA2B,CAAC,CAAC,MAAF,GAAW,CAAtC;AAAA,iBAAO,IAAC,CAAA,KAAD,CAAO,GAAP,EAAY,GAAA,CAAZ,EAAP;;QACA,IAA6B,IAAC,CAAA,WAAW,CAAE,GAAF,CAAZ,KAAuB,IAAC,CAAA,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,OAA3E;AAAA,iBAAO,IAAC,CAAA,OAAD,CAAS,GAAT,EAAc,GAAA,CAAd,EAAP;;AACA;UACE,SAAA,GAAY,IAAC,CAAA,WAAW,CAAE,GAAF,CAAZ,GAAsB,IAAC,CAAA,KAAK,CAAC,OAAP,CAAe,GAAf,EADpC;SAEA,cAAA;UAAM;UACJ,MAAmB,CAAE,KAAK,CAAC,IAAN,KAAc,YAAhB,CAAA,IACb,CAAE,KAAK,CAAC,OAAN,KAAiB,0DAAnB,EADN;YAAA,MAAM,MAAN;;UAEA,IAAC,CAAA,WAAW,CAAE,GAAF,CAAZ,GAAsB,IAAC,CAAA,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC;AAC7C,iBAAO,IAAC,CAAA,OAAD,CAAS,GAAT,EAAc,GAAA,CAAd,EAJT;;QAKO,IAAG,SAAS,CAAC,MAAb;iBAA2B,SAAS,CAAC,OAAV,CAAkB,GAAA,CAAlB,EAA3B;SAAA,MAAA;iBAA2D,SAAS,CAAC,GAAV,CAAc,GAAA,CAAd,EAA3D;;MAVc,CArBzB;;;MAkCE,KAAO,CAAE,GAAF,EAAA,GAAO,CAAP,CAAA;AACT,YAAA,IAAA,EAAA;QAAI,SAAA,GAAe,IAAC,CAAA,KAAK,CAAC,GAAG,CAAC,SAAX,CAAqB,GAArB,CAAH,GAAiC,GAAjC,GAA0C,8CAAc,CAAE,GAAF,QAAA,CAAE,GAAF,IAAW,IAAC,CAAA,KAAK,CAAC,OAAP,CAAe,GAAf,CAAzB;QAC/C,IAAG,SAAS,CAAC,MAAb;iBAA2B,SAAS,CAAC,OAAV,CAAkB,GAAA,CAAlB,EAA3B;SAAA,MAAA;iBAA2D,SAAS,CAAC,GAAV,CAAc,GAAA,CAAd,EAA3D;;MAFF,CAlCT;;;MAuCE,IAAM,CAAE,GAAF,EAAA,GAAO,CAAP,CAAA;AACR,YAAA,IAAA,EAAA;QAAI,SAAA,GAAe,IAAC,CAAA,KAAK,CAAC,GAAG,CAAC,SAAX,CAAqB,GAArB,CAAH,GAAiC,GAAjC,GAA0C,8CAAc,CAAE,GAAF,QAAA,CAAE,GAAF,IAAW,IAAC,CAAA,KAAK,CAAC,OAAP,CAAe,GAAf,CAAzB;AACtD,eAAO,SAAS,CAAC,OAAV,CAAkB,GAAA,CAAlB;MAFH,CAvCR;;;MA4CE,QAAU,CAAE,GAAF,EAAA,GAAO,CAAP,CAAA;AACZ,YAAA,IAAA,EAAA;QAAI,SAAA,GAAe,IAAC,CAAA,KAAK,CAAC,GAAG,CAAC,SAAX,CAAqB,GAArB,CAAH,GAAiC,GAAjC,GAA0C,8CAAc,CAAE,GAAF,QAAA,CAAE,GAAF,IAAW,IAAC,CAAA,KAAK,CAAC,OAAP,CAAe,GAAf,CAAzB;AACtD,eAAO,SAAS,CAAC,GAAV,CAAc,GAAA,CAAd;MAFC,CA5CZ;;;MAiDE,SAAW,CAAE,GAAF,EAAA,GAAO,CAAP,CAAA;AAAgB,YAAA;qEAAgC;MAAhD,CAjDb;;;MAoDgB,EAAd,YAAc,CAAE,GAAF,EAAA,GAAO,CAAP,CAAA;AAChB,YAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAI;QAAA,KAAA,UAAA;UACE,KAAA,UAAA;;YACE,MAAM;AACN;UAFF;QADF;AAIA,eAAO;MALK,CApDhB;;;MA4DE,gBAAkB,CAAE,GAAF,EAAA,GAAO,CAAP,CAAA;eAAiB,CAAE,GAAA,CAAE,IAAC,CAAA,YAAD,CAAc,GAAd,EAAmB,GAAA,CAAnB,CAAF,CAAF;MAAjB,CA5DpB;;;MA+DE,UAAY,CAAE,GAAF,EAAA,GAAO,CAAP,CAAA;AACd,YAAA;QAAI,IAAO,CAAE,IAAA,GAAS,IAAC,CAAA,QAAD,CAAU,GAAV,EAAe,GAAA,CAAf,CAAX,CAAkC,CAAC,MAAnC,KAA6C,CAApD;UACE,MAAM,IAAI,CAAC,CAAC,wBAAN,CAA+B,gBAA/B,EAAiD,IAAI,CAAC,MAAtD,EADR;;AAEA,eAAO,IAAI,CAAE,CAAF;MAHD,CA/Dd;;;MAqEE,YAAc,CAAE,GAAF,EAAA,GAAO,CAAP,CAAA;AAChB,YAAA,IAAA,EAAA;QAAI,GAAA,GAAM,IAAC,CAAA,UAAD,CAAY,GAAZ,EAAiB,GAAA,CAAjB;QACN,IAAO,CAAE,IAAA,GAAO,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAT,CAA0B,CAAC,MAA3B,KAAqC,CAA5C;UACE,MAAM,IAAI,CAAC,CAAC,0BAAN,CAAiC,gBAAjC,EAAmD,IAAnD,EADR;;AAEA,eAAO,GAAG,CAAE,IAAI,CAAE,CAAF,CAAN;MAJE,CArEhB;;;MA4EE,OAAS,CAAE,GAAF,EAAA,GAAO,CAAP,CAAA;QACP,IAA0E,CAAC,CAAC,MAAF,GAAW,CAArF;UAAA,MAAM,IAAI,CAAC,CAAC,yBAAN,CAAgC,gBAAhC,EAAkD,OAAlD,EAA2D,GAAA,CAAI,CAAJ,CAA3D,EAAN;;QACA,IAAC,CAAA,KAAK,CAAC,IAAP,CAAY,GAAZ;AACA,eAAO;MAHA,CA5EX;;;MAkFE,YAAc,CAAE,GAAF,CAAA;QACZ,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,qBAAhB,CAAsC,CAAE,GAAA,GAAM,CAAE,GAAA,IAAC,CAAA,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,qBAA1B,EAAoD,GAAA,GAApD,CAAR,CAAtC;AACA,eAAO,IAAC,CAAA,OAAD,CAAS,CAAE,OAAA,CAAQ,IAAR,CAAF,CAAgB,CAAC,YAAjB,CAA8B,GAAG,CAAC,IAAlC,EAAwC;UAAE,QAAA,EAAU,GAAG,CAAC;QAAhB,CAAxC,CAAT;MAFK,CAlFhB;;;MAuFE,OAAS,CAAE,GAAF,CAAA;AACX,YAAA;AAAI,eAAO,8CAAc,CAAE,GAAF,QAAA,CAAE,GAAF,IAAW,IAAC,CAAA,KAAK,CAAC,OAAP,CAAe,GAAf,CAAzB;MADA,CAvFX;;;MA2FE,MAAQ,CAAA,GAAE,CAAF,CAAA;eACN,IAAC,CAAA,KAAK,CAAC,MAAP,CAAc,GAAA,CAAd;MADM;;IA7F0B;EAAtB;AAdd",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/MIXIN/QUERY'\ndebug                     = CND.get_logger 'debug',     badge\n#...........................................................................................................\nguy                       = require 'guy'\nE                         = require './errors'\n\n\n#===========================================================================================================\n@DBay_query = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  _$query_initialize: ->\n    guy.props.def @_me, '_statements', { enumerable: false, value: {}, }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _clear_statements_cache: ->\n    delete @_statements[ k ] for k of @_statements\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  do: ( first, P... ) =>\n    return switch ( type = @types.type_of first )\n      when 'text'               then return @_query_run_or_execute first, P...\n      when 'object', 'function' then return @with_transaction first, P...\n      when 'statement'\n        statement = first\n        return if statement.reader then ( statement.iterate P... ) else ( statement.run P... )\n    throw new E.DBay_wrong_type '^dbay/query@1^', 'a text, an object, or a function', type\n\n  #---------------------------------------------------------------------------------------------------------\n  _query_run_or_execute: ( sql, P... ) ->\n    return @query sql, P... if P.length > 0\n    return @execute sql, P... if @_statements[ sql ] is @constructor.C.symbols.execute\n    try\n      statement = @_statements[ sql ] = @sqlt1.prepare sql\n    catch error\n      throw error unless ( error.name is 'RangeError' ) \\\n        and ( error.message is \"The supplied SQL string contains more than one statement\" )\n      @_statements[ sql ] = @constructor.C.symbols.execute\n      return @execute sql, P...\n    return if statement.reader then ( statement.iterate P... ) else ( statement.run P... )\n\n  #---------------------------------------------------------------------------------------------------------\n  query: ( sql, P... ) ->\n    statement = if @types.isa.statement sql then sql else ( @_statements[ sql ] ?= @sqlt1.prepare sql )\n    return if statement.reader then ( statement.iterate P... ) else ( statement.run P... )\n\n  #---------------------------------------------------------------------------------------------------------\n  walk: ( sql, P... ) ->\n    statement = if @types.isa.statement sql then sql else ( @_statements[ sql ] ?= @sqlt1.prepare sql )\n    return statement.iterate P...\n\n  #---------------------------------------------------------------------------------------------------------\n  all_rows: ( sql, P... ) ->\n    statement = if @types.isa.statement sql then sql else ( @_statements[ sql ] ?= @sqlt1.prepare sql )\n    return statement.all P...\n\n  #---------------------------------------------------------------------------------------------------------\n  first_row: ( sql, P... ) -> ( @all_rows sql, P... )[ 0 ] ? null\n\n  #---------------------------------------------------------------------------------------------------------\n  first_values: ( sql, P... ) ->\n    for row from @walk sql, P...\n      for key, value of row\n        yield value\n        break\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  all_first_values: ( sql, P... ) -> [ ( @first_values sql, P... )..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  single_row: ( sql, P... ) ->\n    unless ( rows = ( @all_rows sql, P... ) ).length is 1\n      throw new E.DBay_expected_single_row '^dbay/query@2^', rows.length\n    return rows[ 0 ]\n\n  #---------------------------------------------------------------------------------------------------------\n  single_value: ( sql, P... ) ->\n    row = @single_row sql, P...\n    unless ( keys = Object.keys row ).length is 1\n      throw new E.DBay_expected_single_value '^dbay/query@4^', keys\n    return row[ keys[ 0 ] ]\n\n  #---------------------------------------------------------------------------------------------------------\n  execute: ( sql, P... ) ->\n    throw new E.DBay_argument_not_allowed '^dbay/query@5^', \"extra\", rpr P if P.length > 0\n    @sqlt1.exec sql\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  execute_file: ( cfg ) ->\n    @types.validate.dbay_execute_file_cfg ( cfg = { @constructor.C.defaults.dbay_execute_file_cfg..., cfg..., } )\n    return @execute ( require 'fs' ).readFileSync cfg.path, { encoding: cfg.encoding, }\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare: ( sql ) ->\n    return ( @_statements[ sql ] ?= @sqlt1.prepare sql )\n\n  #---------------------------------------------------------------------------------------------------------\n  pragma: ( P...  ) ->\n    @sqlt1.pragma P...\n\n"
  ]
}