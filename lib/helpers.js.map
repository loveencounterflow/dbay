{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/helpers.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,QAAA,GAA4B;;EAC5B,GAAA,GAA4B,OAAA,CAAQ,KAAR,EAlB5B;;;EAqBA,IAAC,CAAA,YAAD,GAAgB,QAAA,CAAE,IAAF,CAAA;AAChB,QAAA;AAAE;AACE,aAAO,CAAE,EAAE,CAAC,QAAH,CAAY,IAAZ,CAAF,CAAoB,CAAC,WAArB,CAAA,EADT;KAEA,cAAA;MAAM;MACJ,IAAmB,KAAK,CAAC,IAAN,KAAc,QAAjC;QAAA,MAAM,MAAN;OADF;;AAEA,WAAO;EALO,EArBhB;;;EA6BA,IAAC,CAAA,YAAD,GAAmB,IAAC,CAAA,YAAD,CAAc,QAAd,CAAH,GAA+B,QAA/B,GAA6C,CAAE,OAAA,CAAQ,IAAR,CAAF,CAAgB,CAAC,MAAjB,CAAA,EA7B7D;;;EAgCM,IAAC,CAAA;IAAP,MAAA,SAAA;MAWE,gBAAkB,CAAA,CAAA;AACpB,YAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA;QAAI,KAAA,GAAQ,IAAC,CAAA;QACT,IAAG,0BAAH;UACE,IAAA,oFAAwC;UACxC,KAAA,uFAAwC;UACxC,GAAG,CAAC,KAAK,CAAC,GAAV,CAAc,IAAd,EAAiB,UAAjB,EAA6B;YAAE,UAAA,EAAY,KAAd;YAAqB,KAAA,EAAS,GAAG,CAAC,WAAJ,CAAgB,IAAhB,EAAsB,KAAtB;UAA9B,CAA7B,EAHF;SAAA,MAAA;UAKE,GAAG,CAAC,KAAK,CAAC,GAAV,CAAc,IAAd,EAAiB,UAAjB,EAA6B;YAAE,UAAA,EAAY,KAAd;YAAqB,KAAA,EAAS,GAAG,CAAC,cAAc,CAAC,IAAnB,CAAwB,GAAxB;UAA9B,CAA7B,EALF;;AAMA,eAAO;MARS,CATpB;;;MAoBE,oBAAsB,CAAA,CAAA,EAAA;;;;;;;AACxB,YAAA;QAMI,GAAA,GAAU,IAAC,CAAA,QAAD,CAAU,aAAV,EAAyB,aAAzB;AACV,eAAO,CAAA,KAAA,CAAA,CAAQ,GAAR,CAAA,OAAA;MARa,CApBxB;;;MA+BE,WAAa,CAAA,CAAA;QAAG,IAAC,CAAA,gBAAD,CAAA;MAAH;;IAjCf;;;;;;;;;;IAUE,QAAC,CAAA,YAAD,GAAe;;;;;AA1CjB",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nshm_path                  = '/dev/shm'\nguy                       = require 'guy'\n\n#-----------------------------------------------------------------------------------------------------------\n@is_directory = ( path ) ->\n  try\n    return ( FS.statSync path ).isDirectory()\n  catch error\n    throw error unless error.code is 'ENOENT'\n  return false\n\n#-----------------------------------------------------------------------------------------------------------\n@autolocation = if @is_directory shm_path then shm_path else ( require 'os' ).tmpdir()\n\n#===========================================================================================================\nclass @Dbay_rnd\n\n  #=========================================================================================================\n  # RANDOM NUMBER GENERATION\n  # seedable for testing purposes\n  #---------------------------------------------------------------------------------------------------------\n  ### To obtain a class with a seedable PRNG that emits repeatable sequences, define class property\n  `@_rnd_int_cfg: { seed, delta, }` where both seed and delta can be arbitrary finite numbers. **NOTE**\n  very small `delta` values (like 1e-10) may cause adjacent numbers to be close together or even repeat. To\n  use default values for both parameters, set `@_rnd_int_cfg: true`.###\n  @_rnd_int_cfg: false\n  _initialize_prng: ->\n    clasz = @constructor\n    if clasz._rnd_int_cfg?\n      seed      = clasz._rnd_int_cfg?.seed  ? 12.34\n      delta     = clasz._rnd_int_cfg?.delta ? 1\n      guy.props.def @, '_rnd_int', { enumerable: false, value: ( CND.get_rnd_int seed, delta ), }\n    else\n      guy.props.def @, '_rnd_int', { enumerable: false, value: ( CND.random_integer.bind CND ), }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_random_filename: ->\n    ### TAINT rename `dbnick` to `dbnick` ###\n    ### Given an optional `dbnick`, return an object with the `dbnick` and the `url` for a new SQLite\n    connection. The url will look like `'file:your_name_here?mode=memory&cache=shared` so multiple\n    connections to the same RAM DB can be opened. When `dbnick` is not given, a random dbnick like\n    `_icql_6200294332` will be chosen (prefix `_icql_`, suffix ten decimal digits). For testing, setting\n    class property `@_rnd_int_cfg` can be used to obtain repeatable series of random names. ###\n    n10     = @_rnd_int 1_000_000_000, 9_999_999_999\n    return \"dbay-#{n10}.sqlite\"\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: -> @_initialize_prng()\n\n\n"
  ]
}