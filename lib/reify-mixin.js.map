{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/reify-mixin.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B,EAP5B;;;EASA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,GAAA,GAA4B,MAAM,CAAC,IAXnC;;;EAeA,IAAC,CAAA,UAAD,GAAc,CAAE,QAAQ,MAAV,CAAA,GAAA;WAAsB,MAAA,QAAc,MAAd,CAAA;;;;;;;MASlC,oBAAsB,CAAE,GAAF,CAAA;AACxB,YAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;QAAI,CAAA,CAAE,MAAF,CAAA,GAAc,IAAC,CAAA,GAAf;QACA,CAAA,GAAI,IAAC,CAAA,QAAD,CAAU,GAAG,CAAA;;;;;;OAAA,CAAA,CAON,MAPM,CAAA;;;cAAA,CAAb,EAUiB,GAVjB;QAWJ,KAAA,mCAAA;;UAAA,GAAG,CAAC,QAAJ,GAAe,CAAI,CAAI,GAAG,CAAC;QAA3B;AACA,eAAO;MAda,CAPxB;;;MAwBE,oBAAsB,CAAE,GAAF,CAAA;AACxB,YAAA,CAAA,EAAA;QAAI,CAAA,CAAE,MAAF,CAAA,GAAc,IAAC,CAAA,GAAf;QACA,CAAA,GAAI,IAAC,CAAA,QAAD,CAAU,GAAG,CAAA;;;;;OAAA,CAAA,CAMN,MANM,CAAA;eAAA,CAAb,EAOkB,GAPlB;AAQJ,eAAO;MAVa,CAxBxB;;;MAqCE,kCAAoC,CAAE,GAAF,CAAA;AACtC,YAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;QAAI,CAAA,CAAE,MAAF,CAAA,GAAc,IAAC,CAAA,GAAf;QACA,CAAA,GAAI,CAAA;AACJ;;;;;QAAA,KAAA,UAAA;UAME,CAAC,CAAE,GAAG,CAAC,UAAN,CAAD,GAAsB;YAAE,KAAA,EAAO,GAAG,CAAC,QAAb;YAAuB,KAAA,EAAO,GAAG,CAAC;UAAlC;QANxB;AAOA,eAAO;MAV2B,CArCtC;;;MAkDE,uBAAyB,CAAE,GAAF,CAAA;AAC3B,YAAA,CAAA,EAAA,EAAA,EAAA,QAAA,EAAA;QAAI,CAAA,CAAE,CAAF,CAAA,GAAY,IAAC,CAAA,GAAb;QACA,GAAA,GAAY,IAAC,CAAA,oBAAD,CAAsB,GAAtB;QACZ,QAAA,GAAY;;AAAE;UAAA,KAAA,qCAAA;;yBAAA,CAAA,CAAE,EAAE,CAAC,KAAL;UAAA,CAAA;;YAAF,CAA4B,CAAC,IAA7B,CAAkC,IAAlC;AACZ,eAAO,GAAG,CAAA,cAAA,CAAA,CAAiB,QAAjB,CAAA,EAAA;MAJa,CAlD3B;;;MAyDE,wBAA0B,CAAE,GAAF,CAAA;AAC5B,YAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,UAAA,EAAA,GAAA,EAAA;QAAI,CAAA,CAAE,CAAF,CAAA,GAAY,IAAC,CAAA,GAAb;QACA,CAAA,GAAY,CAAA;AACZ;QAAA,KAAA,iBAAA;WAAgB,CAAE,KAAF,EAAS,KAAT;UACd,CAAC,CAAE,UAAF,CAAD,GAAkB,CAAA,WAAA,CAAA,CAAc,CAAA,CAAE,KAAF,CAAd,CAAA,GAAA,CAAA,CAA2B,CAAA,CAAE,KAAF,CAA3B,CAAA,EAAA;QADpB;AAEA,eAAO;MALiB;;IA3DQ;EAAtB;AAfd",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/MIXIN/REIFY'\ndebug                     = CND.get_logger 'debug',     badge\n#...........................................................................................................\nguy                       = require 'guy'\nE                         = require './errors'\nSQL                       = String.raw\n\n\n#===========================================================================================================\n@DBay_reify = ( clasz = Object ) => class extends clasz\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _$reify_initialize: ->\n  #   guy.props.def @_me, '_statements', { enumerable: false, value: {}, }\n  #   return undefined\n\n\n  #---------------------------------------------------------------------------------------------------------\n  _rf_get_primary_keys: ( cfg ) ->\n    { schema  } = @cfg\n    R = @all_rows SQL\"\"\"\n      select \n          -- pk                          as nr,\n          $table                      as \"table\",\n          name                        as field, \n          lower( type )               as type,\n          not \"notnull\"               as nullable\n        from #{schema}.pragma_table_info( $table )\n        where true \n          and ( pk > 0 )\n        order by pk;\"\"\", cfg\n    row.nullable = not not row.nullable for row in R\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _rf_get_foreign_keys: ( cfg ) ->\n    { schema  } = @cfg\n    R = @all_rows SQL\"\"\"\n      select \n          $table                      as from_table,\n          \"from\"                      as from_field,\n          \"table\"                     as to_table,\n          coalesce( \"to\", \"from\" )    as to_field\n        from #{schema}.pragma_foreign_key_list( $table )\n        order by seq;\"\"\", cfg\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _rf_get_foreign_key_by_from_fields: ( cfg ) ->\n    { schema  } = @cfg\n    R = {}\n    for row from @query SQL\"\"\"\n      select \n          \"from\"                      as from_field,\n          \"table\"                     as to_table,\n          coalesce( \"to\", \"from\" )    as to_field\n        from #{schema}.pragma_foreign_key_list( $table );\"\"\", cfg\n      R[ row.from_field ] = { table: row.to_table, field: row.to_field, }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_primary_key_clause: ( cfg ) ->\n    { I     } = @sql\n    pks       = @_rf_get_primary_keys cfg \n    pk_names  = ( I pk.field for pk in pks ).join ', '\n    return SQL\"primary key ( #{pk_names} )\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_foreign_key_clauses: ( cfg ) ->\n    { I     } = @sql\n    R         = {}\n    for from_field, { table, field, } of @_rf_get_foreign_key_by_from_fields cfg \n      R[ from_field ] = \"references #{I table} ( #{I field} )\"\n    return R\n"
  ]
}