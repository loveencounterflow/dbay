{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/errors.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/ERRORS'\ndebug                     = CND.get_logger 'debug',     badge\n# warn                      = CND.get_logger 'warn',      badge\n# info                      = CND.get_logger 'info',      badge\n# urge                      = CND.get_logger 'urge',      badge\n# help                      = CND.get_logger 'help',      badge\n# whisper                   = CND.get_logger 'whisper',   badge\n# echo                      = CND.echo.bind CND\n\n\n#-----------------------------------------------------------------------------------------------------------\nclass @Dba_error extends Error\n  constructor: ( ref, message ) ->\n    super()\n    @message  = \"#{ref} (#{@constructor.name}) #{message}\"\n    @ref      = ref\n    return undefined ### always return `undefined` from constructor ###\n\n#-----------------------------------------------------------------------------------------------------------\nclass @Dba_cfg_error                 extends @Dba_error\n  constructor: ( ref, message )     -> super ref, message\nclass @Dba_schema_exists             extends @Dba_error\n  constructor: ( ref, schema )      -> super ref, \"schema #{rpr schema} already exists\"\nclass @Dba_schema_unknown            extends @Dba_error\n  constructor: ( ref, schema )      -> super ref, \"schema #{rpr schema} does not exist\"\nclass @Dba_schema_nonempty           extends @Dba_error\n  constructor: ( ref, schema )      -> super ref, \"schema #{rpr schema} isn't empty\"\nclass @Dba_schema_not_allowed        extends @Dba_error\n  constructor: ( ref, schema )      -> super ref, \"schema #{rpr schema} not allowed here\"\nclass @Dba_schema_repeated           extends @Dba_error\n  constructor: ( ref, schema )      -> super ref, \"unable to copy schema to itself, got #{rpr schema}\"\nclass @Dba_expected_one_row          extends @Dba_error\n  constructor: ( ref, row_count )   -> super ref, \"expected 1 row, got #{row_count}\"\nclass @Dba_extension_unknown         extends @Dba_error\n  constructor: ( ref, path )        -> super ref, \"extension of path #{path} is not registered for any format\"\nclass @Dba_not_implemented           extends @Dba_error\n  constructor: ( ref, what )        -> super ref, \"#{what} isn't implemented (yet)\"\nclass @Dba_deprecated                extends @Dba_error\n  constructor: ( ref, what )        -> super ref, \"#{what} has been deprecated\"\nclass @Dba_unexpected_db_object_type extends @Dba_error\n  constructor: ( ref, type, value ) -> super ref, \"Âµ769 unknown type #{rpr type} of DB object #{d}\"\nclass @Dba_sql_value_error           extends @Dba_error\n  constructor: ( ref, type, value ) -> super ref, \"unable to express a #{type} as SQL literal, got #{rpr value}\"\nclass @Dba_sql_not_a_list_error      extends @Dba_error\n  constructor: ( ref, type, value ) -> super ref, \"expected a list, got a #{type}\"\nclass @Dba_unexpected_sql            extends @Dba_error\n  constructor: ( ref, sql )         -> super ref, \"unexpected SQL string #{rpr sql}\"\nclass @Dba_sqlite_too_many_dbs       extends @Dba_error\n  constructor: ( ref, schema )      -> super ref, \"unable to attach schema #{rpr schema}: too many attached databases\"\nclass @Dba_sqlite_error              extends @Dba_error\n  constructor: ( ref, error )       -> super ref, \"#{error.code ? 'SQLite error'}: #{error.message}\"\nclass @Dba_no_arguments_allowed      extends @Dba_error\n  constructor: ( ref, name, arity ) -> super ref, \"method #{name} doesn't take arguments, got #{arity}\"\nclass @Dba_argument_not_allowed      extends @Dba_error\n  constructor: ( ref, name, value ) -> super ref, \"argument #{name} not allowed, got #{rpr value}\"\nclass @Dba_empty_csv                 extends @Dba_error\n  constructor: ( ref, path )        -> super ref, \"no CSV records found in file #{path}\"\n\n### TAINT replace with more specific error, like below ###\nclass @Dba_format_unknown extends @Dba_error\n  constructor: ( ref, format ) ->\n    super ref, \"unknown DB format #{ref format}\"\n\nclass @Dba_import_format_unknown extends @Dba_error\n  constructor: ( ref, format ) ->\n    formats = [ ( require './types' )._import_formats..., ].join ', '\n    super ref, \"unknown import format #{rpr format} (known formats are #{formats})\"\n\n"
  ]
}