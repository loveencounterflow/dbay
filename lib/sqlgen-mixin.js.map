{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sqlgen-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/MIXIN/SQLGEN'\ndebug                     = CND.get_logger 'debug',     badge\n#...........................................................................................................\nguy                       = require 'guy'\nE                         = require './errors'\nSQL                       = String.raw\n\n\n#===========================================================================================================\n@DBay_sqlgen = ( clasz = Object ) => class extends clasz\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _$sqlgen_initialize: ->\n  #   guy.props.def @_me, '_statements', { enumerable: false, value: {}, }\n  #   return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare_insert: ( cfg ) -> @prepare @create_insert cfg\n  create_insert: ( cfg ) ->\n    @types.validate.dbay_create_insert_cfg ( cfg = { @constructor.C.defaults.dbay_create_insert_cfg..., cfg..., } )\n    { L, I, V, }  = @sql\n    if cfg.fields?\n      fields = cfg.fields\n    else\n      fields = @_get_field_names cfg.schema, cfg.into\n      fields = ( field for field in fields when not field in cfg.exclude ) if cfg.exclude?\n    R             = []\n    R.push \"insert into #{I cfg.schema}.#{I cfg.into} (\"\n    debug '^34937534^', fields\n    R.push ( ( I field ) for field in fields ).join ', '\n    R.push \") values (\"\n    ### TAINT how to escape dollar placeholders??? ###\n    R.push ( ( \"$#{field}\" ) for field in fields ).join ', '\n    R.push \");\"\n    return R.join ' '\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_field_names: ( schema, name ) ->\n    schema_i  = @sql.I schema\n    statement = @prepare SQL\"select name from #{schema_i}.pragma_table_info( $name );\"\n    statement.raw true\n    R         = ( row[ 0 ] for row from statement.iterate { name, } )\n    throw new E.DBay_object_unknown '^dbay/sqlgen@1^', schema, name if R.length is 0\n    return R\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _get_fields: ( schema, name ) ->\n  #   ### TAINT rewrite; see above ###\n  #   # @types.validate.dbay_fields_of_cfg ( cfg = { @constructor.C.defaults.dbay_fields_of_cfg..., cfg..., } )\n  #   schema_i          = @sql.I schema\n  #   R                 = []\n  #   for d from @all_rows SQL\"select * from #{schema_i}.pragma_table_info( $name );\", { name, }\n  #     # { cid: 0, name: 'id', type: 'integer', notnull: 1, dflt_value: null, pk: 1 }\n  #     type = if d.type is '' then null else d.type\n  #     R.push {\n  #       idx:      d.cid\n  #       type:     type\n  #       name:     d.name\n  #       optional: !d.notnull\n  #       default:  d.dflt_value\n  #       is_pk:    !!d.pk }\n  #   throw new E.DBay_object_unknown '^dbay/sqlgen@1^', schema, name if R.length is 0\n  #   return R\n\n\n\n\n\n\n\n"
  ]
}