{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/random-mixin.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B,EAP5B;;;EASA,GAAA,GAA4B,OAAA,CAAQ,KAAR,EAT5B;;;EAaA,IAAC,CAAA,WAAD,GAAe,CAAE,QAAQ,MAAV,CAAA,GAAA;;;;eAAsB,MAAA,QAAc,MAAd,CAAA;;QAanC,mBAAqB,CAAA,CAAA;AACvB,cAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA;UAAI,KAAA,GAAQ,IAAC,CAAA;UACT,IAAG,0BAAH;YACE,IAAA,oFAAwC;YACxC,KAAA,uFAAwC;YACxC,GAAG,CAAC,KAAK,CAAC,GAAV,CAAc,IAAC,CAAA,GAAf,EAAoB,UAApB,EAAgC;cAAE,UAAA,EAAY,KAAd;cAAqB,KAAA,EAAS,GAAG,CAAC,WAAJ,CAAgB,IAAhB,EAAsB,KAAtB;YAA9B,CAAhC,EAHF;WAAA,MAAA;YAKE,GAAG,CAAC,KAAK,CAAC,GAAV,CAAc,IAAC,CAAA,GAAf,EAAoB,UAApB,EAAgC;cAAE,UAAA,EAAY,KAAd;cAAqB,KAAA,EAAS,GAAG,CAAC,cAAc,CAAC,IAAnB,CAAwB,GAAxB;YAA9B,CAAhC,EALF;;AAMA,iBAAO;QARY,CAXvB;;;QAsBE,oBAAsB,CAAA,CAAA,EAAA;;;;;;;AACxB,cAAA;UAMI,GAAA,GAAU,IAAC,CAAA,QAAD,CAAU,aAAV,EAAyB,aAAzB;AACV,iBAAO,CAAA,KAAA,CAAA,CAAQ,GAAR,CAAA,OAAA;QARa;;MAxBa;;;;;;;;;;MAUnC,MAAC,CAAA,YAAD,GAAe;;;;;EAVF;AAbf",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/MIXIN/RANDOM'\ndebug                     = CND.get_logger 'debug',     badge\n#...........................................................................................................\nguy                       = require 'guy'\n\n\n#===========================================================================================================\n@Dbay_random = ( clasz = Object ) => class extends clasz\n\n  #=========================================================================================================\n  # RANDOM NUMBER GENERATION\n  # seedable for testing purposes\n  #---------------------------------------------------------------------------------------------------------\n  ### To obtain a class with a seedable PRNG that emits repeatable sequences, define class property\n  `@_rnd_int_cfg: { seed, delta, }` where both seed and delta can be arbitrary finite numbers. **NOTE**\n  very small `delta` values (like 1e-10) may cause adjacent numbers to be close together or even repeat. To\n  use default values for both parameters, set `@_rnd_int_cfg: true`.###\n  @_rnd_int_cfg: false\n\n  #---------------------------------------------------------------------------------------------------------\n  _$random_initialize: ->\n    clasz = @constructor\n    if clasz._rnd_int_cfg?\n      seed      = clasz._rnd_int_cfg?.seed  ? 12.34\n      delta     = clasz._rnd_int_cfg?.delta ? 1\n      guy.props.def @_me, '_rnd_int', { enumerable: false, value: ( CND.get_rnd_int seed, delta ), }\n    else\n      guy.props.def @_me, '_rnd_int', { enumerable: false, value: ( CND.random_integer.bind CND ), }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_random_filename: ->\n    ### TAINT rename `dbnick` to `dbnick` ###\n    ### Given an optional `dbnick`, return an object with the `dbnick` and the `url` for a new SQLite\n    connection. The url will look like `'file:your_name_here?mode=memory&cache=shared` so multiple\n    connections to the same RAM DB can be opened. When `dbnick` is not given, a random dbnick like\n    `_icql_6200294332` will be chosen (prefix `_icql_`, suffix ten decimal digits). For testing, setting\n    class property `@_rnd_int_cfg` can be used to obtain repeatable series of random names. ###\n    n10     = @_rnd_int 1_000_000_000, 9_999_999_999\n    return \"dbay-#{n10}.sqlite\"\n\n\n\n"
  ]
}