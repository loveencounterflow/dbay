{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/open-close-mixin.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,CAAA,EAAA,GAAA;;;EAIA,CAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,GAAA,GAA4B,MAAM,CAAC,IALnC;;;EASA,IAAC,CAAA,cAAD,GAAkB,CAAE,QAAQ,MAAV,CAAA,GAAA;WAAsB,MAAA,QAAc,MAAd,CAAA;;MAGtC,IAAM,CAAE,GAAF,CAAA;AACR,YAAA,IAAA,EAAA,MAAA,EAAA;QAAI,GAAA,GAAkB,CAAE,GAAA,GAAF,EAAtB;;QAEI,IAAC,CAAA,WAAW,CAAC,oBAAb,CAAkC,IAAlC,EAAqC,GAArC;QACA,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,aAAhB,CAA8B,GAA9B;QACA,CAAA,CAAE,IAAF,EAAQ,MAAR,EAAgB,SAAhB,CAAA,GAA+B,GAA/B;QACA,IAAC,CAAA,OAAD,CAAS,MAAT,EAAiB,IAAjB,EAAuB,SAAvB;AACA,eAAO;MAPH,CADR;;;MAWE,OAAS,CAAE,MAAF,EAAU,IAAV,EAAgB,SAAhB,CAAA;AACX,YAAA;AAMI;;;;;;;UACE,CAAE,IAAC,CAAA,KAAK,CAAC,OAAP,CAAe,GAAG,CAAA,cAAA,CAAlB,CAAF,CAAsC,CAAC,GAAvC,CAA2C,CAAE,IAAF,EAAQ,MAAR,CAA3C,EADF;SAEA,cAAA;UAAM;UACJ,IAAmB,KAAK,CAAC,IAAN,KAAc,cAAjC;YAAA,MAAM,MAAN;;UACA,IAA4D,KAAK,CAAC,OAAO,CAAC,UAAd,CAAyB,6BAAzB,CAA5D;YAAA,MAAM,IAAI,CAAC,CAAC,wBAAN,CAA+B,WAA/B,EAA4C,MAA5C,EAAN;;UACA,MAAM,IAAI,CAAC,CAAC,iBAAN,CAA+B,WAA/B,EAA4C,KAA5C,EAHR;;QAIA,IAAC,CAAA,gBAAD,CAAkB,MAAlB,EAA0B,IAA1B,EAAgC,SAAhC;AACA,eAAO;MAdA;;IAb6B;EAAtB;AATlB",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nE                         = require './errors'\nSQL                       = String.raw\n\n\n#===========================================================================================================\n@DBay_openclose = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  open: ( cfg ) ->\n    cfg             = { cfg..., }\n    # cfg.temporary  ?= if cfg.path? then false else true\n    @constructor.cast_constructor_cfg @, cfg\n    @types.validate.dbay_open_cfg cfg\n    { path, schema, temporary, } = cfg\n    @_attach schema, path, temporary\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _attach: ( schema, path, temporary ) ->\n    ### Execute SQL\"attach $path as $schema\". This will fail if\n      * `schema` already exists, or\n      * the maximum number of schemas (125) has already been attached, or\n      * the schema name is `main` or `temp`.\n    ###\n    #.......................................................................................................\n    try\n      ( @sqlt1.prepare SQL\"attach ? as ?;\" ).run [ path, schema, ]\n    catch error\n      throw error unless error.code is 'SQLITE_ERROR'\n      throw new E.DBay_sqlite_too_many_dbs '^dba@313^', schema if error.message.startsWith 'too many attached databases'\n      throw new E.DBay_sqlite_error        '^dba@314^', error\n    @_register_schema schema, path, temporary\n    return null\n\n\n"
  ]
}