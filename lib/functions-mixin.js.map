{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/functions-mixin.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAZ5B;;;EAcA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,CAAA,CAAE,MAAF,CAAA,GAA4B,OAAA,CAAQ,UAAR,CAA5B,EAjBA;;;EAqBA,IAAC,CAAA,eAAD,GAAmB,CAAE,QAAQ,MAAV,CAAA,GAAA;WAAsB,MAAA,QAAc,MAAd,CAAA;;;;MAMvC,eAAiB,CAAE,GAAF,CAAA;AACnB,YAAA,IAAA,EAAA,aAAA,EAAA,UAAA,EAAA,IAAA,EAAA;QAAI,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,uBAAhB,CAAwC,CAAE,GAAA,GAAM,CAAE,GAAA,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,uBAAlB,EAA8C,GAAA,GAA9C,CAAR,CAAxC;QACA,CAAA,CAAE,IAAF,EACE,IADF,EAEE,UAFF,EAGE,aAHF,EAIE,OAJF,CAAA,GAIkB,GAJlB;AAKA,eAAO,IAAC,CAAA,IAAI,CAAC,QAAN,CAAe,IAAf,EAAqB,CAAE,aAAF,EAAiB,OAAjB,EAA0B,UAA1B,CAArB,EAA8D,IAA9D;MAPQ,CAHnB;;;MAaE,yBAA2B,CAAE,GAAF,CAAA;AAC7B,YAAA,aAAA,EAAA,UAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA;QAAI,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,iCAAhB,CAAkD,CAAE,GAAA,GAAM,CAAE,GAAA,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,iCAAlB,EAAwD,GAAA,GAAxD,CAAR,CAAlD;QACA,CAAA,CAAE,IAAF,EACE,KADF,EAEE,IAFF,EAGE,UAHF,EAIE,aAJF,EAKE,OALF,CAAA,GAKkB,GALlB;AAMA,eAAO,IAAC,CAAA,IAAI,CAAC,SAAN,CAAgB,IAAhB,EAAsB,CAAE,KAAF,EAAS,IAAT,EAAe,aAAf,EAA8B,OAA9B,EAAuC,UAAvC,CAAtB;MARkB,CAb7B;;;MAwBE,sBAAwB,CAAE,GAAF,CAAA;AAC1B,YAAA,aAAA,EAAA,UAAA,EAAA,OAAA,EAAA,IAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA;QAAI,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,8BAAhB,CAA+C,CAAE,GAAA,GAAM,CAAE,GAAA,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,8BAAlB,EAAqD,GAAA,GAArD,CAAR,CAA/C;QACA,CAAA,CAAE,IAAF,EACE,KADF,EAEE,IAFF,EAGE,OAHF,EAIE,MAJF,EAKE,UALF,EAME,aANF,EAOE,OAPF,CAAA,GAOkB,GAPlB;AAQA,eAAO,IAAC,CAAA,IAAI,CAAC,SAAN,CAAgB,IAAhB,EAAsB,CAAE,KAAF,EAAS,IAAT,EAAe,OAAf,EAAwB,MAAxB,EAAgC,aAAhC,EAA+C,OAA/C,EAAwD,UAAxD,CAAtB;MAVe,CAxB1B;;;MAqCE,qBAAuB,CAAE,GAAF,CAAA;AACzB,YAAA,OAAA,EAAA,aAAA,EAAA,UAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA;QAAI,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,6BAAhB,CAA8C,CAAE,GAAA,GAAM,CAAE,GAAA,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,6BAAlB,EAAoD,GAAA,GAApD,CAAR,CAA9C;QACA,CAAA,CAAE,IAAF,EACE,UADF,EAEE,OAFF,EAGE,IAHF,EAIE,UAJF,EAKE,aALF,EAME,OANF,CAAA,GAMkB,GANlB;AAOA,eAAO,IAAC,CAAA,IAAI,CAAC,KAAN,CAAY,IAAZ,EAAkB,CAAE,UAAF,EAAc,OAAd,EAAuB,IAAvB,EAA6B,aAA7B,EAA4C,OAA5C,EAAqD,UAArD,CAAlB;MATc,CArCzB;;;MAiDE,oBAAsB,CAAE,GAAF,CAAA;AACxB,YAAA,MAAA,EAAA;QAAI,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,4BAAhB,CAA6C,CAAE,GAAA,GAAM,CAAE,GAAA,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,4BAAlB,EAAmD,GAAA,GAAnD,CAAR,CAA7C;QACA,CAAA,CAAE,IAAF,EAAQ,MAAR,CAAA,GAAoB,GAApB;AACA,eAAO,IAAC,CAAA,IAAI,CAAC,KAAN,CAAY,IAAZ,EAAkB,MAAlB;MAHa;;IApDiB;EAAtB;;EArBnB;;;AAAA",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/FUNCTIONS-MIXIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nE                         = require './errors'\n{ misfit }                = require './common'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Functions_mixin = ( clasz = Object ) => class extends clasz\n\n\n  #=========================================================================================================\n  # USER-DEFINED FUNCTIONS\n  #---------------------------------------------------------------------------------------------------------\n  create_function: ( cfg ) ->\n    @types.validate.dba_create_function_cfg ( cfg = { @types.defaults.dba_create_function_cfg..., cfg..., } )\n    { name\n      call\n      directOnly\n      deterministic\n      varargs }     = cfg\n    return @sqlt.function name, { deterministic, varargs, directOnly, }, call\n\n  #---------------------------------------------------------------------------------------------------------\n  create_aggregate_function: ( cfg ) ->\n    @types.validate.dba_create_aggregate_function_cfg ( cfg = { @types.defaults.dba_create_aggregate_function_cfg..., cfg..., } )\n    { name\n      start\n      step\n      directOnly\n      deterministic\n      varargs }     = cfg\n    return @sqlt.aggregate name, { start, step, deterministic, varargs, directOnly, }\n\n  #---------------------------------------------------------------------------------------------------------\n  create_window_function: ( cfg ) ->\n    @types.validate.dba_create_window_function_cfg ( cfg = { @types.defaults.dba_create_window_function_cfg..., cfg..., } )\n    { name\n      start\n      step\n      inverse\n      result\n      directOnly\n      deterministic\n      varargs }     = cfg\n    return @sqlt.aggregate name, { start, step, inverse, result, deterministic, varargs, directOnly, }\n\n  #---------------------------------------------------------------------------------------------------------\n  create_table_function: ( cfg ) ->\n    @types.validate.dba_create_table_function_cfg ( cfg = { @types.defaults.dba_create_table_function_cfg..., cfg..., } )\n    { name\n      parameters\n      columns\n      rows\n      directOnly\n      deterministic\n      varargs }     = cfg\n    return @sqlt.table name, { parameters, columns, rows, deterministic, varargs, directOnly, }\n\n  #---------------------------------------------------------------------------------------------------------\n  create_virtual_table: ( cfg ) ->\n    @types.validate.dba_create_virtual_table_cfg ( cfg = { @types.defaults.dba_create_virtual_table_cfg..., cfg..., } )\n    { name, create, } = cfg\n    return @sqlt.table name, create\n\n\n  #=========================================================================================================\n  # CONTEXT HANDLERS\n  #---------------------------------------------------------------------------------------------------------\n\n\n\n"
  ]
}