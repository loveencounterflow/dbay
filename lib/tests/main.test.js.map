{
  "version": 3,
  "file": "main.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/main.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/TESTS/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\nIC                        = require '../..'\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\nxrpr2                     = ( x ) -> inspect x, { colors: yes, breakLength: 20, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nICQL                      = require '../..'\nrequire '../exception-handler'\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"oneliners\" ] = ( T, done ) ->\n  PATH              = require 'path'\n  IC                = require 'intercourse'\n  intercourse_path  = require.resolve 'intercourse'\n  demo_path         = PATH.join intercourse_path, '../../demos/sqlite-demo.icql'\n  debug '22999', demo_path\n  db                = {}\n  ICQL.definitions_from_path_sync db, demo_path\n  debug '33442', db\n  throw new Error \"sorry no tests as yet\"\n  probes_and_matchers = [\n    # [\"procedure foobar:  some text\\n  illegal line\",null,'illegal follow-up after one-liner']\n    [\"procedure foobar: some text\",{\"foobar\":{\"type\":\"procedure\",\"null\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"null\",\"type\":\"procedure\"}}},null]\n    [\"procedure foobar(): some text\",{\"foobar\":{\"type\":\"procedure\",\"()\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"()\",\"type\":\"procedure\",\"signature\":[]}}},null]\n    [\"procedure foobar( first ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n    [\"procedure foobar(first): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n    [\"procedure foobar( first, ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n    [\"procedure foobar(first,): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n    [\"procedure foobar( first, second ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first,second)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first,second)\",\"type\":\"procedure\",\"signature\":[\"first\",\"second\"]}}},null]\n    [\"procedure foobar( first, second, ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first,second)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first,second)\",\"type\":\"procedure\",\"signature\":[\"first\",\"second\"]}}},null]\n    ]\n  #.........................................................................................................\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n  #     # try\n  #     result = await IC.read_definitions_from_text probe\n  #     # catch error\n  #     #   return resolve error\n  #     # debug '29929', xrpr2 result\n  #     resolve result\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"parameters are expanded in procedures\" ] = ( T, done ) ->\n  PATH              = require 'path'\n  get_icql_settings = ->\n    R                 = {}\n    R.connector       = require 'better-sqlite3'\n    R.db_path         = '/tmp/icql.db'\n    R.icql_path       = PATH.resolve PATH.join __dirname, '../../src/tests/test.icql'\n    return R\n  db                = ICQL.bind get_icql_settings()\n  # debug 'µ44433', db; process.exit 1\n  db.create_demo_table()\n  #.........................................................................................................\n  db.$.function 'echo', { deterministic: false, varargs: true  }, ( P... ) -> urge ( CND.grey 'DB' ), P...;  null\n  db.$.function 'e',    { deterministic: false, varargs: false }, ( x    ) -> urge ( CND.grey 'DB' ), rpr x; x\n  #.........................................................................................................\n  debug db.$.all_rows db.read_demo_rows()\n  debug db.$.all_rows db.select_by_rowid { rowid: 2, }\n  try\n    db.update_by_rowid { rowid: 2, status: 'bar', }\n  catch error\n    debug 'µ33555', error.code\n    debug 'µ33555', error.name\n    debug 'µ33555', ( k for k of error )\n    debug 'µ33555', error.message\n    # TypeError\n    process.exit 1\n  debug db.$.all_rows db.select_by_rowid { rowid: 2, }\n  #.........................................................................................................\n  # statement = db.$.prepare \"select rowid, * from demo where rowid = $rowid;\"\n  # info 'µ00908', [ ( statement.iterate { rowid: 2, } )..., ]\n  # # statement = db.$.prepare \"select 42; select rowid, * from demo where rowid = $rowid;\"\n  # # statement = db.$.prepare \"update demo set status = 'yes!' where rowid = $rowid;\"\n  # # info 'µ00908', statement.run { rowid: 2, }\n  # info 'µ00908', db.$.run \"update demo set status = 'yes!' where rowid = $rowid;\", { rowid: 2, extra: true, }\n  # debug db.$.all_rows db.select_by_rowid { rowid: 2, }\n\n  # probes_and_matchers = [\n  #   # [\"procedure foobar:  some text\\n  illegal line\",null,'illegal follow-up after one-liner']\n  #   [\"procedure foobar: some text\",{\"foobar\":{\"type\":\"procedure\",\"null\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"null\",\"type\":\"procedure\"}}},null]\n  #   [\"procedure foobar(): some text\",{\"foobar\":{\"type\":\"procedure\",\"()\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"()\",\"type\":\"procedure\",\"signature\":[]}}},null]\n  #   [\"procedure foobar( first ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n  #   [\"procedure foobar(first): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n  #   [\"procedure foobar( first, ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n  #   [\"procedure foobar(first,): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n  #   [\"procedure foobar( first, second ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first,second)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first,second)\",\"type\":\"procedure\",\"signature\":[\"first\",\"second\"]}}},null]\n  #   [\"procedure foobar( first, second, ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first,second)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first,second)\",\"type\":\"procedure\",\"signature\":[\"first\",\"second\"]}}},null]\n  #   ]\n  #.........................................................................................................\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n  #     # try\n  #     result = await IC.read_definitions_from_text probe\n  #     # catch error\n  #     #   return resolve error\n  #     # debug '29929', xrpr2 result\n  #     resolve result\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_demo 2\" ] = ( T, done ) ->\n  settings  = @get_settings()\n  db        = await ICQL.bind settings\n  db.load join_path settings.sqlitemk_path, 'extensions/amatch.so'\n  db.load join_path settings.sqlitemk_path, 'extensions/csv.so'\n  # R.$.db.exec \"\"\"select load_extension( 'fts5' );\"\"\"\n  db.import_table_texnames()\n  db.create_token_tables()\n  db.populate_token_tables()\n  # # whisper '-'.repeat 108\n  # # info row for row from db.fetch_texnames()\n  whisper '-'.repeat 108\n  urge 'fetch_texnames';        info xrpr row for row from db.fetch_texnames { limit: 100, }\n  # urge 'fetch_rows_of_txftsci'; info xrpr row for row from db.fetch_rows_of_txftsci { limit: 5, }\n  # urge 'fetch_rows_of_txftscs'; info xrpr row for row from db.fetch_rows_of_txftscs { limit: 5, }\n  urge 'fetch_stats'; info xrpr row for row from db.fetch_stats()\n  whisper '-'.repeat 108\n  urge 'fetch_token_matches'\n  whisper '-'.repeat 108\n  info ( xrpr row ) for row from db.fetch_token_matches { q: 'Iota', limit: 10, }\n  whisper '-'.repeat 108\n  info ( xrpr row ) for row from db.fetch_token_matches { q: 'acute', limit: 10, }\n  whisper '-'.repeat 108\n  info ( xrpr row ) for row from db.fetch_token_matches { q: 'u', limit: 10, }\n  whisper '-'.repeat 108\n  info ( xrpr row ) for row from limit 3, db.fetch_token_matches { q: 'mathbb', limit: 10, }\n  # debug ( k for k of iterator )\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"x\" ] = ( T, done ) ->\n#   T.eq 42, 42\n#   T.eq 42, 43\n#   done()\n#   return null\n\n\n############################################################################################################\nunless module.parent?\n  # test @\n  test @[ \"parameters are expanded in procedures\" ]\n  # @[ \"parameters are expanded in procedures\" ]()\n  # test @[ \"x\" ]\n  # test @[ \"basic 1\" ]\n  # test @[ \"signatures\" ]\n  # test @[ \"oneliners\" ]\n  # test @[ \"_parse demo\" ]\n\n\n"
  ]
}