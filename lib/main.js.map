{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,qBAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,CAAA,GAG4B,KAAK,CAAC,MAAN,CAAA,CAH5B;;EAIA,GAAA,GAA4B,MAAM,CAAC;;EACnC,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,qBAAA,GAA4B,OAAA,CAAQ,gBAAR,EAxB5B;;;EA2BA,KAAK,CAAC,OAAN,CAAc,mBAAd,EAAmC;IAAA,KAAA,EACjC;MAAA,sBAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAnB;MAAT,CAAxC;MACA,0BAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;eAAS,iBAAiB,CAAC,IAAlB,CAAuB,CAAvB;MAAT;IADxC;EADiC,CAAnC,EA3BA;;;EAgCA,KAAK,CAAC,OAAN,CAAc,iBAAd,EAAiC;IAAA,KAAA,EAC/B;MAAA,eAAA,EAA4C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAA5C;MACA,6BAAA,EAA4C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,YAAY,CAAC,OAAd,CAAsB,CAAC,CAAC,GAAxB;MAAT,CAD5C;MAEA,mCAAA,EAA4C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,YAAY,CAAC,aAAd,CAA4B,CAAC,CAAC,GAA9B;MAAT,CAF5C;MAGA,oCAAA,EAA4C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,YAAY,CAAC,aAAd,CAA4B,CAAC,CAAC,IAA9B;MAAT,CAH5C;MAIA,0CAAA,EAA4C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,YAAY,CAAC,iBAAd,CAAgC,CAAC,CAAC,MAAlC;MAAT;IAJ5C;EAD+B,CAAjC;;EAOM,IAAC,CAAA;IAAP,MAAA,KAAA,CAAA;;MAiBkB,OAAf,aAAe,CAAE,IAAF,CAAA;AAClB,YAAA;QAAI,CAAA,GAAmB,GAAG,CAAC,GAAG,CAAC,mBAAR,CAA4B,IAAI,CAAC,GAAjC,EAAsC,IAAtC,EAA4C,UAA5C,EAAwD,SAAxD;QACnB,CAAC,CAAC,aAAF,GAAmB,CAAI,IAAI,CAAC,GAAG,CAAC;QAAQ,OAAO,IAAI,CAAC,GAAG,CAAC;AACxD,eAAO;MAHO,CAflB;;;MAqByB,OAAtB,oBAAsB,CAAE,IAAF,CAAA;AACzB,YAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA;;;QAEI,IAAG,CAAE,IAAI,CAAC,GAAG,CAAC,GAAT,KAAgB,KAAlB,CAAA,IAA8B,CAAM,qBAAN,CAAjC;UACE,MAAM,IAAI,CAAC,CAAC,cAAN,CAAqB,SAArB,EAAgC,CAAA,+BAAA,CAAA,CAAgC,GAAA,CAAI,IAAI,CAAC,GAAT,CAAhC,CAAA,CAAhC,EADR;;;cAEQ,CAAC,MAAW;;QACpB,IAAG,CAAE,CAAI,IAAI,CAAC,GAAG,CAAC,GAAf,CAAA,IAAyB,uBAAzB,IAA4C,yBAA/C;UACE,MAAM,IAAI,CAAC,CAAC,cAAN,CAAqB,SAArB,EAAgC,CAAA,uDAAA,CAAA,CAAsD,GAAA,CAAI,IAAI,CAAC,GAAT,CAAtD,CAAA,CAAhC,EADR;;QAEA,IAAG,IAAI,CAAC,GAAG,CAAC,GAAZ;UACE,CAAA,CAAE,MAAF,EACE,GADF,CAAA,GACoB,IAAI,CAAC,mBAAL,yCAA2C,IAA3C,CADpB;;iBAEQ,CAAC,SAAW;;UACpB,IAAI,CAAC,GAAG,CAAC,GAAT,GAAoB,IAJtB;SAAA,MAAA;UAME,IAAI,CAAC,GAAG,CAAC,GAAT,GAAoB,KANtB;SAPJ;;QAeI,IAAI,CAAC,QAAL,GAAgB,GAAG,CAAC,GAAG,CAAC,MAAR,CAAe,GAAG,CAAC,GAAG,CAAC,YAAR,CAAqB,IAAC,CAAA,aAAD,CAAe,IAAf,CAArB,CAAf;QAChB,IAAI,CAAC,GAAL,GAAgB,GAAG,CAAC,GAAG,CAAC,MAAR,CAAe,GAAG,CAAC,GAAG,CAAC,YAAR,CAAqB,IAAI,CAAC,GAA1B,CAAf;AAChB,eAAO;MAlBc,CArBzB;;;MA0CkB,OAAf,aAAe,CAAE,IAAF,CAAA,EAAA;;QAEd,IAAC,CAAA,oBAAD,CAAsB,IAAtB;QACA,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,eAApB,CAAoC,IAAI,CAAC,GAAzC,EAFJ;;AAII,eAAO;MALO,CA1ClB;;;MAkDE,sBAAwB,CAAA,CAAA;AAC1B,YAAA;QAAI,WAAA,GAAiB,IAAC,CAAA,GAAG,CAAC,GAAR,GAAiB,IAAC,CAAA,GAAG,CAAC,GAAtB,GAA+B,IAAC,CAAA,GAAG,CAAC;AAClD,eAAO,qBAAA,CAAsB,WAAtB,EAAmC,IAAC,CAAA,QAApC;MAFe,CAlD1B;;;MAuDE,WAAa,CAAE,GAAF,CAAA,EAAA;;YAgCb,CAAA,0BAAA,CAAA,+BA/BF;;QACI,IAAC,CAAA,gBAAD,CAAA;QACA,GAAG,CAAC,GAAG,CAAC,oBAAR,CAA6B,IAA7B,EAAgC,GAAhC,EAAqC,KAArC;QACA,IAAC,CAAA,KAAD,GAAS,IAAC,CAAA,sBAAD,CAAA;QACT,IAAC,CAAA,KAAD,GAAS,IAAC,CAAA,sBAAD,CAAA,EAJb;;;;AAQI,eAAO;MATI;;MAqBb,gBAAkB,CAAA,CAAA;AACpB,YAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA;QAAI,KAAA,GAAQ,IAAC,CAAA;QACT,IAAG,0BAAH;UACE,IAAA,mDAAwC;UACxC,KAAA,sDAAwC;UACxC,IAAC,CAAA,QAAD,GAAY,GAAG,CAAC,WAAJ,CAAgB,IAAhB,EAAsB,KAAtB,EAHd;SAAA,MAAA;UAKE,IAAC,CAAA,QAAD,GAAY,GAAG,CAAC,cAAc,CAAC,IAAnB,CAAwB,GAAxB,EALd;;AAMA,eAAO;MARS;;MAWlB,mBAAqB,CAAE,SAAS,IAAX,CAAA,EAAA;;;;;;;AACvB,YAAA,GAAA,EAAA;QAMI,GAAA,GAAU,IAAC,CAAA,QAAD,CAAU,aAAV,EAAyB,aAAzB;;UACV,SAAU,CAAA,CAAA,CAAA,CAAI,GAAJ,CAAA;;QACV,GAAA,GAAU,CAAA,KAAA,CAAA,CAAQ,MAAR,CAAA,yBAAA;AACV,eAAO,CAAE,GAAF,EAAO,MAAP;MAVY;;IAzFvB;;;IAGE,IAAC,CAAA,CAAD,GAAI,GAAG,CAAC,GAAG,CAAC,MAAR,CACF;MAAA,QAAA,EACE;QAAA,eAAA,EAEE,CAAA;;UAAA,QAAA,EAAc,KAAd;UACA,MAAA,EAAc,IADd;UAEA,OAAA,EAAc,IAFd;;UAIA,SAAA,EAAc,KAJd;UAKA,GAAA,EAAc,IALd;UAMA,IAAA,EAAc,IANd;UAOA,MAAA,EAAc;QAPd;MAFF;IADF,CADE;;;;;;;;;;IA0EJ,IAAC,CAAA,YAAD,GAAe;;;;;AApHjB",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require 'guy'\nE                         = require './errors'\nnew_bsqlt3_connection     = require 'better-sqlite3'\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbay_urlsafe_word', tests:\n  \"@isa.nonempty_text x\":                 ( x ) -> @isa.nonempty_text x\n  \"/^[a-zA-Z0-9_]+$/.test x\":             ( x ) -> /^[a-zA-Z0-9_]+$/.test x\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa_optional.boolean x.ram\":              ( x ) -> @isa_optional.boolean x.ram\n  \"@isa_optional.nonempty_text x.url\":        ( x ) -> @isa_optional.nonempty_text x.url\n  \"@isa_optional.nonempty_text x.path\":       ( x ) -> @isa_optional.nonempty_text x.path\n  \"@isa_optional.dbay_urlsafe_word x.dbnick\": ( x ) -> @isa_optional.dbay_urlsafe_word x.dbnick\n\nclass @Dbay\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: guy.lft.freeze\n    defaults:\n      constructor_cfg:\n        # _temp_prefix: '_dba_temp_'\n        readonly:     false\n        create:       true\n        timeout:      5000\n        #...................................................................................................\n        overwrite:    false\n        ram:          null\n        path:         null\n        dbnick:       null\n\n  #---------------------------------------------------------------------------------------------------------\n  @cast_sqlt_cfg: ( self ) ->\n    R                = guy.obj.pluck_with_fallback self.cfg, null, 'readonly', 'timeout'\n    R.fileMustExist  = not self.cfg.create; delete self.cfg.create\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  @cast_constructor_cfg: ( self ) ->\n    # debug '^344476^', self\n    # debug '^344476^', self.cfg\n    if ( self.cfg.ram is false ) and ( not self.cfg.path? )\n      throw new E.Dbay_cfg_error '^dba@1^', \"missing argument `path`, got #{rpr self.cfg}\"\n    self.cfg.ram ?= not self.cfg.path?\n    if ( not self.cfg.ram ) and self.cfg.path? and self.cfg.dbnick?\n      throw new E.Dbay_cfg_error '^dba@1^', \"only RAM DB can have both `path` and `dbnick`, got #{rpr self.cfg}\"\n    if self.cfg.ram\n      { dbnick\n        url    }        = self._get_connection_url self.cfg.dbnick ? null\n      self.cfg.dbnick  ?= dbnick\n      self.cfg.url      = url\n    else\n      self.cfg.url      = null\n    # self.cfg = guy.obj.nullify_undefined self.cfg\n    self.sqlt_cfg = guy.lft.freeze guy.obj.omit_nullish @cast_sqlt_cfg self\n    self.cfg      = guy.lft.freeze guy.obj.omit_nullish self.cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  @declare_types: ( self ) ->\n    # debug '^133^', self.cfg, Object.isFrozen self.cfg\n    @cast_constructor_cfg self\n    self.types.validate.constructor_cfg self.cfg\n    # guy.props.def self, 'dba', { enumerable: false, value: self.cfg.dba, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_bsqlt3_connection: ->\n    path_or_url = if @cfg.ram then @cfg.url else @cfg.path\n    return new_bsqlt3_connection path_or_url, @sqlt_cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    # super()\n    @_initialize_prng()\n    guy.cfg.configure_with_types @, cfg, types\n    @sqlt1 = @_new_bsqlt3_connection()\n    @sqlt2 = @_new_bsqlt3_connection()\n    # @_compile_sql()\n    # @_create_sql_functions()\n    # @_create_db_structure()\n    return undefined\n\n\n  #=========================================================================================================\n  # RANDOM NUMBER GENERATION\n  # seedable for testing purposes\n  #---------------------------------------------------------------------------------------------------------\n  ### To obtain a class with a seedable PRNG that emits repeatable sequences, define class property\n  `@_rnd_int_cfg: { seed, delta, }` where both seed and delta can be arbitrary finite numbers. **NOTE**\n  very small `delta` values (like 1e-10) may cause adjacent numbers to be close together or even repeat. To\n  use default values for both parameters, set `@_rnd_int_cfg: true`.###\n  @_rnd_int_cfg: null\n  _initialize_prng: ->\n    clasz = @constructor\n    if clasz._rnd_int_cfg?\n      seed      = clasz._rnd_int_cfg.seed   ? 12.34\n      delta     = clasz._rnd_int_cfg.delta  ? 1\n      @_rnd_int = CND.get_rnd_int seed, delta\n    else\n      @_rnd_int = CND.random_integer.bind CND\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_connection_url: ( dbnick = null ) =>\n    ### TAINT rename `dbnick` to `dbnick` ###\n    ### Given an optional `dbnick`, return an object with the `dbnick` and the `url` for a new SQLite\n    connection. The url will look like `'file:your_name_here?mode=memory&cache=shared` so multiple\n    connections to the same RAM DB can be opened. When `dbnick` is not given, a random dbnick like\n    `_icql_6200294332` will be chosen (prefix `_icql_`, suffix ten decimal digits). For testing, setting\n    class property `@_rnd_int_cfg` can be used to obtain repeatable series of random names. ###\n    n10     = @_rnd_int 1_000_000_000, 9_999_999_999\n    dbnick ?= \"_#{n10}\"\n    url     = \"file:#{dbnick}?mode=memory&cache=shared\"\n    return { url, dbnick, }\n\n\n"
  ]
}