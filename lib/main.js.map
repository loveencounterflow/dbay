{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = require './types'\nSQL                       = String.raw\nguy                       = require 'guy'\nnew_bsqlt3_connection     = require 'better-sqlite3'\n#...........................................................................................................\nE                         = require './errors'\nH                         = require './helpers'\n{ Dbay_random           } = require './random-mixin'\n{ Dbay_query            } = require './query-mixin'\n{ Dbay_tx               } = require './tx-mixin'\n\n\n\n\n#===========================================================================================================\nclass @Dbay extends Dbay_query Dbay_tx Dbay_random Function\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: guy.lft.freeze\n    autolocation: H.autolocation\n    symbols:\n      execute: Symbol 'execute'\n    defaults:\n      #.....................................................................................................\n      constructor_cfg:\n        # _temp_prefix: '_dba_temp_'\n        readonly:     false\n        create:       true\n        timeout:      5000\n        #...................................................................................................\n        overwrite:    false\n        path:         null\n      #.....................................................................................................\n      dbay_with_transaction_cfg:\n        mode:         'deferred'\n\n  #---------------------------------------------------------------------------------------------------------\n  @cast_sqlt_cfg: ( me ) ->\n    ### Produce a configuration object for `better-sqlite3` from `me.cfg`. ###\n    R                = guy.obj.pluck_with_fallback me.cfg, null, 'readonly', 'timeout'\n    R.fileMustExist  = not me.cfg.create; delete me.cfg.create\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  @cast_constructor_cfg: ( me ) ->\n    clasz           = me.constructor\n    R               = me.cfg\n    #.......................................................................................................\n    if R.path?\n      R.temporary  ?= false\n      R.path        = PATH.resolve R.path\n    else\n      R.temporary  ?= true\n      filename        = me._get_random_filename()\n      R.path        = PATH.resolve PATH.join clasz.C.autolocation, filename\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  @declare_types: ( me ) ->\n    ### called from constructor via `guy.cfg.configure_with_types()` ###\n    me.cfg        = @cast_constructor_cfg me\n    me.sqlt_cfg   = @cast_sqlt_cfg        me\n    me.cfg        = guy.lft.freeze guy.obj.omit_nullish me.cfg\n    me.sqlt_cfg   = guy.lft.freeze guy.obj.omit_nullish me.sqlt_cfg\n    me.types.validate.constructor_cfg me.cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super '...P', 'return this._me.do(...P)'\n    @_me = @bind @\n    @_$random_initialize?()\n    @_$tx_initialize?()\n    @_$query_initialize?()\n    guy.cfg.configure_with_types @_me, cfg, types\n    # @_me.cfg = freeze @_me.cfg\n    #.......................................................................................................\n    guy.props.def @_me, '_dbs', { enumerable: false, value: {}, }\n    @_me._register_schema 'main', @_me.cfg.path, @_me.cfg.temporary\n    unless @constructor._skip_sqlt\n      guy.props.def @_me, 'sqlt1', { enumerable: false, value: @_me._new_bsqlt3_connection(), }\n      guy.props.def @_me, 'sqlt2', { enumerable: false, value: @_me._new_bsqlt3_connection(), }\n    # @_compile_sql()\n    # @_create_sql_functions()\n    # @_create_db_structure()\n    guy.process.on_exit => @_me.destroy()\n    return @_me\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_bsqlt3_connection: ->\n    return new_bsqlt3_connection @cfg.path, @sqlt_cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  _register_schema: ( schema, path, temporary ) ->\n    ### Register a schema and descriptional properties, especially whether DB file is to be removed on\n    process exit. ###\n    @_dbs[ schema ] = { path, temporary, }\n    return null\n\n  #=========================================================================================================\n  # CLEANUP ON DEMAND, ON PROCESS EXIT\n  #---------------------------------------------------------------------------------------------------------\n  destroy: ->\n    ### To be called on progress exit or explicitly by client code. Removes all DB files marked 'temporary'\n    in `@_dbs`. ###\n    try @sqlt1?.close() catch error then warn '^dbay/main@1^', error.message\n    try @sqlt2?.close() catch error then warn '^dbay/main@2^', error.message\n    for schema, d of @_dbs\n      H.unlink_file d.path if d.temporary\n    return null\n\n\n"
  ]
}