{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/DBA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nHOLLERITH                 = require 'hollerith-codec'\n#...........................................................................................................\ntypes                     = require './types'\n{ freeze\n  lets }                  = require 'letsfreezethat'\nL                         = @\n{ misfit }                = require './common'\nE                         = require './errors'\nnew_bsqlt3_connection     = require 'better-sqlite3'\nPATH                      = require 'path'\nTMP                       = require 'tempy'\n{ Import_export_mixin }   = require './import-export-mixin'\n{ Functions_mixin }       = require './functions-mixin'\n{ Checks_mixin }          = require './checks-mixin'\nguy                       = require 'guy'\nSQL                       = String.raw\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass @Dba extends Checks_mixin Functions_mixin Import_export_mixin()\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    guy.props.def @, 'types',       { enumerable: false, value: types, }\n    guy.props.def @, '_statements', { enumerable: false, value: {}, }\n    guy.props.def @, 'sql',         { enumerable: false, value: ( new ( require './sql' ).Sql() ), }\n    @_schemas     = freeze {}\n    @cfg          = freeze { @types.defaults.dba_constructor_cfg..., cfg..., }\n    @types.validate.dba_constructor_cfg @cfg\n    @_dbg         = { debug: @cfg.debug, echo: @cfg.echo, }\n    @_formats     = freeze { @types.defaults.extensions_and_formats..., }\n    throw new E.Dba_cfg_error '^dba@300^', \"property `sqlt` not supported\"   if @cfg.sqlt?\n    throw new E.Dba_cfg_error '^dba@301^', \"property `schema` not supported\" if @cfg.schema?\n    throw new E.Dba_cfg_error '^dba@302^', \"property `path` not supported\"   if @cfg.path?\n    @_bsqlt3_cfg  = freeze {\n      readonly:       @cfg.readonly\n      fileMustExist:  not @cfg.create\n      timeout:        @cfg.timeout }\n      # verbose:        ### TAINT to be done ###\n    @_state = freeze {\n      in_unsafe_mode:   false\n      initialized:      false }\n    #.......................................................................................................\n    guy.props.def_oneoff @, 'sqlt', {}, =>\n      connection    = new_bsqlt3_connection '', @_bsqlt3_cfg\n      @initialize_sqlt connection\n      @_state = lets @_state, ( d ) -> d.initialized = true\n      return connection\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  initialize_sqlt: ( sqlt ) ->\n    sqlt.pragma \"foreign_keys = true;\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  open: ( cfg ) ->\n    @types.validate.dba_open_cfg ( cfg = { @types.defaults.dba_open_cfg..., cfg..., } )\n    { path, schema, ram, }  = cfg\n    #.......................................................................................................\n    ### TAINT troublesome logic with `path` and `saveas` ###\n    if path?\n      saveas  = path\n    else\n      path    = '' ### TAINT or ':memory:' depending on `cfg.disk` ###\n      saveas  = null\n    #.......................................................................................................\n    if ram then @_open_file_db_in_ram { path, schema, saveas, }\n    else        @_attach              { path, schema, saveas, }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  save: ( cfg ) ->\n    ### TAINT could implement prohibition of `path` in type `dba_save_cfg` ###\n    @types.validate.dba_save_cfg ( cfg = { @types.defaults.dba_export_cfg..., cfg..., } )\n    { schema\n      path }    = cfg\n    throw new E.Dba_argument_not_allowed '^dba@303^', 'path', path if path?\n    path        = @_schemas[ schema ]?.path ? null\n    throw new E.Dba_schema_unknown '^dba@304^', schema unless path?\n    return @export { schema, path, format: 'sqlite', }\n\n  #---------------------------------------------------------------------------------------------------------\n  export: ( cfg ) ->\n    ### TAINT add boolean `cfg.overwrite` ###\n    @types.validate.dba_export_cfg ( cfg = { @types.defaults.dba_export_cfg..., cfg..., } )\n    { schema\n      path\n      format }  = cfg\n    format     ?= @_format_from_path path\n    throw new E.Dba_extension_unknown '^dba@305^', path unless format?\n    switch format\n      when 'sqlite' then @_vacuum_atomically { schema, path, }\n      ### TAINT when format derived from path, may be undefined, making the error message unintelligible ###\n      else throw new E.Dba_format_unknown '^dba@306^', format\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _vacuum_atomically: ( cfg ) ->\n    @types.validate.dba_vacuum_atomically ( cfg = { @types.defaults.dba_vacuum_atomically..., cfg..., } )\n    { schema\n      path }  = cfg\n    schema_i  = @sql.I schema\n    try\n      tmpdir_path   = TMP.directory { prefix: @cfg._temp_prefix, }\n      tmpfile_path  = PATH.join tmpdir_path, PATH.basename path\n      @run \"vacuum #{schema_i} into ?;\", [ tmpfile_path, ]\n      FS.renameSync tmpfile_path, path\n    finally\n      FS.rmdirSync tmpdir_path\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  is_ram_db: ( cfg ) ->\n    @types.validate.dba_is_ram_db_cfg ( cfg = { @types.defaults.dba_is_ram_db_cfg..., cfg..., } )\n    { schema } = cfg\n    sql = \"select file from pragma_database_list where name = ? limit 1;\"\n    try\n      return @types.isa.dba_ram_path @single_value @query sql, [ schema, ]\n    catch error\n      throw new E.Dba_schema_unknown '^dba@307^', schema if error instanceof E.Dba_expected_one_row\n      throw error\n\n  #---------------------------------------------------------------------------------------------------------\n  _list_temp_schema_numbers: ->\n    matcher = @cfg._temp_prefix + '%'\n    sql     = \"\"\"\n      select\n          cast( substring( name, ? ) as integer ) as n\n        from pragma_database_list\n        where name like ?;\"\"\"\n    return @all_first_values @query sql, [ @cfg._temp_prefix.length + 1, matcher, ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _max_temp_schema_number: ->\n    matcher = @cfg._temp_prefix + '%'\n    sql     = \"\"\"\n      select\n          max( cast( substring( name, ? ) as integer ) ) as n\n        from pragma_database_list\n        where name like ?;\"\"\"\n    return ( @first_value @query sql, [ @cfg._temp_prefix.length + 1, matcher, ] ) ? 0\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_free_temp_schema: -> @cfg._temp_prefix + \"#{( @_max_temp_schema_number() + 1 )}\"\n\n\n  #=========================================================================================================\n  # DEBUGGING\n  #---------------------------------------------------------------------------------------------------------\n  _echo: ( ref, sql ) ->\n    return null unless @_dbg.echo\n    echo ( CND.reverse CND.blue \"^icql@888-#{ref}^\" ) + ( CND.reverse CND.yellow sql )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _debug: ( P... ) ->\n    return null unless @_dbg.debug\n    debug P...\n    return null\n\n\n  #=========================================================================================================\n  # QUERY RESULT ADAPTERS\n  #---------------------------------------------------------------------------------------------------------\n  limit: ( n, iterator ) ->\n    count = 0\n    for x from iterator\n      return if count >= n\n      count += +1\n      yield x\n    return\n\n  #---------------------------------------------------------------------------------------------------------\n  single_row:   ( iterator ) ->\n    throw new E.Dba_expected_one_row 'dba@763^', 0 if ( R = @first_row iterator ) is undefined\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  all_first_values: ( iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        R.push value\n        break\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_values: ( iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        yield value\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_row:    ( iterator  ) -> return row for row from iterator\n  ### TAINT must ensure order of keys in row is same as order of fields in query ###\n  single_value: ( iterator  ) -> return value for key, value of @single_row iterator\n  first_value:  ( iterator  ) -> return value for key, value of @first_row iterator\n  list:         ( iterator  ) -> [ iterator..., ]\n\n\n  #=========================================================================================================\n  # QUERYING\n  #---------------------------------------------------------------------------------------------------------\n  query: ( sql, P... ) ->\n    @_echo 'query', sql\n    statement = ( @_statements[ sql ] ?= @sqlt.prepare sql )\n    return statement.iterate P...\n\n  #---------------------------------------------------------------------------------------------------------\n  run: ( sql, P... ) ->\n    @_echo 'run', sql\n    statement = ( @_statements[ sql ] ?= @sqlt.prepare sql )\n    return statement.run P...\n\n  #---------------------------------------------------------------------------------------------------------\n  _run_or_query: ( entry_type, is_last, sql, Q ) ->\n    @_echo '_run_or_query', sql\n    statement     = ( @_statements[ sql ] ?= @sqlt.prepare sql )\n    returns_data  = statement.reader\n    #.......................................................................................................\n    ### Always use `run()` method if statement does not return data: ###\n    unless returns_data\n      return if Q? then ( statement.run Q ) else statement.run()\n    #.......................................................................................................\n    ### If statement does return data, consume iterator unless this is the last statement: ###\n    if ( entry_type is 'procedure' ) or ( not is_last )\n      return if Q? then ( statement.all Q ) else statement.all()\n    #.......................................................................................................\n    ### Return iterator: ###\n    return if Q? then ( statement.iterate Q ) else statement.iterate()\n\n  #---------------------------------------------------------------------------------------------------------\n  execute: ( sql ) ->\n    throw new E.Dba_argument_not_allowed '^dba@308^', \"extra\", rpr x if ( x = arguments[ 1 ] )?\n    @_echo 'execute', sql\n    return @sqlt.exec sql\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare: ( sql  ) ->\n    @_echo 'prepare', sql\n    return @sqlt.prepare sql\n\n\n  #=========================================================================================================\n  # OTHER\n  #---------------------------------------------------------------------------------------------------------\n  backup:         ( P...  ) -> @sqlt.backup           P...\n  checkpoint:     ( P...  ) -> @sqlt.checkpoint       P...\n  close:          ( P...  ) -> @sqlt.close            P...\n  read:           ( path  ) -> @sqlt.exec FS.readFileSync path, { encoding: 'utf-8', }\n  load_extension: ( P...  ) -> @sqlt.loadExtension    P...\n  pragma:         ( P...  ) -> @sqlt.pragma           P...\n\n\n  #=========================================================================================================\n  # DB STRUCTURE REPORTING\n  #---------------------------------------------------------------------------------------------------------\n  catalog: ->\n    ### TAINT kludge: we sort by descending types so views, tables come before indexes (b/c you can't drop a\n    primary key index in SQLite) ###\n    throw new E.Dba_not_implemented '^dba@309^', \"method dba.catalog()\"\n    @query \"select * from sqlite_schema order by type desc, name;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_objects: ( cfg ) ->\n    @types.validate.dba_walk_objects_cfg ( cfg = { @types.defaults.dba_walk_objects_cfg..., cfg..., } )\n    schema      = cfg.schema\n    ordering    = cfg._ordering\n    return @_walk_all_objects() unless schema?\n    schema_i    = @sql.I  schema\n    ordering_x  = if ( ordering is 'drop' ) then 'desc' else 'asc'\n    seq         = @first_value @query \\\n      @sql.SQL\"select seq from pragma_database_list where name = #{@sql.L schema};\"\n    #.......................................................................................................\n    return @query @sql.SQL\"\"\"\n      select\n          #{seq}            as seq,\n          #{@sql.L schema}  as schema,\n          name              as name,\n          type              as type,\n          sql               as sql\n        from #{@sql.I schema}.sqlite_schema\n        order by seq, type #{ordering_x}, name;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_all_objects: ->\n    schemas   = {}\n    parts     = []\n    #.......................................................................................................\n    ### TAINT use API ###\n    for row from @query SQL\"select seq, name, file as path from pragma_database_list order by seq;\"\n      schemas[ row.name ] = row\n    #.......................................................................................................\n    for schema, d of schemas\n      schema_i    = @sql.I  schema\n      schema_l    = @sql.L  schema\n      parts.push SQL\"\"\"select\n          #{d.seq} as seq,\n          #{schema_l} as schema,\n          name  as name,\n          type  as type,\n          sql   as sql\n        from #{schema_i}.sqlite_schema as d1\"\"\"\n    parts     = parts.join \" union all\\n\"\n    #.......................................................................................................\n    sql       = ''\n    sql      += parts\n    sql      += \"\\norder by seq, type, name;\"\n    return @query sql\n\n  #---------------------------------------------------------------------------------------------------------\n  is_empty: ( cfg ) ->\n    @types.validate.dba_is_empty_cfg ( cfg = { @types.defaults.dba_is_empty_cfg..., cfg..., } )\n    return ( has_schema = @_is_empty_schema @sql.I cfg.schema ) unless name?\n    throw new E.Dba_not_implemented '^dba@310^', \"dba.is_empty() for anything but schemas (got #{rpr cfg})\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _is_empty_schema: ( schema_i ) -> (\n    @list @query \"select 1 from #{schema_i}.sqlite_schema limit 1;\" ).length is 0\n\n  #---------------------------------------------------------------------------------------------------------\n  list_schemas:       -> @list @query \"select * from pragma_database_list order by name;\"\n  list_schema_names:  -> ( d.name for d in @list_schemas() )\n\n  #---------------------------------------------------------------------------------------------------------\n  has: ( cfg ) ->\n    @types.validate.dba_has_cfg ( cfg = { @types.defaults.dba_has_cfg..., cfg..., } )\n    return cfg.schema in @list_schema_names()\n\n  #---------------------------------------------------------------------------------------------------------\n  get_schemas: ->\n    R             = {}\n    R[ row.name ] = row.file for row from @query \"select * from pragma_database_list order by seq;\"\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _path_of_schema: ( schema, fallback = misfit ) ->\n    R = @first_value @query \"select file from pragma_database_list where name = ?;\", [ schema, ]\n    return R if R?\n    return fallback unless fallback is misfit\n    throw new E.Dba_schema_unknown '^dba@311^', schema\n\n  #---------------------------------------------------------------------------------------------------------\n  type_of: ( cfg ) ->\n    @types.validate.dba_type_of_cfg ( cfg = { @types.defaults.dba_type_of_cfg..., cfg..., } )\n    { name, schema, } = cfg\n    if name in [ 'sqlite_schema', 'sqlite_master', ]\n      return 'table'\n    row = @first_row @query SQL\"\"\"\n      select type from #{@sql.I schema}.sqlite_schema\n      where name = $name\n      limit 1;\"\"\", { name, }\n    throw new E.Dba_object_unknown '^dba@311^', schema, name unless row?\n    return row.type\n\n  #---------------------------------------------------------------------------------------------------------\n  fields_of: ( cfg ) ->\n    @types.validate.dba_fields_of_cfg ( cfg = { @types.defaults.dba_fields_of_cfg..., cfg..., } )\n    { name, schema, } = cfg\n    schema_i          = @sql.I schema\n    R                 = {}\n    for d from @query SQL\"select * from #{schema_i}.pragma_table_info( $name );\", { name, }\n      # { cid: 0, name: 'id', type: 'integer', notnull: 1, dflt_value: null, pk: 1 }\n      type = if d.type is '' then null else d.type\n      R[ d.name ] = {\n        idx:      d.cid\n        type:     type\n        optional: !d.notnull\n        default:  d.dflt_value\n        is_pk:    !!d.pk }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  field_names_of: ( cfg ) ->\n    # try\n    @types.validate.dba_field_names_of_cfg ( cfg = { @types.defaults.dba_field_names_of_cfg..., cfg..., } )\n    { name, schema, } = cfg\n    schema_i          = @sql.I schema\n    return ( d.name for d from @query SQL\"select name from #{schema_i}.pragma_table_info( $name );\", { name, } )\n    # catch error\n    #   throw new E.Dba_sqlite_error '^dba@111^', error\n\n  #---------------------------------------------------------------------------------------------------------\n  dump_relation: ( cfg ) ->\n    @types.validate.dba_dump_relation_cfg ( cfg = { @types.defaults.dba_dump_relation_cfg..., cfg..., } )\n    { schema\n      name\n      order_by\n      limit         } = cfg\n    schema_i          = @sql.I schema\n    qname_i         = schema_i + '.' + @sql.I name\n    limit           = if cfg.limit is null then 1e9 else cfg.limit\n    order_by       ?= 'random()'\n    return @query SQL\"select * from #{qname_i} order by #{order_by} limit #{limit};\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _dependencies_of: ( table, schema = 'main' ) ->\n    return @query \"pragma #{@sql.I schema}.foreign_key_list( #{@sql.I table} )\"\n\n  #---------------------------------------------------------------------------------------------------------\n  dependencies_of:  ( table, schema = 'main' ) ->\n    @types.validate.ic_schema schema\n    return ( row.table for row from @_dependencies_of table )\n\n\n  #=========================================================================================================\n  # DB STRUCTURE MODIFICATION\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT Error: index associated with UNIQUE or PRIMARY KEY constraint cannot be dropped ###\n  clear: ( cfg ) ->\n    @types.validate.dba_clear_cfg ( cfg = { @types.defaults.dba_clear_cfg..., cfg..., } )\n    { schema, }   = cfg\n    schema_i      = @sql.I schema\n    R             = 0\n    fk_state      = @_get_foreign_keys_state()\n    @_set_foreign_keys_state off\n    for { type, name, } in @list @walk_objects { schema, _ordering: 'drop', }\n      statement = \"drop #{type} if exists #{@sql.I name};\"\n      @execute statement\n      R += +1\n    @_set_foreign_keys_state fk_state\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _open_file_db_in_ram: ( cfg ) ->\n    ### Given a `path` and a `schema`, create a temporary schema to open the file DB in as well as an empty\n    in-memory schema; then copy all DB objects and their contents from the temporary file schema to the RAM\n    schema. Finally, detach the file schema. Ensure the `path` given is kept around as the `saveas`\n    (implicit) path to be used for eventual persistency (`dba.save()`). ###\n    ### TAINT validate? ###\n    schema_main_allowed = not @_state.initialized\n    { path, schema, saveas, } = cfg\n    return @_attach { schema, path, saveas, } if @types.isa.dba_ram_path path\n    #.......................................................................................................\n    tmp_schema = @_get_free_temp_schema()\n    @_attach { schema: tmp_schema, path, }\n    unless ( schema is 'main' ) and schema_main_allowed\n      @_attach { schema, path: '', saveas, }\n    @_copy_schema { from_schema: tmp_schema, to_schema: schema, }\n    @_detach { schema: tmp_schema, }\n    #.......................................................................................................\n    @_schemas = lets @_schemas, ( d ) => d[ schema ] = { path: saveas, } ### TAINT use API call ###\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _attach: ( cfg ) ->\n    ### Given a `path` and a `schema`, execute SQL\"attach $path as $schema\".\n\n    `_attach()` will fail\n      * if `schema` already exists, or\n      * if the maximum number of schemas (10 by default) has already been attached, or\n      * if the schema name is `main` and the DBA is `@_state.initialized`.\n\n    If `@_state.initialized` is `false`, then a new `better-sqlite3` instance with a `main` schema will be\n    created;\n      * if the `schema` passed in is `main`, it will be opened from the `path` given.\n      * If `schema` is not `main`, `main` will be opened as an empty RAM DB, and `schema` will be attached\n        from the file given.\n    ###\n    @types.validate.dba_attach_cfg ( cfg = { @types.defaults.dba_attach_cfg..., cfg..., } )\n    { path, schema, saveas, }   = cfg\n    #.......................................................................................................\n    unless @_state.initialized\n      if schema is 'main'\n        connection = new_bsqlt3_connection path, @_bsqlt3_cfg\n        @initialize_sqlt connection\n        guy.props.def @, 'sqlt', enumerable: false, configurable: false, value: connection\n        @_schemas = lets @_schemas, ( d ) => d[ schema ] = { path: saveas, } ### TAINT use API call ###\n        return null\n      ignore = @sqlt ### NOTE retrieve dynamic attribute for side effect, ignore its value ###\n    #.......................................................................................................\n    if @has { schema, }\n      throw new E.Dba_schema_exists '^dba@312^', schema\n    #.......................................................................................................\n    try\n      @run \"attach ? as ?;\", [ path, schema, ]\n    catch error\n      throw error unless error.code is 'SQLITE_ERROR'\n      throw new E.Dba_sqlite_too_many_dbs '^dba@313^', schema if error.message.startsWith 'too many attached databases'\n      throw new E.Dba_sqlite_error        '^dba@314^', error\n    @_schemas = lets @_schemas, ( d ) => d[ schema ] = { path: saveas, } ### TAINT use API call ###\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _detach: ( cfg ) ->\n    @types.validate.dba_detach_cfg ( cfg = { @types.defaults.dba_detach_cfg..., cfg..., } )\n    @execute @sql.SQL\"detach #{@sql.I cfg.schema};\"\n    @_schemas     = lets @_schemas, ( d ) => delete d[ cfg.schema ]\n    return null\n\n\n  #=========================================================================================================\n  # IN-MEMORY PROCESSING\n  #-----------------------------------------------------------------------------------------------------------\n  _move_schema: ( cfg ) -> @_copy_or_move_schema cfg, true\n  _copy_schema: ( cfg ) -> @_copy_or_move_schema cfg, false\n\n  #-----------------------------------------------------------------------------------------------------------\n  _copy_or_move_schema: ( cfg, detach_schema = false ) ->\n    detach_from_schema = ->\n      return null unless detach_schema\n      return @_detach { schema: from_schema, }\n    #.......................................................................................................\n    @types.validate.copy_or_move_schema_cfg ( cfg = { @types.defaults.copy_or_move_schema_cfg..., cfg..., } )\n    { from_schema, to_schema, } = cfg\n    #.......................................................................................................\n    if from_schema is to_schema\n      throw new E.Dba_schema_repeated '^dba@315^', from_schema\n    #.......................................................................................................\n    known_schemas     = @list_schema_names()\n    throw new E.Dba_schema_unknown '^dba@316^', from_schema unless from_schema in known_schemas\n    throw new E.Dba_schema_unknown '^dba@317^', to_schema   unless to_schema   in known_schemas\n    #.......................................................................................................\n    to_schema_objects = @list @walk_objects { schema: to_schema, }\n    if to_schema_objects.length > 0\n      throw new E.Dba_schema_nonempty '^dba@318^', to_schema\n    #.......................................................................................................\n    from_schema_objects = @list @walk_objects { schema: from_schema }\n    return detach_from_schema() if from_schema_objects.length is 0\n    #.......................................................................................................\n    to_schema_x   = @sql.I to_schema\n    from_schema_x = @sql.I from_schema\n    inserts       = []\n    fk_state      = @_get_foreign_keys_state()\n    @_set_foreign_keys_state off\n    #.......................................................................................................\n    for d in from_schema_objects\n      continue if ( not d.sql? ) or ( d.sql is '' )\n      continue if d.name in [ 'sqlite_sequence', ]\n      #.....................................................................................................\n      ### TAINT consider to use `validate.ic_db_object_type` ###\n      unless d.type in [ 'table', 'view', 'index', ]\n        throw new E.Dba_unexpected_db_object_type '^dba@319^', d.type, d\n      #.....................................................................................................\n      ### TAINT using not-so reliable string replacement as substitute for proper parsing ###\n      name_x  = @sql.I d.name\n      sql     = d.sql.replace /\\s*CREATE\\s*(TABLE|INDEX|VIEW)\\s*/i, \"create #{d.type} #{to_schema_x}.\"\n      #.....................................................................................................\n      if sql is d.sql\n        throw new E.Dba_unexpected_sql '^dba@320^', d.sql\n      #.....................................................................................................\n      @execute sql\n      if d.type is 'table'\n        inserts.push \"insert into #{to_schema_x}.#{name_x} select * from #{from_schema_x}.#{name_x};\"\n    #.......................................................................................................\n    @execute sql for sql in inserts\n    @_set_foreign_keys_state fk_state\n    @pragma \"#{@sql.I to_schema}.foreign_key_check;\" if fk_state\n    return detach_from_schema()\n\n\n\n\n\n  #=========================================================================================================\n  # SORTABLE LISTS\n  #---------------------------------------------------------------------------------------------------------\n  as_hollerith:   ( x ) -> HOLLERITH.encode x\n  from_hollerith: ( x ) -> HOLLERITH.decode x\n\n\n"
  ]
}