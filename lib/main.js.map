{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/DBA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nHOLLERITH                 = require 'hollerith-codec'\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  validate_optional\n  declare\n  size_of\n  type_of }               = @types\n{ freeze\n  lets }                  = require 'letsfreezethat'\nMultimix                  = require 'multimix'\nL                         = @\nL._misfit                 = Symbol 'misfit'\nnew_bsqlt3_connection     = require 'better-sqlite3'\nPATH                      = require 'path'\n\n#-----------------------------------------------------------------------------------------------------------\nL.pick = ( d, key, fallback, type = null ) ->\n  R = d?[ key ] ? fallback\n  validate[ type ] R if type?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nL._get_extension = ( path ) ->\n  return null if ( R = PATH.extname path ) is ''\n  return R[ 1 .. ]\n\n#-----------------------------------------------------------------------------------------------------------\nL._get_format = ( path, format = null ) ->\n  return format if format?\n  return @._get_extension path\n\n\n#-----------------------------------------------------------------------------------------------------------\nclass @Dba_error extends Error\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass @Dba extends Multimix\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    @_statements  = {}\n    @_schemas     = freeze {}\n    @cfg          = freeze { L.types.defaults.dba_constructor_cfg..., cfg..., }\n    validate.dba_constructor_cfg @cfg\n    @_dbg         = { debug: @cfg.debug, echo: @cfg.echo, }\n    # debug '^345^', @cfg\n    throw new L.Dba_error \"^dba@333^ property `sqlt` not supported (yet)\"   if @cfg.sqlt?\n    throw new L.Dba_error \"^dba@334^ property `schema` not supported (yet)\" if @cfg.schema?\n    throw new L.Dba_error \"^dba@335^ property `path` not supported (yet)\"   if @cfg.path?\n    bsqlt3_cfg    =\n      readonly:       @cfg.readonly\n      fileMustExist:  not @cfg.create\n      timeout:        @cfg.timeout\n      # verbose:        ### TAINT to be done ###\n    #.......................................................................................................\n    @sqlt = new_bsqlt3_connection '', bsqlt3_cfg\n    return undefined ### always return `undefined` from constructor ###\n\n  #---------------------------------------------------------------------------------------------------------\n  open: ( cfg ) ->\n    validate.dba_open_cfg ( cfg = { L.types.defaults.dba_open_cfg..., cfg..., } )\n    { path, schema, ram, }  = cfg\n    throw new L.Dba_error \"^dba@336^ cannot open schema #{rpr schema} (yet)\"  if schema in [ 'main', 'temp', ]\n    throw new L.Dba_error \"^dba@337^ schema #{rpr schema} already exists\"     if @has { schema, }\n    #.......................................................................................................\n    ### TAINT troublesome logic with `path` and `saveas` ###\n    if path?\n      saveas  = path\n    else\n      path    = '' ### TAINT or ':memory:' depending on `cfg.disk` ###\n      saveas  = null\n    #.......................................................................................................\n    if ram then @_open_file_db_in_ram { path, schema, saveas, }\n    else        @_attach              { path, schema, saveas, }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _open_file_db_in_ram: ( cfg ) ->\n    ### Given a `path` and a `schema`, create a temporary schema to open the file DB in as well as an empty\n    in-memory schema; then copy all DB objects and their contents from the temporary file schema to the RAM\n    schema. Finally, detach the file schema. Ensure the `path` given is kept around as the `saveas`\n    (implicit) path to be used for eventual persistency (`dba.save()`). ###\n    ### TAINT validate? ###\n    { path, schema, saveas, } = cfg\n    #.......................................................................................................\n    if L.types.isa.dba_ram_path path\n      @_attach { schema, path, saveas, }\n      return null\n    #.......................................................................................................\n    tmp_schema = @_get_free_temp_schema()\n    @_attach { schema: tmp_schema, path, }\n    @_attach { schema, path: '', saveas, }\n    @_copy_schema { from_schema: tmp_schema, to_schema: schema, }\n    @_detach { schema: tmp_schema, }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  is_ram_db: ( cfg ) ->\n    validate.dba_is_ram_db_cfg ( cfg = { L.types.defaults.dba_is_ram_db_cfg..., cfg..., } )\n    { schema } = cfg\n    sql = \"select file from pragma_database_list where name = ? limit 1;\"\n    try\n      return L.types.isa.dba_ram_path @single_value @query sql, [ schema, ]\n    catch error\n      if /expected at least one row, got none/.test error.message\n        throw new L.Dba_error \"^dba@000^ unknown schema #{rpr schema}\"\n      throw error\n\n  #---------------------------------------------------------------------------------------------------------\n  _list_temp_schema_numbers: ->\n    matcher = @cfg._temp_prefix + '%'\n    sql     = \"\"\"\n      select\n          cast( substring( name, ? ) as integer ) as n\n        from pragma_database_list\n        where name like ?;\"\"\"\n    return @all_first_values @query sql, [ @cfg._temp_prefix.length + 1, matcher, ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _max_temp_schema_number: ->\n    matcher = @cfg._temp_prefix + '%'\n    sql     = \"\"\"\n      select\n          max( cast( substring( name, ? ) as integer ) ) as n\n        from pragma_database_list\n        where name like ?;\"\"\"\n    return ( @first_value @query sql, [ @cfg._temp_prefix.length + 1, matcher, ] ) ? 0\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_free_temp_schema: -> @cfg._temp_prefix + \"#{( @_max_temp_schema_number() + 1 )}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  import: ( cfg ) ->\n    cfg         = { L.types.defaults.dba_import_cfg..., cfg..., }\n    cfg.format ?= L._get_format cfg.path, cfg.format\n    validate.dba_import_cfg cfg\n    switch cfg.format\n      when 'db'   then @_import_db  cfg\n      when 'sql'  then @_import_sql cfg\n      else\n        throw new L.Dba_error \"^dba@341^ unknown format #{rpr cfg.format}\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _import_db: ( cfg ) ->\n    tmp_schema = @_get_free_temp_schema()\n    @_attach { schema: tmp_schema, path: cfg.path, }\n    debug '^469465^', @list_schemas()\n    @_attach { schema: cfg.schema, path: '', }\n    debug '^469465^', @list_schemas()\n    @copy_schema { from_schema: tmp_schema, to_schema: cfg.schema, }\n    @_detach { schema: tmp_schema, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _import_sql: ( cfg ) ->\n    throw new L.Dba_error \"µ763 import format sql not yet implemented\"\n    switch cfg.method\n      when 'single' then return @_import_sql_single cfg\n      when 'batch'  then return @_import_sql_batch  cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _import_sql_single: ( cfg ) ->\n    @execute FS.readFileSync cfg.path, { encoding: 'utf-8', }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _import_sql_batch: ( cfg ) ->\n    for statements from @_walk_batches ( @_walk_statements_from_path cfg.path ), cfg.batch_size\n      compound_statement  = statements.join ''\n      count              += compound_statement.length\n      @execute compound_statement\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_statements_from_path: ( sql_path ) ->\n    ### Given a path, iterate over SQL statements which are signalled by semicolons (`;`) that appear outside\n    of literals and comments (and the end of input). ###\n    ### thx to https://stackabuse.com/reading-a-file-line-by-line-in-node-js/ ###\n    ### thx to https://github.com/nacholibre/node-readlines ###\n    readlines       = new ( require 'n-readlines' ) sql_path\n    #.......................................................................................................\n    cfg           =\n      regExp: ( require 'mysql-tokenizer/lib/regexp-sql92' )\n    tokenize      = ( require 'mysql-tokenizer' ) cfg\n    collector     = null\n    stream        = FS.createReadStream sql_path\n    #.......................................................................................................\n    flush = ->\n      R         = collector.join ''\n      collector = null\n      return R\n    #.......................................................................................................\n    while ( line = readlines.next() ) isnt false\n      for token, cur_idx in tokenize line + '\\n'\n        if token is ';'\n          ( collector ?= [] ).push token\n          yield flush()\n          continue\n        # if token.startsWith '--'\n        #   continue\n        ( collector ?= [] ).push token\n    #.......................................................................................................\n    yield flush() if collector?\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_batches: ( iterator, batch_size = 1 ) ->\n    ### Given an iterator and a batch size, iterate over lists of values yielded by the iterator. ###\n    batch = null\n    for d from iterator\n      ( batch ?= [] ).push d\n      if batch.length >= batch_size\n        yield batch\n        batch = null\n    yield batch if batch?\n    return null\n\n\n  #=========================================================================================================\n  # DEBUGGING\n  #---------------------------------------------------------------------------------------------------------\n  _echo: ( ref, sql ) ->\n    return null unless @_dbg.echo\n    echo ( CND.reverse CND.blue \"^icql@888-#{ref}^\" ) + ( CND.reverse CND.yellow sql )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _debug: ( P... ) ->\n    return null unless @_dbg.debug\n    debug P...\n    return null\n\n\n  #=========================================================================================================\n  # QUERY RESULT ADAPTERS\n  #---------------------------------------------------------------------------------------------------------\n  limit: ( n, iterator ) ->\n    count = 0\n    for x from iterator\n      return if count >= n\n      count += +1\n      yield x\n    return\n\n  #---------------------------------------------------------------------------------------------------------\n  single_row:   ( iterator ) ->\n    throw new L.Dba_error \"µ763 expected at least one row, got none\" if ( R = @first_row iterator ) is undefined\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  all_first_values: ( iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        R.push value\n        break\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_values: ( iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        yield value\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_row:    ( iterator  ) -> return row for row from iterator\n  ### TAINT must ensure order of keys in row is same as order of fields in query ###\n  single_value: ( iterator  ) -> return value for key, value of @single_row iterator\n  first_value:  ( iterator  ) -> return value for key, value of @first_row iterator\n  list:         ( iterator  ) -> [ iterator..., ]\n\n\n  #=========================================================================================================\n  # QUERYING\n  #---------------------------------------------------------------------------------------------------------\n  query: ( sql, P... ) ->\n    @_echo 'query', sql\n    statement = ( @_statements[ sql ] ?= @sqlt.prepare sql )\n    return statement.iterate P...\n\n  #---------------------------------------------------------------------------------------------------------\n  run: ( sql, P... ) ->\n    @_echo 'run', sql\n    statement = ( @_statements[ sql ] ?= @sqlt.prepare sql )\n    return statement.run P...\n\n  #---------------------------------------------------------------------------------------------------------\n  _run_or_query: ( entry_type, is_last, sql, Q ) ->\n    @_echo '_run_or_query', sql\n    statement     = ( @_statements[ sql ] ?= @sqlt.prepare sql )\n    returns_data  = statement.reader\n    #.......................................................................................................\n    ### Always use `run()` method if statement does not return data: ###\n    unless returns_data\n      return if Q? then ( statement.run Q ) else statement.run()\n    #.......................................................................................................\n    ### If statement does return data, consume iterator unless this is the last statement: ###\n    if ( entry_type is 'procedure' ) or ( not is_last )\n      return if Q? then ( statement.all Q ) else statement.all()\n    #.......................................................................................................\n    ### Return iterator: ###\n    return if Q? then ( statement.iterate Q ) else statement.iterate()\n\n  #---------------------------------------------------------------------------------------------------------\n  execute: ( sql  ) ->\n    @_echo 'execute', sql\n    return @sqlt.exec sql\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare: ( sql  ) ->\n    @_echo 'prepare', sql\n    return @sqlt.prepare sql\n\n\n  #=========================================================================================================\n  # OTHER\n  #---------------------------------------------------------------------------------------------------------\n  aggregate:      ( P...  ) -> @sqlt.aggregate        P...\n  backup:         ( P...  ) -> @sqlt.backup           P...\n  checkpoint:     ( P...  ) -> @sqlt.checkpoint       P...\n  close:          ( P...  ) -> @sqlt.close            P...\n  read:           ( path  ) -> @sqlt.exec FS.readFileSync path, { encoding: 'utf-8', }\n  function:       ( P...  ) -> @sqlt.function         P...\n  load_extension: ( P...  ) -> @sqlt.loadExtension    P...\n  pragma:         ( P...  ) -> @sqlt.pragma           P...\n  transaction:    ( P...  ) -> @sqlt.transaction      P...\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_foreign_key_state: -> not not ( @pragma \"foreign_keys;\" )[ 0 ].foreign_keys\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_foreign_key_state: ( onoff ) ->\n    validate.boolean onoff\n    @pragma \"foreign_keys = #{onoff};\"\n    return null\n\n\n  #=========================================================================================================\n  # DB STRUCTURE REPORTING\n  #---------------------------------------------------------------------------------------------------------\n  catalog: ->\n    ### TAINT kludge: we sort by descending types so views, tables come before indexes (b/c you can't drop a\n    primary key index in SQLite) ###\n    throw new L.Dba_error \"µ764 deprecated until next major version\"\n    @query \"select * from sqlite_schema order by type desc, name;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_objects: ( cfg ) ->\n    schema      = L.pick cfg, 'schema',     null\n    ordering    = L.pick cfg, '_ordering',  null\n    return @_walk_all_objects() unless schema?\n    validate_optional.ic_schema schema\n    validate_optional.dba_list_objects_ordering ordering\n    schema_i    = @as_identifier  schema\n    schema_s    = @as_sql         schema\n    ordering_x  = if ( ordering is 'drop' ) then 'desc' else 'asc'\n    seq         = @first_value @query \"select seq from pragma_database_list where name = #{schema_s};\"\n    #.......................................................................................................\n    return @query \"\"\"\n      select\n          #{seq}    as seq,\n          #{schema_s} as schema,\n          name      as name,\n          type      as type,\n          sql       as sql\n        from #{schema_i}.sqlite_schema\n        order by seq, type #{ordering_x}, name;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_all_objects: ->\n    schemas   = {}\n    parts     = []\n    #.......................................................................................................\n    ### TAINT use API ###\n    for row from @query \"select seq, name, file as path from pragma_database_list order by seq;\"\n      schemas[ row.name ] = row\n    #.......................................................................................................\n    for schema, d of schemas\n      schema_i    = @as_identifier  schema\n      schema_s  = @as_sql         schema\n      parts.push \"\"\"select\n          #{d.seq} as seq,\n          #{schema_s} as schema,\n          name  as name,\n          type  as type,\n          sql   as sql\n        from #{schema_i}.sqlite_schema as d1\"\"\"\n    parts     = parts.join \" union all\\n\"\n    #.......................................................................................................\n    sql       = ''\n    sql      += parts\n    sql      += \"\\norder by seq, type, name;\"\n    return @query sql\n\n  #---------------------------------------------------------------------------------------------------------\n  is_empty: ( cfg ) ->\n    schema      = L.pick cfg, 'schema', 'main', 'ic_schema'\n    name        = L.pick cfg, 'name', null\n    validate_optional.ic_name name\n    return ( has_schema = @_is_empty_schema @as_identifier schema ) unless name?\n    throw new L.Dba_error \"^dba@342^ not implemented: is_empty() for anything but schemas, got #{rpr cfg}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _is_empty_schema: ( schema_i ) -> (\n    @list @query \"select 1 from #{schema_i}.sqlite_schema limit 1;\" ).length is 0\n\n  #---------------------------------------------------------------------------------------------------------\n  list_schemas:       -> @list @query \"select * from pragma_database_list order by name;\"\n  list_schema_names:  -> ( d.name for d in @list_schemas() )\n\n  #---------------------------------------------------------------------------------------------------------\n  has: ( cfg ) ->\n    schema = L.pick cfg, 'schema', null, 'ic_schema'\n    return schema in @list_schema_names()\n\n  #---------------------------------------------------------------------------------------------------------\n  get_schemas: ->\n    R             = {}\n    R[ row.name ] = row.file for row from @query \"select * from pragma_database_list order by seq;\"\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _path_of_schema: ( schema, fallback = L._misfit ) ->\n    R = @first_value @query \"select file from pragma_database_list where name = ?;\", [ schema, ]\n    return R if R?\n    return fallback unless fallback is L._misfit\n    throw new L.Dba_error \"^dba@343^ unknown schema #{rpr schema}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  type_of: ( name, schema = 'main' ) ->\n    for row from @catalog()\n      return row.type if row.name is name\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  column_types: ( table ) ->\n    R = {}\n    ### TAINT we apparently have to call the pragma in this roundabout fashion since SQLite refuses to\n    accept placeholders in that statement: ###\n    for row from @query @interpolate \"pragma table_info( $table );\", { table, }\n      R[ row.name ] = row.type\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _dependencies_of: ( table, schema = 'main' ) ->\n    return @query \"pragma #{@as_identifier schema}.foreign_key_list( #{@as_identifier table} )\"\n\n  #---------------------------------------------------------------------------------------------------------\n  dependencies_of:  ( table, schema = 'main' ) ->\n    validate.ic_schema schema\n    return ( row.table for row from @_dependencies_of table )\n\n\n  #=========================================================================================================\n  # DB STRUCTURE MODIFICATION\n  #---------------------------------------------------------------------------------------------------------\n  # ### TAINT Error: index associated with UNIQUE or PRIMARY KEY constraint cannot be dropped ###\n  # clear: ( cfg ) ->\n  #   validate.ic_schema schema\n  #   schema_i      = @as_identifier schema\n  #   R             = 0\n  #   fk_state      = @_get_foreign_key_state()\n  #   @_set_foreign_key_state off\n  #   for { type, name, } in @list @walk_objects { schema, _ordering: 'drop', }\n  #     statement = \"drop #{type} if exists #{@as_identifier name};\"\n  #     @execute statement\n  #     R += +1\n  #   @_set_foreign_key_state fk_state\n  #   return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _attach: ( cfg ) ->\n    validate.dba_attach_cfg ( cfg = { L.types.defaults.dba_attach_cfg..., cfg..., } )\n    { path, schema, saveas, }   = cfg\n    #.......................................................................................................\n    if @has { schema, }\n      throw new L.Dba_error \"^dba@344^ schema #{rpr schema} already attached\"\n    #.......................................................................................................\n    try\n      @run \"attach ? as ?;\", [ path, schema, ]\n    catch error\n      throw error unless error.code is 'SQLITE_ERROR'\n      throw error unless error.message.startsWith 'too many attached databases'\n      throw new L.Dba_error \"^dba@344^ #{error.message}\"\n    @_schemas = lets @_schemas, ( d ) => d[ schema ] = { path: saveas, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _detach: ( cfg ) ->\n    schema        = L.pick cfg, 'schema', null, 'ic_schema'\n    schema_i      = @as_identifier  schema\n    @execute \"detach #{schema_i};\"\n    @_schemas     = lets @_schemas, ( d ) => delete d[ schema ]\n    return null\n\n\n  #=========================================================================================================\n  # IN-MEMORY PROCESSING\n  #-----------------------------------------------------------------------------------------------------------\n  _move_schema: ( cfg ) -> @_copy_or_move_schema cfg, true\n  _copy_schema: ( cfg ) -> @_copy_or_move_schema cfg, false\n\n  #-----------------------------------------------------------------------------------------------------------\n  _copy_or_move_schema: ( cfg, detach_schema = false ) ->\n    detach_from_schema = ->\n      return null unless detach_schema\n      return @_detach { schema: from_schema, }\n    #.......................................................................................................\n    validate.copy_or_move_schema_cfg ( cfg = { L.types.defaults.copy_or_move_schema_cfg..., cfg..., } )\n    { from_schema, to_schema, } = cfg\n    #.......................................................................................................\n    if from_schema is to_schema\n      throw new L.Dba_error \"µ767 unable to copy schema to itself, got #{rpr cfg} (schema #{rpr from_schema})\"\n    #.......................................................................................................\n    known_schemas     = @list_schema_names()\n    throw new L.Dba_error \"µ765 unknown schema #{rpr from_schema}\" unless from_schema in known_schemas\n    throw new L.Dba_error \"µ766 unknown schema #{rpr to_schema}\"   unless to_schema   in known_schemas\n    #.......................................................................................................\n    to_schema_objects = @list @walk_objects { schema: to_schema, }\n    if to_schema_objects.length > 0\n      throw new L.Dba_error \"µ768 unable to copy to non-empty schema #{rpr to_schema}\"\n    #.......................................................................................................\n    from_schema_objects = @list @walk_objects { schema: from_schema }\n    return detach_from_schema() if from_schema_objects.length is 0\n    #.......................................................................................................\n    to_schema_x   = @as_identifier to_schema\n    from_schema_x = @as_identifier from_schema\n    inserts       = []\n    fk_state      = @_get_foreign_key_state()\n    @_set_foreign_key_state off\n    #.......................................................................................................\n    for d in from_schema_objects\n      continue if ( not d.sql? ) or ( d.sql is '' )\n      continue if d.name in [ 'sqlite_sequence', ]\n      #.....................................................................................................\n      ### TAINT consider to use `validate.ic_db_object_type` ###\n      unless d.type in [ 'table', 'view', 'index', ]\n        throw new L.Dba_error \"µ769 unknown type #{rpr d.type} for DB object #{rpr d}\"\n      #.....................................................................................................\n      ### TAINT using not-so reliable string replacement as substitute for proper parsing ###\n      name_x  = @as_identifier d.name\n      sql     = d.sql.replace /\\s*CREATE\\s*(TABLE|INDEX|VIEW)\\s*/i, \"create #{d.type} #{to_schema_x}.\"\n      #.....................................................................................................\n      if sql is d.sql\n        throw new L.Dba_error \"µ770 unexpected SQL string #{rpr d.sql}\"\n      #.....................................................................................................\n      @execute sql\n      if d.type is 'table'\n        inserts.push \"insert into #{to_schema_x}.#{name_x} select * from #{from_schema_x}.#{name_x};\"\n    #.......................................................................................................\n    @execute sql for sql in inserts\n    @_set_foreign_key_state fk_state\n    @pragma \"#{@as_identifier to_schema}.foreign_key_check;\" if fk_state\n    return detach_from_schema()\n\n  # #---------------------------------------------------------------------------------------------------------\n  # export: ( cfg ) ->\n  #   ### TAINT add boolean `cfg.overwrite` ###\n  #   format    = @_format_from_path path\n  #   format   ?= L.pick cfg, 'format',     format, 'ic_db_file_format'\n  #   schema_i  = @as_identifier schema\n  #   switch format\n  #     when 'sqlitedb'\n  #       db.$.run \"vacuum #{schema_i} into ?;\", [ path, ]\n  #     else throw new L.Dba_error \"µ47492 unknown format #{rpr format}\"\n  #   return null\n\n\n  #=========================================================================================================\n  # SQL CONSTRUCTION\n  #---------------------------------------------------------------------------------------------------------\n  as_identifier:  ( x  ) ->\n    validate.text x\n    return '\"' + ( x.replace /\"/g, '\"\"' ) + '\"'\n\n  #---------------------------------------------------------------------------------------------------------\n  escape_text: ( x ) ->\n    validate.text x\n    return x.replace /'/g, \"''\"\n\n  #---------------------------------------------------------------------------------------------------------\n  list_as_json: ( x ) ->\n    validate.list x\n    return JSON.stringify x\n\n  #---------------------------------------------------------------------------------------------------------\n  as_sql: ( x ) ->\n    switch type = type_of x\n      when 'text'     then return \"'#{@escape_text x}'\"\n      when 'list'     then return \"'#{@list_as_json x}'\"\n      when 'float'    then return x.toString()\n      when 'boolean'  then return ( if x then '1' else '0' )\n      when 'null'     then return 'null'\n      when 'undefined'\n        throw new L.Dba_error \"µ771 unable to express 'undefined' as SQL literal\"\n    throw new L.Dba_error \"µ772 unable to express a #{type} as SQL literal, got #{rpr x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  interpolate: ( sql, Q ) ->\n    return sql.replace @_interpolation_pattern, ( $0, $1 ) =>\n      try\n        return @as_sql Q[ $1 ]\n      catch error\n        throw new L.Dba_error \\\n          \"µ773 when trying to express placeholder #{rpr $1} as SQL literal, an error occurred: #{rpr error.message}\"\n  _interpolation_pattern: /// \\$ (?: ( .+? ) \\b | \\{ ( [^}]+ ) \\} ) ///g\n\n\n  #=========================================================================================================\n  # SORTABLE LISTS\n  #---------------------------------------------------------------------------------------------------------\n  as_hollerith:   ( x ) -> HOLLERITH.encode x\n  from_hollerith: ( x ) -> HOLLERITH.decode x\n\n\n"
  ]
}