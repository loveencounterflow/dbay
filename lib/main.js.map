{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/DBA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\n#...........................................................................................................\ntypes                     = require './types'\n{ freeze\n  lets }                  = require 'letsfreezethat'\nL                         = @\n{ misfit }                = require './common'\nE                         = require './errors'\nnew_bsqlt3_connection     = require 'better-sqlite3'\nPATH                      = require 'path'\nTMP                       = require 'tempy'\n{ Import_export_mixin }   = require './import-export-mixin'\n{ Functions_mixin }       = require './functions-mixin'\n{ Checks_mixin }          = require './checks-mixin'\n{ Stdlib_mixin }          = require './stdlib-mixin'\nguy                       = require 'guy'\nSQL                       = String.raw\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass @Dba extends Stdlib_mixin Checks_mixin Functions_mixin Import_export_mixin()\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    guy.props.def @, 'types',       { enumerable: false, value: types, }\n    guy.props.def @, '_statements', { enumerable: false, value: {}, }\n    guy.props.def @, 'sql',         { enumerable: false, value: ( new ( require './sql' ).Sql() ), }\n    @_schemas     = freeze {}\n    @cfg          = freeze { @types.defaults.dba_constructor_cfg..., cfg..., }\n    @types.validate.dba_constructor_cfg @cfg\n    @_dbg         = { debug: @cfg.debug, echo: @cfg.echo, }\n    @_formats     = freeze { @types.defaults.extensions_and_formats..., }\n    # throw new E.Dba_cfg_error '^dba@300^', \"property `sqlt` not supported\"   if @cfg.sqlt?\n    throw new E.Dba_cfg_error '^dba@300^', \"property `schema` not supported\"   if @cfg.schema?\n    @_bsqlt3_cfg  = freeze {\n      readonly:       @cfg.readonly\n      fileMustExist:  not @cfg.create\n      timeout:        @cfg.timeout }\n      # verbose:        ### TAINT to be done ###\n    @_state = {\n      in_unsafe_mode:   false\n      initialized:      false\n      stdlib_created:   false }\n    @_catalog = freeze {} ### NOTE: will hold data on user-defined functions, virtual tables ###\n    @_state.initialized = true ### TAINT remove ###\n    @_initialize_prng()\n    #.......................................................................................................\n    { ram\n      name\n      path } = @cfg\n    if ram\n      ### formulate connection string à la 'file:memdb1?mode=memory&cache=shared' ###\n      { url\n        name } = dba._get_connection_url name ? null\n      debug '^3443^', name, url\n      if path?\n        ### File DB, Eventual Persistency; opened from file (may get created), mirror to RAM ###\n        null\n      else\n        ### RAM DB, No Persistency, starts empty ###\n        null\n    else\n      ### File DB, Continuous Persistency ###\n      null\n    @sqlt               = new_bsqlt3_connection path, @_bsqlt3_cfg\n    @sqlt2              = new_bsqlt3_connection path, @_bsqlt3_cfg\n    @initialize_sqlt @sqlt\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  initialize_sqlt: ( sqlt ) ->\n    ### NOTE do NOT use any instance methods in the initializer as this will lead to infinite regress b/c of\n    the way the dynamic attribute `@sqlt` has been implemented. ###\n    sqlt.pragma \"foreign_keys = true;\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  open: ( cfg ) ->\n    @types.validate.dba_open_cfg ( cfg = { @types.defaults.dba_open_cfg..., cfg..., } )\n    { path, schema, ram, }  = cfg\n    #.......................................................................................................\n    ### TAINT troublesome logic with `path` and `saveas` ###\n    if path?\n      saveas  = path\n    else\n      path    = '' ### TAINT or ':memory:' depending on `cfg.disk` ###\n      saveas  = null\n    #.......................................................................................................\n    if ram then @_open_file_db_in_ram { path, schema, saveas, }\n    else        @_attach              { path, schema, saveas, }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  save: ( cfg ) ->\n    ### TAINT could implement prohibition of `path` in type `dba_save_cfg` ###\n    @types.validate.dba_save_cfg ( cfg = { @types.defaults.dba_export_cfg..., cfg..., } )\n    { schema\n      path }    = cfg\n    throw new E.Dba_argument_not_allowed '^dba@303^', 'path', path if path?\n    path        = @_schemas[ schema ]?.path ? null\n    throw new E.Dba_schema_unknown '^dba@304^', schema unless path?\n    return @export { schema, path, format: 'sqlite', }\n\n  #---------------------------------------------------------------------------------------------------------\n  export: ( cfg ) ->\n    ### TAINT add boolean `cfg.overwrite` ###\n    @types.validate.dba_export_cfg ( cfg = { @types.defaults.dba_export_cfg..., cfg..., } )\n    { schema\n      path\n      format }  = cfg\n    format     ?= @_format_from_path path\n    throw new E.Dba_extension_unknown '^dba@305^', path unless format?\n    switch format\n      when 'sqlite' then @_vacuum_atomically { schema, path, }\n      ### TAINT when format derived from path, may be undefined, making the error message unintelligible ###\n      else throw new E.Dba_format_unknown '^dba@306^', format\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _vacuum_atomically: ( cfg ) ->\n    @types.validate.dba_vacuum_atomically ( cfg = { @types.defaults.dba_vacuum_atomically..., cfg..., } )\n    { schema\n      path }  = cfg\n    schema_i  = @sql.I schema\n    try\n      tmpdir_path   = TMP.directory { prefix: @cfg._temp_prefix, }\n      tmpfile_path  = PATH.join tmpdir_path, PATH.basename path\n      @run \"vacuum #{schema_i} into ?;\", [ tmpfile_path, ]\n      FS.renameSync tmpfile_path, path\n    finally\n      FS.rmdirSync tmpdir_path\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  is_ram_db: ( cfg ) ->\n    @types.validate.dba_is_ram_db_cfg ( cfg = { @types.defaults.dba_is_ram_db_cfg..., cfg..., } )\n    { schema } = cfg\n    sql = \"select file from pragma_database_list where name = ? limit 1;\"\n    try\n      return @types.isa.dba_ram_path @single_value @query sql, [ schema, ]\n    catch error\n      throw new E.Dba_schema_unknown '^dba@307^', schema if error instanceof E.Dba_expected_one_row\n      throw error\n\n  #---------------------------------------------------------------------------------------------------------\n  _list_temp_schema_numbers: ->\n    matcher = @cfg._temp_prefix + '%'\n    sql     = \"\"\"\n      select\n          cast( substring( name, ? ) as integer ) as n\n        from pragma_database_list\n        where name like ?;\"\"\"\n    return @all_first_values @query sql, [ @cfg._temp_prefix.length + 1, matcher, ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _max_temp_schema_number: ->\n    matcher = @cfg._temp_prefix + '%'\n    sql     = \"\"\"\n      select\n          max( cast( substring( name, ? ) as integer ) ) as n\n        from pragma_database_list\n        where name like ?;\"\"\"\n    return ( @first_value @query sql, [ @cfg._temp_prefix.length + 1, matcher, ] ) ? 0\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_free_temp_schema: -> @cfg._temp_prefix + \"#{( @_max_temp_schema_number() + 1 )}\"\n\n\n  #=========================================================================================================\n  # DEBUGGING\n  #---------------------------------------------------------------------------------------------------------\n  _echo: ( ref, sql ) ->\n    return null unless @_dbg.echo\n    echo ( CND.reverse CND.blue \"^icql@888-#{ref}^\" ) + ( CND.reverse CND.yellow sql )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _debug: ( P... ) ->\n    return null unless @_dbg.debug\n    debug P...\n    return null\n\n\n  #=========================================================================================================\n  # QUERY RESULT ADAPTERS\n  #---------------------------------------------------------------------------------------------------------\n  limit: ( n, iterator ) ->\n    count = 0\n    for x from iterator\n      return if count >= n\n      count += +1\n      yield x\n    return\n\n  #---------------------------------------------------------------------------------------------------------\n  single_row:   ( iterator ) ->\n    throw new E.Dba_expected_one_row 'dba@763^', 0 if ( R = @first_row iterator ) is undefined\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  all_first_values: ( iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        R.push value\n        break\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_values: ( iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        yield value\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_row:    ( iterator  ) -> return row for row from iterator\n  ### TAINT must ensure order of keys in row is same as order of fields in query ###\n  single_value: ( iterator  ) -> return value for key, value of @single_row iterator\n  first_value:  ( iterator  ) -> return value for key, value of @first_row iterator\n  list:         ( iterator  ) -> [ iterator..., ]\n\n\n  #=========================================================================================================\n  # QUERYING\n  #---------------------------------------------------------------------------------------------------------\n  query: ( sql, P... ) ->\n    @_echo 'query', sql\n    statement = ( @_statements[ sql ] ?= @sqlt.prepare sql )\n    return statement.iterate P...\n\n  #---------------------------------------------------------------------------------------------------------\n  run: ( sql, P... ) ->\n    @_echo 'run', sql\n    statement = ( @_statements[ sql ] ?= @sqlt.prepare sql )\n    return statement.run P...\n\n  #---------------------------------------------------------------------------------------------------------\n  _run_or_query: ( entry_type, is_last, sql, Q ) ->\n    @_echo '_run_or_query', sql\n    statement     = ( @_statements[ sql ] ?= @sqlt.prepare sql )\n    returns_data  = statement.reader\n    #.......................................................................................................\n    ### Always use `run()` method if statement does not return data: ###\n    unless returns_data\n      return if Q? then ( statement.run Q ) else statement.run()\n    #.......................................................................................................\n    ### If statement does return data, consume iterator unless this is the last statement: ###\n    if ( entry_type is 'procedure' ) or ( not is_last )\n      return if Q? then ( statement.all Q ) else statement.all()\n    #.......................................................................................................\n    ### Return iterator: ###\n    return if Q? then ( statement.iterate Q ) else statement.iterate()\n\n  #---------------------------------------------------------------------------------------------------------\n  execute: ( sql ) ->\n    throw new E.Dba_argument_not_allowed '^dba@308^', \"extra\", rpr x if ( x = arguments[ 1 ] )?\n    @_echo 'execute', sql\n    return @sqlt.exec sql\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare: ( sql  ) ->\n    @_echo 'prepare', sql\n    return @sqlt.prepare sql\n\n\n  #=========================================================================================================\n  # OTHER\n  #---------------------------------------------------------------------------------------------------------\n  backup:         ( P...  ) -> @sqlt.backup           P...\n  checkpoint:     ( P...  ) -> @sqlt.checkpoint       P...\n  close:          ( P...  ) -> @sqlt.close            P...\n  read:           ( path  ) -> @sqlt.exec FS.readFileSync path, { encoding: 'utf-8', }\n  load_extension: ( P...  ) -> @sqlt.loadExtension    P...\n  pragma:         ( P...  ) -> @sqlt.pragma           P...\n\n\n  #=========================================================================================================\n  # DB STRUCTURE REPORTING\n  #---------------------------------------------------------------------------------------------------------\n  catalog: ->\n    ### TAINT kludge: we sort by descending types so views, tables come before indexes (b/c you can't drop a\n    primary key index in SQLite) ###\n    throw new E.Dba_not_implemented '^dba@309^', \"method dba.catalog()\"\n    @query \"select * from sqlite_schema order by type desc, name;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_objects: ( cfg ) ->\n    @types.validate.dba_walk_objects_cfg ( cfg = { @types.defaults.dba_walk_objects_cfg..., cfg..., } )\n    schema      = cfg.schema\n    ordering    = cfg._ordering\n    return @_walk_all_objects() unless schema?\n    schema_i    = @sql.I  schema\n    ordering_x  = if ( ordering is 'drop' ) then 'desc' else 'asc'\n    seq         = @first_value @query \\\n      @sql.SQL\"select seq from pragma_database_list where name = #{@sql.L schema};\"\n    #.......................................................................................................\n    return @query @sql.SQL\"\"\"\n      select\n          #{seq}            as seq,\n          #{@sql.L schema}  as schema,\n          name              as name,\n          type              as type,\n          sql               as sql\n        from #{@sql.I schema}.sqlite_schema\n        order by seq, type #{ordering_x}, name;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_all_objects: ->\n    schemas   = {}\n    parts     = []\n    #.......................................................................................................\n    ### TAINT use API ###\n    for row from @query SQL\"select seq, name, file as path from pragma_database_list order by seq;\"\n      schemas[ row.name ] = row\n    #.......................................................................................................\n    for schema, d of schemas\n      schema_i    = @sql.I  schema\n      schema_l    = @sql.L  schema\n      parts.push SQL\"\"\"select\n          #{d.seq} as seq,\n          #{schema_l} as schema,\n          name  as name,\n          type  as type,\n          sql   as sql\n        from #{schema_i}.sqlite_schema as d1\"\"\"\n    parts     = parts.join \" union all\\n\"\n    #.......................................................................................................\n    sql       = ''\n    sql      += parts\n    sql      += \"\\norder by seq, type, name;\"\n    return @query sql\n\n  #---------------------------------------------------------------------------------------------------------\n  is_empty: ( cfg ) ->\n    @types.validate.dba_is_empty_cfg ( cfg = { @types.defaults.dba_is_empty_cfg..., cfg..., } )\n    return ( has_schema = @_is_empty_schema @sql.I cfg.schema ) unless name?\n    throw new E.Dba_not_implemented '^dba@310^', \"dba.is_empty() for anything but schemas (got #{rpr cfg})\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _is_empty_schema: ( schema_i ) -> (\n    @list @query \"select 1 from #{schema_i}.sqlite_schema limit 1;\" ).length is 0\n\n  #---------------------------------------------------------------------------------------------------------\n  list_schemas:       -> @list @query \"select * from pragma_database_list order by name;\"\n  list_schema_names:  -> ( d.name for d in @list_schemas() )\n\n  #---------------------------------------------------------------------------------------------------------\n  has: ( cfg ) ->\n    @types.validate.dba_has_cfg ( cfg = { @types.defaults.dba_has_cfg..., cfg..., } )\n    return cfg.schema in @list_schema_names()\n\n  #---------------------------------------------------------------------------------------------------------\n  get_schemas: ->\n    R             = {}\n    R[ row.name ] = row.file for row from @query \"select * from pragma_database_list order by seq;\"\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _path_of_schema: ( schema, fallback = misfit ) ->\n    R = @first_value @query \"select file from pragma_database_list where name = ?;\", [ schema, ]\n    return R if R?\n    return fallback unless fallback is misfit\n    throw new E.Dba_schema_unknown '^dba@311^', schema\n\n  #---------------------------------------------------------------------------------------------------------\n  type_of: ( cfg ) ->\n    @types.validate.dba_type_of_cfg ( cfg = { @types.defaults.dba_type_of_cfg..., cfg..., } )\n    { name, schema, } = cfg\n    if name in [ 'sqlite_schema', 'sqlite_master', ]\n      return 'table'\n    row = @first_row @query SQL\"\"\"\n      select type from #{@sql.I schema}.sqlite_schema\n      where name = $name\n      limit 1;\"\"\", { name, }\n    throw new E.Dba_object_unknown '^dba@311^', schema, name unless row?\n    return row.type\n\n  #---------------------------------------------------------------------------------------------------------\n  fields_of: ( cfg ) ->\n    @types.validate.dba_fields_of_cfg ( cfg = { @types.defaults.dba_fields_of_cfg..., cfg..., } )\n    { name, schema, } = cfg\n    schema_i          = @sql.I schema\n    R                 = {}\n    for d from @query SQL\"select * from #{schema_i}.pragma_table_info( $name );\", { name, }\n      # { cid: 0, name: 'id', type: 'integer', notnull: 1, dflt_value: null, pk: 1 }\n      type = if d.type is '' then null else d.type\n      R[ d.name ] = {\n        idx:      d.cid\n        type:     type\n        optional: !d.notnull\n        default:  d.dflt_value\n        is_pk:    !!d.pk }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  field_names_of: ( cfg ) ->\n    # try\n    @types.validate.dba_field_names_of_cfg ( cfg = { @types.defaults.dba_field_names_of_cfg..., cfg..., } )\n    { name, schema, } = cfg\n    schema_i          = @sql.I schema\n    return ( d.name for d from @query SQL\"select name from #{schema_i}.pragma_table_info( $name );\", { name, } )\n    # catch error\n    #   throw new E.Dba_sqlite_error '^dba@111^', error\n\n  #---------------------------------------------------------------------------------------------------------\n  dump_relation: ( cfg ) ->\n    @types.validate.dba_dump_relation_cfg ( cfg = { @types.defaults.dba_dump_relation_cfg..., cfg..., } )\n    { schema\n      name\n      order_by\n      limit         } = cfg\n    schema_i          = @sql.I schema\n    qname_i         = schema_i + '.' + @sql.I name\n    limit           = if cfg.limit is null then 1e9 else cfg.limit\n    order_by       ?= 'random()'\n    return @query SQL\"select * from #{qname_i} order by #{order_by} limit #{limit};\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _dependencies_of: ( table, schema = 'main' ) ->\n    return @query \"pragma #{@sql.I schema}.foreign_key_list( #{@sql.I table} )\"\n\n  #---------------------------------------------------------------------------------------------------------\n  dependencies_of:  ( table, schema = 'main' ) ->\n    @types.validate.ic_schema schema\n    return ( row.table for row from @_dependencies_of table )\n\n\n  #=========================================================================================================\n  # DB STRUCTURE MODIFICATION\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT Error: index associated with UNIQUE or PRIMARY KEY constraint cannot be dropped ###\n  clear: ( cfg ) ->\n    @types.validate.dba_clear_cfg ( cfg = { @types.defaults.dba_clear_cfg..., cfg..., } )\n    { schema, }   = cfg\n    schema_i      = @sql.I schema\n    R             = 0\n    fk_state      = @get_foreign_keys_state()\n    @set_foreign_keys_state off\n    for { type, name, } in @list @walk_objects { schema, _ordering: 'drop', }\n      statement = \"drop #{type} if exists #{@sql.I name};\"\n      @execute statement\n      R += +1\n    @set_foreign_keys_state fk_state\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _open_file_db_in_ram: ( cfg ) ->\n    ### Given a `path` and a `schema`, create a temporary schema to open the file DB in as well as an empty\n    in-memory schema; then copy all DB objects and their contents from the temporary file schema to the RAM\n    schema. Finally, detach the file schema. Ensure the `path` given is kept around as the `saveas`\n    (implicit) path to be used for eventual persistency (`dba.save()`). ###\n    ### TAINT validate? ###\n    schema_main_allowed = not @_state.initialized\n    { path, schema, saveas, } = cfg\n    return @_attach { schema, path, saveas, } if @types.isa.dba_ram_path path\n    #.......................................................................................................\n    tmp_schema = @_get_free_temp_schema()\n    @_attach { schema: tmp_schema, path, }\n    unless ( schema is 'main' ) and schema_main_allowed\n      @_attach { schema, path: '', saveas, }\n    @_copy_schema { from_schema: tmp_schema, to_schema: schema, }\n    @_detach { schema: tmp_schema, }\n    #.......................................................................................................\n    @_schemas = lets @_schemas, ( d ) => d[ schema ] = { path: saveas, } ### TAINT use API call ###\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _attach: ( cfg ) ->\n    ### Given a `path` and a `schema`, execute SQL\"attach $path as $schema\".\n\n    `_attach()` will fail\n      * if `schema` already exists, or\n      * if the maximum number of schemas (10 by default) has already been attached, or\n      * if the schema name is `main` and the DBA is `@_state.initialized`.\n\n    If `@_state.initialized` is `false`, then a new `better-sqlite3` instance with a `main` schema will be\n    created;\n      * if the `schema` passed in is `main`, it will be opened from the `path` given.\n      * If `schema` is not `main`, `main` will be opened as an empty RAM DB, and `schema` will be attached\n        from the file given.\n    ###\n    @types.validate.dba_attach_cfg ( cfg = { @types.defaults.dba_attach_cfg..., cfg..., } )\n    { path, schema, saveas, }   = cfg\n    #.......................................................................................................\n    unless @_state.initialized\n      if schema is 'main'\n        ### TAINT code duplication from oneoff handler ###\n        connection          = new_bsqlt3_connection path, @_bsqlt3_cfg\n        @initialize_sqlt connection\n        guy.props.def @, 'sqlt', enumerable: false, configurable: false, value: connection\n        @_state.initialized = true\n        @_schemas           = lets @_schemas, ( d ) =>\n          d[ schema ] = { path: saveas, } ### TAINT use API call ###\n        return null\n      ignore = @sqlt ### NOTE retrieve dynamic attribute for side effect, ignore its value ###\n    #.......................................................................................................\n    if @has { schema, }\n      throw new E.Dba_schema_exists '^dba@312^', schema\n    #.......................................................................................................\n    try\n      @run \"attach ? as ?;\", [ path, schema, ]\n    catch error\n      throw error unless error.code is 'SQLITE_ERROR'\n      throw new E.Dba_sqlite_too_many_dbs '^dba@313^', schema if error.message.startsWith 'too many attached databases'\n      throw new E.Dba_sqlite_error        '^dba@314^', error\n    @_schemas = lets @_schemas, ( d ) => d[ schema ] = { path: saveas, } ### TAINT use API call ###\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _detach: ( cfg ) ->\n    @types.validate.dba_detach_cfg ( cfg = { @types.defaults.dba_detach_cfg..., cfg..., } )\n    @execute @sql.SQL\"detach #{@sql.I cfg.schema};\"\n    @_schemas     = lets @_schemas, ( d ) => delete d[ cfg.schema ]\n    return null\n\n\n  #=========================================================================================================\n  # IN-MEMORY PROCESSING\n  #-----------------------------------------------------------------------------------------------------------\n  _move_schema: ( cfg ) -> @_copy_or_move_schema cfg, true\n  _copy_schema: ( cfg ) -> @_copy_or_move_schema cfg, false\n\n  #-----------------------------------------------------------------------------------------------------------\n  _copy_or_move_schema: ( cfg, detach_schema = false ) ->\n    detach_from_schema = ->\n      return null unless detach_schema\n      return @_detach { schema: from_schema, }\n    #.......................................................................................................\n    @types.validate.copy_or_move_schema_cfg ( cfg = { @types.defaults.copy_or_move_schema_cfg..., cfg..., } )\n    { from_schema, to_schema, } = cfg\n    #.......................................................................................................\n    if from_schema is to_schema\n      throw new E.Dba_schema_repeated '^dba@315^', from_schema\n    #.......................................................................................................\n    known_schemas     = @list_schema_names()\n    throw new E.Dba_schema_unknown '^dba@316^', from_schema unless from_schema in known_schemas\n    throw new E.Dba_schema_unknown '^dba@317^', to_schema   unless to_schema   in known_schemas\n    #.......................................................................................................\n    to_schema_objects = @list @walk_objects { schema: to_schema, }\n    if to_schema_objects.length > 0\n      throw new E.Dba_schema_nonempty '^dba@318^', to_schema\n    #.......................................................................................................\n    from_schema_objects = @list @walk_objects { schema: from_schema }\n    return detach_from_schema() if from_schema_objects.length is 0\n    #.......................................................................................................\n    to_schema_x   = @sql.I to_schema\n    from_schema_x = @sql.I from_schema\n    inserts       = []\n    fk_state      = @get_foreign_keys_state()\n    @set_foreign_keys_state off\n    #.......................................................................................................\n    for d in from_schema_objects\n      continue if ( not d.sql? ) or ( d.sql is '' )\n      continue if d.name in [ 'sqlite_sequence', ]\n      #.....................................................................................................\n      ### TAINT consider to use `validate.ic_db_object_type` ###\n      unless d.type in [ 'table', 'view', 'index', ]\n        throw new E.Dba_unexpected_db_object_type '^dba@319^', d.type, d\n      #.....................................................................................................\n      ### TAINT using not-so reliable string replacement as substitute for proper parsing ###\n      name_x  = @sql.I d.name\n      sql     = d.sql.replace /\\s*CREATE\\s*(TABLE|INDEX|VIEW)\\s*/i, \"create #{d.type} #{to_schema_x}.\"\n      #.....................................................................................................\n      if sql is d.sql\n        throw new E.Dba_unexpected_sql '^dba@320^', d.sql\n      #.....................................................................................................\n      @execute sql\n      if d.type is 'table'\n        inserts.push \"insert into #{to_schema_x}.#{name_x} select * from #{from_schema_x}.#{name_x};\"\n    #.......................................................................................................\n    @execute sql for sql in inserts\n    @set_foreign_keys_state fk_state\n    @pragma \"#{@sql.I to_schema}.foreign_key_check;\" if fk_state\n    return detach_from_schema()\n\n  #=========================================================================================================\n  # RANDOM NUMBER GENERATION\n  # seedable for testing purposes\n  #---------------------------------------------------------------------------------------------------------\n  ### To obtain a class with a seedable PRNG that emits repeatable sequences, define class property\n  `@_rnd_int_cfg: { seed, delta, }` where both seed and delta can be arbitrary finite numbers. **NOTE**\n  very small `delta` values (like 1e-10) may cause adjacent numbers to be close together or even repeat. To\n  use default values for both parameters, set `@_rnd_int_cfg: true`.###\n  @_rnd_int_cfg: null\n  _initialize_prng: ->\n    clasz = @constructor\n    if clasz._rnd_int_cfg?\n      seed      = clasz._rnd_int_cfg.seed   ? 12.34\n      delta     = clasz._rnd_int_cfg.delta  ? 1\n      @_rnd_int = CND.get_rnd_int seed, delta\n    else\n      @_rnd_int = CND.random_integer.bind CND\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_connection_url: ( dbnick = null ) =>\n    ### TAINT rename `dbnick` to `dbnick` ###\n    ### Given an optional `dbnick`, return an object with the `dbnick` and the `url` for a new SQLite\n    connection. The url will look like `'file:your_name_here?mode=memory&cache=shared` so multiple\n    connections to the same RAM DB can be opened. When `dbnick` is not given, a random dbnick like\n    `_icql_6200294332` will be chosen (prefix `_icql_`, suffix ten decimal digits). For testing, setting\n    class property `@_rnd_int_cfg` can be used to obtain repeatable series of random names. ###\n    dbnick ?= \"_icql_#{@_rnd_int 1_000_000_000, 9_999_999_999}\"\n    url     = \"file:#{dbnick}?mode=memory&cache=shared\"\n    return { url, dbnick, }\n\n\n"
  ]
}