{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/DBA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nHOLLERITH                 = require 'hollerith-codec'\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  validate_optional\n  declare\n  size_of\n  type_of }               = @types\nLFT                       = require 'letsfreezethat'\nMultimix                  = require 'multimix'\nL                         = @\nL._misfit                 = Symbol 'misfit'\n\n\n#-----------------------------------------------------------------------------------------------------------\nL.pick = ( d, key, fallback, type = null ) ->\n  R = d?[ key ] ? fallback\n  validate[ type ] R if type?\n  return R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass @Dba extends Multimix\n\n  #---------------------------------------------------------------------------------------------------------\n  @_defaults:\n    sqlt:           null  ### [`better-sqlite3`](https://github.com/JoshuaWise/better-sqlite3/) instance ###\n    echo:           false ### whether to echo statements to the terminal ###\n    debug:          false ### whether to print additional debugging info ###\n    path:           ''\n    schema:         'main'\n    create:         true\n    timeout:        5000\n    readonly:       false\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    @_statements  = {}\n    @cfg          = { @constructor._defaults..., cfg..., }\n    path          = @cfg.path\n    schema        = @cfg.schema\n    validate.ic_path    path\n    validate.ic_schema  schema\n    bsqlt3_cfg    =\n      readonly:       @cfg.readonly\n      fileMustExist:  not @cfg.create\n      timeout:        @cfg.timeout\n      # verbose:        ### TAINT to be done ###\n    #.......................................................................................................\n    if @cfg.sqlt?\n      @sqlt = @cfg.sqlt\n    else\n      bsqlt3 = require 'better-sqlite3'\n      if schema is 'main'\n        @sqlt = bsqlt3 path, bsqlt3_cfg\n      else\n        @sqlt = bsqlt3 '', bsqlt3_cfg\n        @open { path, schema, }\n    #.......................................................................................................\n    return undefined ### always return `undefined` from constructor ###\n\n  #---------------------------------------------------------------------------------------------------------\n  open: ( cfg ) ->\n    path        = L.pick cfg, 'path',   null, 'ic_path'\n    schema      = L.pick cfg, 'schema', null, 'ic_schema'\n    throw new Error \"^icql-dba.open@445^ cannot open schema #{rpr schema} (yet)\"  if schema is 'main'\n    throw new Error \"^icql-dba.open@445^ schema #{rpr schema} already exists\"     if @has { schema, }\n    @attach { path, schema, }\n    return null\n\n\n  #=========================================================================================================\n  # DEBUGGING\n  #---------------------------------------------------------------------------------------------------------\n  _echo: ( ref, sql ) ->\n    return null unless @cfg.echo\n    echo ( CND.reverse CND.blue \"^icql@888-#{ref}^\" ) + ( CND.reverse CND.yellow sql )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _debug: ( P... ) ->\n    return null unless @cfg.debug\n    debug P...\n    return null\n\n\n  #=========================================================================================================\n  # QUERY RESULT ADAPTERS\n  #---------------------------------------------------------------------------------------------------------\n  limit: ( n, iterator ) ->\n    count = 0\n    for x from iterator\n      return if count >= n\n      count += +1\n      yield x\n    return\n\n  #---------------------------------------------------------------------------------------------------------\n  single_row:   ( iterator ) ->\n    throw new Error \"µ763 expected at least one row, got none\" if ( R = @first_row iterator ) is undefined\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  all_first_values: ( iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        R.push value\n        break\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_values: ( iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        yield value\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_row:    ( iterator  ) -> return row for row from iterator\n  ### TAINT must ensure order of keys in row is same as order of fields in query ###\n  single_value: ( iterator  ) -> return value for key, value of @single_row iterator\n  first_value:  ( iterator  ) -> return value for key, value of @first_row iterator\n  list:         ( iterator  ) -> [ iterator..., ]\n\n\n  #=========================================================================================================\n  # QUERYING\n  #---------------------------------------------------------------------------------------------------------\n  query: ( sql, P... ) ->\n    @_echo 'query', sql\n    statement = ( @_statements[ sql ] ?= @sqlt.prepare sql )\n    return statement.iterate P...\n\n  #---------------------------------------------------------------------------------------------------------\n  run: ( sql, P... ) ->\n    @_echo 'run', sql\n    statement = ( @_statements[ sql ] ?= @sqlt.prepare sql )\n    return statement.run P...\n\n  #---------------------------------------------------------------------------------------------------------\n  _run_or_query: ( entry_type, is_last, sql, Q ) ->\n    @_echo '_run_or_query', sql\n    statement     = ( @_statements[ sql ] ?= @sqlt.prepare sql )\n    returns_data  = statement.reader\n    #.......................................................................................................\n    ### Always use `run()` method if statement does not return data: ###\n    unless returns_data\n      return if Q? then ( statement.run Q ) else statement.run()\n    #.......................................................................................................\n    ### If statement does return data, consume iterator unless this is the last statement: ###\n    if ( entry_type is 'procedure' ) or ( not is_last )\n      return if Q? then ( statement.all Q ) else statement.all()\n    #.......................................................................................................\n    ### Return iterator: ###\n    return if Q? then ( statement.iterate Q ) else statement.iterate()\n\n  #---------------------------------------------------------------------------------------------------------\n  execute: ( sql  ) ->\n    @_echo 'execute', sql\n    return @sqlt.exec sql\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare: ( sql  ) ->\n    @_echo 'prepare', sql\n    return @sqlt.prepare sql\n\n\n  #=========================================================================================================\n  # OTHER\n  #---------------------------------------------------------------------------------------------------------\n  aggregate:      ( P...  ) -> @sqlt.aggregate        P...\n  backup:         ( P...  ) -> @sqlt.backup           P...\n  checkpoint:     ( P...  ) -> @sqlt.checkpoint       P...\n  close:          ( P...  ) -> @sqlt.close            P...\n  read:           ( path  ) -> @sqlt.exec FS.readFileSync path, { encoding: 'utf-8', }\n  function:       ( P...  ) -> @sqlt.function         P...\n  load_extension: ( P...  ) -> @sqlt.loadExtension    P...\n  pragma:         ( P...  ) -> @sqlt.pragma           P...\n  transaction:    ( P...  ) -> @sqlt.transaction      P...\n\n  #---------------------------------------------------------------------------------------------------------\n  get_foreign_key_state: -> not not ( @pragma \"foreign_keys;\" )[ 0 ].foreign_keys\n\n  #---------------------------------------------------------------------------------------------------------\n  set_foreign_key_state: ( onoff ) ->\n    validate.boolean onoff\n    @pragma \"foreign_keys = #{onoff};\"\n    return null\n\n\n  #=========================================================================================================\n  # DB STRUCTURE REPORTING\n  #---------------------------------------------------------------------------------------------------------\n  catalog: ->\n    ### TAINT kludge: we sort by descending types so views, tables come before indexes (b/c you can't drop a\n    primary key index in SQLite) ###\n    throw new Error \"µ764 deprecated until next major version\"\n    @query \"select * from sqlite_schema order by type desc, name;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_objects: ( cfg ) ->\n    schema      = L.pick cfg, 'schema',     null\n    ordering    = L.pick cfg, '_ordering',  null\n    return @_walk_all_objects() unless schema?\n    validate_optional.ic_schema schema\n    validate_optional.dba_list_objects_ordering ordering\n    schema_i    = @as_identifier  schema\n    schema_s    = @as_sql         schema\n    ordering_x  = if ( ordering is 'drop' ) then 'desc' else 'asc'\n    seq         = @first_value @query \"select seq from pragma_database_list where name = #{schema_s};\"\n    #.......................................................................................................\n    return @query \"\"\"\n      select\n          #{seq}    as seq,\n          #{schema_s} as schema,\n          name      as name,\n          type      as type,\n          sql       as sql\n        from #{schema_i}.sqlite_schema\n        order by seq, type #{ordering_x}, name;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_all_objects: ->\n    schemas   = {}\n    parts     = []\n    #.......................................................................................................\n    ### TAINT use API ###\n    for row from @query \"select seq, name, file as path from pragma_database_list order by seq;\"\n      schemas[ row.name ] = row\n    #.......................................................................................................\n    for schema, d of schemas\n      schema_i    = @as_identifier  schema\n      schema_s  = @as_sql         schema\n      parts.push \"\"\"select\n          #{d.seq} as seq,\n          #{schema_s} as schema,\n          name  as name,\n          type  as type,\n          sql   as sql\n        from #{schema_i}.sqlite_schema as d1\"\"\"\n    parts     = parts.join \" union all\\n\"\n    #.......................................................................................................\n    sql       = ''\n    sql      += parts\n    sql      += \"\\norder by seq, type, name;\"\n    return @query sql\n\n  #---------------------------------------------------------------------------------------------------------\n  is_empty: ( cfg ) ->\n    schema      = L.pick cfg, 'schema', 'main', 'ic_schema'\n    name        = L.pick cfg, 'name', null\n    validate_optional.ic_name name\n    return ( has_schema = @_is_empty_schema @as_identifier schema ) unless name?\n    throw new Error \"^icql-dba.is_empty@34543^ not implemented: is_empty() for anything but schemas, got #{rpr cfg}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _is_empty_schema: ( schema_i ) -> (\n    @list @query \"select 1 from #{schema_i}.sqlite_schema limit 1;\" ).length is 0\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _get_size: ( cfg ) ->\n  #   ### thx to https://stackoverflow.com/a/58251635/256361 ###\n  #   ### see https://www.sqlite.org/dbstat.html ###\n  #   ### TAINT field `ncell` may not be the right one to query for row / element count (?) ###\n  #   ### NOTE SQLite must be compiled with `SQLITE_ENABLE_DBSTAT_VTAB` ###\n  #   schema      = L.pick cfg, 'schema', 'main', 'ic_schema'\n  #   name        = L.pick cfg, 'name', null\n  #   validate_optional.ic_name name\n  #   unless name?\n  #     null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _get_all_sizes: ->\n  #   # @list @query \\\n  #   \"select distinct name, sum( ncell ) over ( partition by name ) from dbstat;\"\n  #   \"select d1.name as name, d1.ncell as row_count  from dbstat('foo',1) as d1;\"\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _list_objects_2: ( imagine_options_object_here ) ->\n  #   # for schema in @list_schema_names()\n  #   schema    = 'main'\n  #   validate.ic_schema schema\n  #   schema_i  = @as_identifier schema\n  #   ### thx to https://stackoverflow.com/a/53160348/256361 ###\n  #   return @list @query \"\"\"\n  #     select\n  #       'main'  as schema,\n  #       'field' as type,\n  #       m.name  as relation_name,\n  #       p.name  as field_name\n  #     from\n  #       #{schema_i}.sqlite_schema as m\n  #     join\n  #       #{schema_i}.pragma_table_info( m.name ) as p\n  #     order by\n  #       m.name,\n  #       p.cid;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  list_schemas:       -> @list @query \"select * from pragma_database_list order by name;\"\n  list_schema_names:  -> ( d.name for d in @list_schemas() )\n\n  #---------------------------------------------------------------------------------------------------------\n  has: ( cfg ) ->\n    schema = L.pick cfg, 'schema', null, 'ic_schema'\n    return schema in @list_schema_names()\n\n  #---------------------------------------------------------------------------------------------------------\n  get_schemas: ->\n    R             = {}\n    R[ row.name ] = row.file for row from @query \"select * from pragma_database_list order by seq;\"\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _path_of_schema: ( schema, fallback = L._misfit ) ->\n    R = @first_value @query \"select file from pragma_database_list where name = ?;\", [ schema, ]\n    return R if R?\n    return fallback unless fallback is L._misfit\n    throw new Error \"^icql-dba.attach@44822^ unknown schema #{rpr schema}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  type_of: ( name, schema = 'main' ) ->\n    for row from @catalog()\n      return row.type if row.name is name\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  column_types: ( table ) ->\n    R = {}\n    ### TAINT we apparently have to call the pragma in this roundabout fashion since SQLite refuses to\n    accept placeholders in that statement: ###\n    for row from @query @interpolate \"pragma table_info( $table );\", { table, }\n      R[ row.name ] = row.type\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _dependencies_of: ( table, schema = 'main' ) ->\n    return @query \"pragma #{@as_identifier schema}.foreign_key_list( #{@as_identifier table} )\"\n\n  #---------------------------------------------------------------------------------------------------------\n  dependencies_of:  ( table, schema = 'main' ) ->\n    validate.ic_schema schema\n    return ( row.table for row from @_dependencies_of table )\n\n\n  #=========================================================================================================\n  # DB STRUCTURE MODIFICATION\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT Error: index associated with UNIQUE or PRIMARY KEY constraint cannot be dropped ###\n  clear: ( cfg ) ->\n    schema        = L.pick cfg, 'schema', 'main'\n    validate.ic_schema schema\n    schema_i      = @as_identifier schema\n    R             = 0\n    fk_state      = @get_foreign_key_state()\n    @set_foreign_key_state off\n    for { type, name, } in @list @walk_objects { schema, _ordering: 'drop', }\n      statement = \"drop #{type} if exists #{@as_identifier name};\"\n      @execute statement\n      R += +1\n    @set_foreign_key_state fk_state\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  attach: ( cfg ) ->\n    schema        = L.pick cfg, 'schema', 'main', 'ic_not_temp_schema'\n    path          = L.pick cfg, 'path',   '',     'ic_path'\n    schema_i      = @as_identifier  schema\n    path_x        = @as_sql         path\n    #.......................................................................................................\n    if @has { schema, }\n      unless @_is_empty_schema schema_i\n        throw new Error \"^icql-dba.attach@44834^ schema #{rpr schema} not empty\"\n      if schema is 'main'\n        unless isa.ic_ram_path @_path_of_schema schema\n          throw new Error \"^icql-dba.attach@44835^ schema 'main' cannot be overwritten if based on file\"\n        tmp_schema = @_get_free_random_schema()\n        @attach { schema: tmp_schema, path, }\n        @copy_schema { from_schema: tmp_schema, to_schema: 'main', }\n        @detach { schema: tmp_schema, }\n        return null\n      @detach { schema, }\n    #.......................................................................................................\n    @execute \"attach #{path_x} as #{schema_i};\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  detach: ( cfg ) ->\n    schema        = L.pick cfg, 'schema', null, 'ic_schema'\n    schema_i      = @as_identifier  schema\n    return @execute \"detach #{schema_i};\"\n\n\n  #=========================================================================================================\n  # IN-MEMORY PROCESSING\n  #-----------------------------------------------------------------------------------------------------------\n  move_schema: ( cfg ) -> @_copy_schema cfg, true\n  copy_schema: ( cfg ) -> @_copy_schema cfg, false\n\n  #-----------------------------------------------------------------------------------------------------------\n  _copy_schema: ( cfg, detach_schema = false ) ->\n    detach_from_schema = ->\n      return null unless detach_schema\n      return @detach { schema: from_schema, }\n    #.......................................................................................................\n    from_schema   = L.pick cfg, 'from_schema',  'main'\n    to_schema     = L.pick cfg, 'to_schema',    'main'\n    validate.ic_schema from_schema\n    validate.ic_schema to_schema\n    #.......................................................................................................\n    if from_schema is to_schema\n      throw new Error \"µ767 unable to copy schema to itself, got #{rpr cfg} (schema #{rpr from_schema})\"\n    #.......................................................................................................\n    known_schemas     = @list_schema_names()\n    throw new Error \"µ765 unknown schema #{rpr from_schema}\" unless from_schema in known_schemas\n    throw new Error \"µ766 unknown schema #{rpr to_schema}\"   unless to_schema   in known_schemas\n    #.......................................................................................................\n    to_schema_objects = @list @walk_objects { schema: to_schema, }\n    if to_schema_objects.length > 0\n      throw new Error \"µ768 unable to copy to non-empty schema #{rpr to_schema}\"\n    #.......................................................................................................\n    from_schema_objects = @list @walk_objects { schema: from_schema }\n    return detach_from_schema() if from_schema_objects.length is 0\n    #.......................................................................................................\n    to_schema_x   = @as_identifier to_schema\n    from_schema_x = @as_identifier from_schema\n    inserts       = []\n    fk_state      = @get_foreign_key_state()\n    @set_foreign_key_state off\n    #.......................................................................................................\n    for d in from_schema_objects\n      continue if ( not d.sql? ) or ( d.sql is '' )\n      continue if d.name in [ 'sqlite_sequence', ]\n      #.....................................................................................................\n      ### TAINT consider to use `validate.ic_db_object_type` ###\n      unless d.type in [ 'table', 'view', 'index', ]\n        throw new Error \"µ769 unknown type #{rpr d.type} for DB object #{rpr d}\"\n      #.....................................................................................................\n      ### TAINT using not-so reliable string replacement as substitute for proper parsing ###\n      name_x  = @as_identifier d.name\n      sql     = d.sql.replace /\\s*CREATE\\s*(TABLE|INDEX|VIEW)\\s*/i, \"create #{d.type} #{to_schema_x}.\"\n      #.....................................................................................................\n      if sql is d.sql\n        throw new Error \"µ770 unexpected SQL string #{rpr d.sql}\"\n      #.....................................................................................................\n      @execute sql\n      if d.type is 'table'\n        inserts.push \"insert into #{to_schema_x}.#{name_x} select * from #{from_schema_x}.#{name_x};\"\n    #.......................................................................................................\n    @execute sql for sql in inserts\n    @set_foreign_key_state fk_state\n    @pragma \"#{@as_identifier to_schema}.foreign_key_check;\" if fk_state\n    return detach_from_schema()\n\n  #---------------------------------------------------------------------------------------------------------\n  save_as: ( cfg ) ->\n    ### TAINT add boolean `cfg.overwrite` ###\n    schema    = L.pick cfg, 'schema',     'main', 'ic_schema'\n    path      = L.pick cfg, 'path',       null,   'ic_path'\n    overwrite = L.pick cfg, 'overwrite',  false,  'boolean'\n    @_export schema, path, 'sqlitedb', overwrite\n    ### TAINT associate path with schema ###\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  export: ( cfg ) ->\n    ### TAINT add boolean `cfg.overwrite` ###\n    schema    = L.pick cfg, 'schema',     'main', 'ic_schema'\n    path      = L.pick cfg, 'path',       null,   'ic_path'\n    overwrite = L.pick cfg, 'overwrite',  false,  'boolean'\n    format    = @_format_from_path path\n    format    = L.pick cfg, 'format',     format, 'ic_db_file_format'\n    return @_export schema, path, format, overwrite\n\n  #---------------------------------------------------------------------------------------------------------\n  _export: ( schema, path, format, overwrite ) ->\n    ### TAINT add boolean `cfg.overwrite` ###\n    ### TAINT implement `format` ###\n    schema_i  = @as_identifier schema\n    switch format\n      when 'sqlitedb'\n        db.$.run \"vacuum #{schema_i} into ?;\", [ path, ]\n      else throw new Error \"µ47492 unknown format #{rpr format}\"\n    return null\n\n\n  #=========================================================================================================\n  # SQL CONSTRUCTION\n  #---------------------------------------------------------------------------------------------------------\n  as_identifier:  ( x  ) ->\n    validate.text x\n    return '\"' + ( x.replace /\"/g, '\"\"' ) + '\"'\n\n  #---------------------------------------------------------------------------------------------------------\n  escape_text: ( x ) ->\n    validate.text x\n    return x.replace /'/g, \"''\"\n\n  #---------------------------------------------------------------------------------------------------------\n  list_as_json: ( x ) ->\n    validate.list x\n    return JSON.stringify x\n\n  #---------------------------------------------------------------------------------------------------------\n  as_sql: ( x ) ->\n    switch type = type_of x\n      when 'text'     then return \"'#{@escape_text x}'\"\n      when 'list'     then return \"'#{@list_as_json x}'\"\n      when 'float'    then return x.toString()\n      when 'boolean'  then return ( if x then '1' else '0' )\n      when 'null'     then return 'null'\n      when 'undefined'\n        throw new Error \"µ771 unable to express 'undefined' as SQL literal\"\n    throw new Error \"µ772 unable to express a #{type} as SQL literal, got #{rpr x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  interpolate: ( sql, Q ) ->\n    return sql.replace @_interpolation_pattern, ( $0, $1 ) =>\n      try\n        return @as_sql Q[ $1 ]\n      catch error\n        throw new Error \\\n          \"µ773 when trying to express placeholder #{rpr $1} as SQL literal, an error occurred: #{rpr error.message}\"\n  _interpolation_pattern: /// \\$ (?: ( .+? ) \\b | \\{ ( [^}]+ ) \\} ) ///g\n\n\n  #=========================================================================================================\n  # SORTABLE LISTS\n  #---------------------------------------------------------------------------------------------------------\n  as_hollerith:   ( x ) -> HOLLERITH.encode x\n  from_hollerith: ( x ) -> HOLLERITH.decode x\n\n\n"
  ]
}