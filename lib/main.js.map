{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# PATH                      = require 'path'\n# PD                        = require 'pipedreams'\n# { $\n#   $async\n#   select }                = PD\n{ assign\n  jr }                    = CND\n# #...........................................................................................................\n# join_path                 = ( P... ) -> PATH.resolve PATH.join P...\n# boolean_as_int            = ( x ) -> if x then 1 else 0\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nFS                        = require 'fs'\nIC                        = require 'intercourse'\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n\n#===========================================================================================================\n# LOCAL METHODS\n#-----------------------------------------------------------------------------------------------------------\nlocal_methods =\n\n  #---------------------------------------------------------------------------------------------------------\n  limit: ( me, n, iterator ) ->\n    count = 0\n    for x from iterator\n      return if count >= n\n      count += +1\n      yield x\n    return\n\n  #---------------------------------------------------------------------------------------------------------\n  single_row:   ( me, iterator ) ->\n    throw new Error \"µ33833 expected at least one row, got none\" if ( R = @first_row iterator ) is undefined\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  all_first_values: ( me, iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        R.push value\n        break\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_values: ( me, iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        yield value\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_row:    ( me, iterator  ) -> return row for row from iterator\n  ### TAINT must ensure order of keys in row is same as order of fields in query ###\n  single_value: ( me, iterator  ) -> return value for key, value of @single_row iterator\n  first_value:  ( me, iterator  ) -> return value for key, value of @first_row iterator\n  all_rows:     ( me, iterator  ) -> [ iterator..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  query: ( me, sql, P... ) ->\n    statement = @prepare sql\n    return statement.iterate P...\n\n  #---------------------------------------------------------------------------------------------------------\n  run: ( me, sql, P... ) ->\n    statement = @prepare sql\n    return statement.run P...\n\n  #---------------------------------------------------------------------------------------------------------\n  _run_or_query: ( me, entry_type, is_last, sql, Q ) ->\n    statement     = @prepare sql\n    returns_data  = statement.reader\n    #.......................................................................................................\n    ### Always use `run()` method if statement does not return data: ###\n    unless returns_data\n      return if Q? then ( statement.run Q ) else statement.run()\n    #.......................................................................................................\n    ### If statement does return data, consume iterator unless this is the last statement: ###\n    if ( entry_type is 'procedure' ) or ( not is_last )\n      return if Q? then ( statement.all Q ) else statement.all()\n    #.......................................................................................................\n    ### Return iterator: ###\n    return if Q? then ( statement.iterate Q ) else statement.iterate()\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare:        ( me, P...  ) -> me.$.db.prepare          P...\n  aggregate:      ( me, P...  ) -> me.$.db.aggregate        P...\n  backup:         ( me, P...  ) -> me.$.db.backup           P...\n  checkpoint:     ( me, P...  ) -> me.$.db.checkpoint       P...\n  close:          ( me, P...  ) -> me.$.db.close            P...\n  execute:        ( me, P...  ) -> me.$.db.exec             P...\n  read:           ( me, path  ) -> me.$.db.exec FS.readFileSync path, { encoding: 'utf-8', }\n  function:       ( me, P...  ) -> me.$.db.function         P...\n  load:           ( me, P...  ) -> me.$.db.loadExtension    P...\n  pragma:         ( me, P...  ) -> me.$.db.pragma           P...\n  transaction:    ( me, P...  ) -> me.$.db.transaction      P...\n  #.........................................................................................................\n  as_identifier:  ( me, text  ) -> '\"' + ( text.replace /\"/g, '\"\"' ) + '\"'\n  ### TAINT kludge: we sort by descending types so views, tables come before indexes (b/c you can't drop a\n  primary key index in SQLite) ###\n  catalog:        ( me        ) -> @query \"select * from sqlite_master order by type desc, name;\"\n\n  #-----------------------------------------------------------------------------------------------------------\n  type_of: ( me, name ) ->\n    for row from me.$.catalog()\n      return row.type if row.name is name\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  clear: ( me ) ->\n    count = 0\n    for { type, name, } in @all_rows @catalog()\n      statement = \"drop #{type} if exists #{@as_identifier name};\"\n      me.$.execute statement\n      count += +1\n    return count\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@bind = ( settings ) ->\n  throw new Error \"µ94721 need settings.connector\"  unless settings.connector?\n  throw new Error \"µ94721 need settings.db_path\"    unless settings.db_path?\n  throw new Error \"µ94721 need settings.icql_path\"  unless settings.icql_path?\n  me            = { $: {}, }\n  # me.$.settings = assign {}, settings\n  @connect                    me, settings.connector, settings.db_path, settings.db_settings\n  @definitions_from_path_sync me, settings.icql_path\n  @bind_definitions           me\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT should check connector API compatibility ###\n### TAINT consider to use `new`-less call convention (should be possible acc. to bsql3 docs) ###\n@connect = ( me, connector, db_path, db_settings = {} ) ->\n  ( me.$ ?= {} ).db  = new connector db_path, db_settings\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@definitions_from_path_sync = ( me, icql_path ) ->\n  ( me.$ ?= {} ).sql = IC.definitions_from_path_sync icql_path\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@bind_definitions = ( me ) ->\n  check_unique = ( name ) ->\n    throw new Error \"µ11292 name collision: #{rpr name} already defined\" if me[ name ]?\n  me.$ ?= {}\n  #.........................................................................................................\n  for name, local_method of local_methods\n    do ( name, local_method ) ->\n      check_unique name\n      local_method  = local_method.bind me.$\n      method        = ( P... ) ->\n        try\n          local_method me, P...\n        catch error\n          warn \"when trying to call method #{name} with #{xrpr P}\"\n          warn \"an error occurred: #{error.message}\"\n          throw error\n      me.$[ name ]  = method.bind me.$\n  #.........................................................................................................\n  for name, ic_entry of me.$.sql\n    ### TAINT fix in intercourse ###\n    ic_entry.name = name\n    check_unique name\n    me[ name ] = @_method_from_ic_entry me, ic_entry\n  #.........................................................................................................\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@_method_from_ic_entry = ( me, ic_entry ) ->\n  validate.ic_entry_type ic_entry.type\n  #.........................................................................................................\n  return ( Q ) =>\n    descriptor  = @_descriptor_from_arguments me, ic_entry, Q\n    last_idx    = descriptor.parts.length - 1\n    for part, idx in descriptor.parts\n      is_last = idx is last_idx\n      R       = me.$._run_or_query ic_entry.type, is_last, part, Q\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_descriptor_from_arguments = ( me, ic_entry, Q ) ->\n  [ signature, kenning, ]         = IC.get_signature_and_kenning Q\n  is_void_signature               = kenning in [ '()', 'null', ]\n  if is_void_signature  then  R   = ic_entry[ '()'    ] ? ic_entry[ 'null' ]\n  else                        R   = ic_entry[ kenning ]\n  R                              ?= ic_entry[ 'null'  ]\n  #.........................................................................................................\n  unless R?\n    throw new Error \"µ93832 calling method #{rpr ic_entry.name} with signature #{kenning} not implemented\"\n  return R\n\n\n\n\n"
  ]
}