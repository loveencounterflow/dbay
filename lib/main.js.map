{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# PATH                      = require 'path'\n# PD                        = require 'pipedreams'\n# { $\n#   $async\n#   select }                = PD\n{ assign\n  jr }                    = CND\n# #...........................................................................................................\n# join_path                 = ( P... ) -> PATH.resolve PATH.join P...\n# boolean_as_int            = ( x ) -> if x then 1 else 0\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nIC                        = require 'intercourse'\nSqlite_db                 = require 'better-sqlite3'\n\n#-----------------------------------------------------------------------------------------------------------\nlimit = ( n, iterator ) ->\n  count = 0\n  for x from iterator\n    return if count >= n\n    count += +1\n    yield x\n  return\n\n# #-----------------------------------------------------------------------------------------------------------\n# @get_settings = ->\n#   ### TAINT path within node_modules might differ ###\n#   ### TAINT extensions should conceivably be configured in `*.icql` file or similar ###\n#   # R.db_path   = join_path __dirname, '../../db/data.db'\n#   R                 = {}\n#   R.sqlitemk_path   = join_path __dirname, '../../../../sqlite-for-mingkwai-ime'\n#   R.db_path         = join_path __dirname, '../../src/experiments/demo-using-intercourse.db'\n#   R.icql_path       = join_path __dirname, '../../src/experiments/using-intercourse-with-sqlite.icql'\n#   return R\n\n#-----------------------------------------------------------------------------------------------------------\n@bind = ( settings ) ->\n  throw new Error \"µ94721 need settings.db_path\" unless settings.db_path?\n  throw new Error \"µ94721 need settings.icql_path\" unless settings.icql_path?\n  R                 = {}\n  R.settings        = assign {}, settings\n  R.db              = new Sqlite_db R.settings.db_path, R.settings.db_settings ? {}\n  R.sql             = await IC.read_definitions R.settings.icql_path\n  # debug '22233', R.sql; xxx\n  @_bind_definitions R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_bind_definitions = ( me ) ->\n  check_unique = ( name ) ->\n    throw new Error \"µ11292 name collision: #{rpr name} already defined\" if me[ name ]?\n  #.........................................................................................................\n  for name in 'load prepare execute query'.split /\\s+/\n    check_unique name\n    do ( name ) =>\n      me[ name ] = ( P... ) => @[ name ] me, P...\n  #.........................................................................................................\n  for name, ic_entry of me.sql\n    ### TAINT fix in intercourse ###\n    ic_entry.name = name\n    check_unique name\n    me[ name ] = @_method_from_ic_entry me, ic_entry\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_method_from_ic_entry = ( me, ic_entry ) ->\n  endpoint = switch ic_entry.type\n    when 'procedure'  then @execute\n    when 'query'      then @query\n    else throw new Error \"µ11109 unknown icSQL type #{rpr ic_entry.type}\"\n  return ( Q ) =>\n    descriptor = @_descriptor_from_arguments me, ic_entry, Q\n    return endpoint me, descriptor.text, Q if Q?\n    return endpoint me, descriptor.text\n\n#-----------------------------------------------------------------------------------------------------------\n@_descriptor_from_arguments = ( me, ic_entry, Q ) ->\n  if Q?\n    throw new Error \"µ83476 positional arguments not supported\" unless CND.isa_pod Q\n    arity = ( Object.keys Q ).length\n  else\n    arity = 0\n  #.........................................................................................................\n  if arity is 0 then  R  = ic_entry.arity[ 0 ] ? ic_entry.arity[ 'null' ]\n  else                R  = ic_entry.arity[ arity ]\n  R                     ?= ic_entry.arity[ 'null' ]\n  #.........................................................................................................\n  ### TAINT should devise a way to efficiently make sure keys of Q match signature ###\n  # debug '27276', xrpr Q\n  # debug '27276', xrpr R.signature\n  #.........................................................................................................\n  unless R?\n    throw new Error \"µ93832 calling method #{rpr ic_entry.name} with #{arity} arguments not implemented\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@load     = ( me, path      ) => me.db.loadExtension path\n@prepare  = ( me, sql       ) => me.db.prepare sql\n@execute  = ( me, sql       ) => me.db.exec    sql\n@query    = ( me, sql, P... ) => ( @prepare me, sql ).iterate P...\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo = ->\n  settings  = @get_settings()\n  db        = await ICQL.bind settings\n  db.load join_path settings.sqlitemk_path, 'extensions/amatch.so'\n  db.load join_path settings.sqlitemk_path, 'extensions/csv.so'\n  # R.db.exec \"\"\"select load_extension( 'fts5' );\"\"\"\n  db.import_table_texnames()\n  db.create_token_tables()\n  db.populate_token_tables()\n  # # whisper '-'.repeat 108\n  # # info row for row from db.fetch_texnames()\n  whisper '-'.repeat 108\n  urge 'fetch_texnames';        info xrpr row for row from db.fetch_texnames { limit: 100, }\n  # urge 'fetch_rows_of_txftsci'; info xrpr row for row from db.fetch_rows_of_txftsci { limit: 5, }\n  # urge 'fetch_rows_of_txftscs'; info xrpr row for row from db.fetch_rows_of_txftscs { limit: 5, }\n  urge 'fetch_stats'; info xrpr row for row from db.fetch_stats()\n  whisper '-'.repeat 108\n  urge 'fetch_token_matches'\n  whisper '-'.repeat 108\n  info ( xrpr row ) for row from db.fetch_token_matches { q: 'Iota', limit: 10, }\n  whisper '-'.repeat 108\n  info ( xrpr row ) for row from db.fetch_token_matches { q: 'acute', limit: 10, }\n  whisper '-'.repeat 108\n  info ( xrpr row ) for row from db.fetch_token_matches { q: 'u', limit: 10, }\n  whisper '-'.repeat 108\n  info ( xrpr row ) for row from limit 3, db.fetch_token_matches { q: 'mathbb', limit: 10, }\n  # debug ( k for k of iterator )\n  return null\n\n\n\n\n############################################################################################################\nunless module.parent?\n  @demo()\n\n\n\n"
  ]
}