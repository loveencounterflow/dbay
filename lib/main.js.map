{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# PATH                      = require 'path'\n# PD                        = require 'pipedreams'\n# { $\n#   $async\n#   select }                = PD\n{ assign\n  jr }                    = CND\n# #...........................................................................................................\n# join_path                 = ( P... ) -> PATH.resolve PATH.join P...\n# boolean_as_int            = ( x ) -> if x then 1 else 0\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nIC                        = require 'intercourse'\n\n\n#===========================================================================================================\n# LOCAL METHODS\n#-----------------------------------------------------------------------------------------------------------\nlocal_methods =\n\n  #---------------------------------------------------------------------------------------------------------\n  limit: ( me, n, iterator ) ->\n    count = 0\n    for x from iterator\n      return if count >= n\n      count += +1\n      yield x\n    return\n\n  #---------------------------------------------------------------------------------------------------------\n  load:     ( me, path      ) -> me.$.db.loadExtension  path\n  prepare:  ( me, sql       ) -> me.$.db.prepare        sql\n  execute:  ( me, sql       ) -> me.$.db.exec           sql\n  query:    ( me, sql, P... ) -> ( @prepare sql ).iterate P...\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@bind = ( settings ) ->\n  ### TAINT should check connector API compatibility ###\n  throw new Error \"µ94721 need settings.connector\"  unless settings.connector?\n  throw new Error \"µ94721 need settings.db_path\"    unless settings.db_path?\n  throw new Error \"µ94721 need settings.icql_path\"  unless settings.icql_path?\n  R                 = { $: {}, }\n  R.$.settings      = assign {}, settings\n  ### TAINT consider to use `new`-less call convention (should be possible acc. to bsql3 docs) ###\n  R.$.db            = new connector R.$.settings.db_path, R.$.settings.db_settings ? {}\n  R.$.sql           = await IC.read_definitions R.$.settings.icql_path\n  @_bind_definitions R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_bind_definitions = ( me ) ->\n  check_unique = ( name ) ->\n    throw new Error \"µ11292 name collision: #{rpr name} already defined\" if me[ name ]?\n  #.........................................................................................................\n  for name, local_method of local_methods\n    do ( name, local_method ) ->\n      check_unique name\n      local_method = local_method.bind me.$\n      me.$[ name ] = ( ( P... ) -> local_method me, P... ).bind me.$\n  #.........................................................................................................\n  for name, ic_entry of me.$.sql\n    ### TAINT fix in intercourse ###\n    ic_entry.name = name\n    check_unique name\n    me[ name ] = @_method_from_ic_entry me, ic_entry\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_method_from_ic_entry = ( me, ic_entry ) ->\n  endpoint = switch ic_entry.type\n    when 'procedure'  then me.$.execute\n    when 'query'      then me.$.query\n    else throw new Error \"µ11109 unknown icSQL type #{rpr ic_entry.type}\"\n  return ( Q ) =>\n    descriptor = @_descriptor_from_arguments me, ic_entry, Q\n    return endpoint descriptor.text, Q if Q?\n    return endpoint descriptor.text\n\n#-----------------------------------------------------------------------------------------------------------\n@_descriptor_from_arguments = ( me, ic_entry, Q ) ->\n  [ signature, kenning, ]         = IC.get_signature_and_kenning Q\n  is_void_signature               = kenning in [ '()', 'null', ]\n  if is_void_signature  then  R   = ic_entry[ '()'    ] ? ic_entry[ 'null' ]\n  else                        R   = ic_entry[ kenning ]\n  R                              ?= ic_entry[ 'null'  ]\n  #.........................................................................................................\n  unless R?\n    throw new Error \"µ93832 calling method with arguments #{ic_entry.name} with signature #{kenning} not implemented\"\n  return R\n\n\n\n\n"
  ]
}