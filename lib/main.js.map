{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# PATH                      = require 'path'\n# PD                        = require 'pipedreams'\n# { $\n#   $async\n#   select }                = PD\n{ assign\n  jr }                    = CND\n# #...........................................................................................................\n# join_path                 = ( P... ) -> PATH.resolve PATH.join P...\n# boolean_as_int            = ( x ) -> if x then 1 else 0\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nFS                        = require 'fs'\nIC                        = require 'intercourse'\n@HOLLERITH                = HOLLERITH = require 'hollerith-codec'\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = @types\nmax_excerpt_length        = 10000\n\n#===========================================================================================================\n# LOCAL METHODS\n#-----------------------------------------------------------------------------------------------------------\nlocal_methods =\n\n  #---------------------------------------------------------------------------------------------------------\n  _echo: ( me, ref, sql ) ->\n    return null unless @settings.echo\n    echo ( CND.reverse CND.blue \"^icql@888-#{ref}^\" ) + ( CND.reverse CND.yellow sql )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  limit: ( me, n, iterator ) ->\n    count = 0\n    for x from iterator\n      return if count >= n\n      count += +1\n      yield x\n    return\n\n  #---------------------------------------------------------------------------------------------------------\n  single_row:   ( me, iterator ) ->\n    throw new Error \"µ33833 expected at least one row, got none\" if ( R = @first_row iterator ) is undefined\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  all_first_values: ( me, iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        R.push value\n        break\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_values: ( me, iterator ) ->\n    R = []\n    for row from iterator\n      for key, value of row\n        yield value\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  first_row:    ( me, iterator  ) -> return row for row from iterator\n  ### TAINT must ensure order of keys in row is same as order of fields in query ###\n  single_value: ( me, iterator  ) -> return value for key, value of @single_row iterator\n  first_value:  ( me, iterator  ) -> return value for key, value of @first_row iterator\n  all_rows:     ( me, iterator  ) -> [ iterator..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  query: ( me, sql, P... ) ->\n    @_echo '1', sql\n    statement = ( @_statements[ sql ] ?= @db.prepare sql )\n    return statement.iterate P...\n\n  #---------------------------------------------------------------------------------------------------------\n  run: ( me, sql, P... ) ->\n    @_echo '2', sql\n    statement = ( @_statements[ sql ] ?= @db.prepare sql )\n    return statement.run P...\n\n  #---------------------------------------------------------------------------------------------------------\n  _run_or_query: ( me, entry_type, is_last, sql, Q ) ->\n    @_echo '3', sql\n    statement     = ( @_statements[ sql ] ?= @db.prepare sql )\n    returns_data  = statement.reader\n    #.......................................................................................................\n    ### Always use `run()` method if statement does not return data: ###\n    unless returns_data\n      return if Q? then ( statement.run Q ) else statement.run()\n    #.......................................................................................................\n    ### If statement does return data, consume iterator unless this is the last statement: ###\n    if ( entry_type is 'procedure' ) or ( not is_last )\n      return if Q? then ( statement.all Q ) else statement.all()\n    #.......................................................................................................\n    ### Return iterator: ###\n    return if Q? then ( statement.iterate Q ) else statement.iterate()\n\n  #---------------------------------------------------------------------------------------------------------\n  execute: ( me, sql  ) ->\n    @_echo '4', sql\n    return @db.exec sql\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare:        ( me, P...  ) -> @db.prepare          P...\n  aggregate:      ( me, P...  ) -> @db.aggregate        P...\n  backup:         ( me, P...  ) -> @db.backup           P...\n  checkpoint:     ( me, P...  ) -> @db.checkpoint       P...\n  close:          ( me, P...  ) -> @db.close            P...\n  read:           ( me, path  ) -> @db.exec FS.readFileSync path, { encoding: 'utf-8', }\n  function:       ( me, P...  ) -> @db.function         P...\n  load:           ( me, P...  ) -> @db.loadExtension    P...\n  pragma:         ( me, P...  ) -> @db.pragma           P...\n  transaction:    ( me, P...  ) -> @db.transaction      P...\n\n  #---------------------------------------------------------------------------------------------------------\n  catalog: ( me ) ->\n    ### TAINT kludge: we sort by descending types so views, tables come before indexes (b/c you can't drop a\n    primary key index in SQLite) ###\n    # throw new Error \"µ45222 deprecated until next major version\"\n    @query \"select * from sqlite_master order by type desc, name;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  list_objects: ( me, schema = 'main' ) ->\n    validate.ic_schema schema\n    return @all_rows @query \"\"\"\n      select\n          type      as type,\n          name      as name,\n          sql       as sql\n        from #{@as_identifier schema}.sqlite_master\n        order by type desc, name;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  list_schemas: ( me ) -> @pragma \"database_list;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT must escape path, schema ###\n  attach: ( me, path, schema ) ->\n    validate.ic_path path\n    validate.ic_schema schema\n    return @execute \"attach #{@as_sql path} as #{@as_identifier schema};\"\n\n  #-----------------------------------------------------------------------------------------------------------\n  copy_schema: ( me, from_schema, to_schema ) ->\n    # debug '^3334^', ( k for k of me )\n    # debug '^3334^', ( k for k of me.$.db )\n    # urge '^64656^', @get_toposort()\n    # me.$.db.exec \"create table #{to_schema}.a ( n integer );\"\n    # urge '^64656^', \"get_toposort 'main'\", @get_toposort 'main'\n    # urge '^64656^', \"get_toposort to_schema\", @get_toposort to_schema\n    # urge '^64656^', @all_rows @catalog()\n    # help '^64656^', @all_rows @list_objects 'main'\n    # help '^64656^', @all_rows @list_objects to_schema\n    # urge '^64656^', @all_rows @list_schemas()\n    # info '^67888^', @all_rows @query \"select * from #{to_schema}.a;\"\n    # info '^67888^', @all_rows @query \"select * from #{to_schema}.sqlite_schema;\"\n    # debug '^55833^', { from_schema, }, @list_objects from_schema\n    # debug '^55833^', { to_schema,   }, @list_objects to_schema\n    @pragma \"#{@as_identifier to_schema}.foreign_keys = off;\"\n    to_schema_x   = @as_identifier to_schema\n    from_schema_x = @as_identifier from_schema\n    for d in @list_objects from_schema\n      continue if ( not d.sql? ) or ( d.sql is '' )\n      name_x  = @as_identifier d.name\n      sql     = d.sql.replace /\\s*CREATE\\s*(TABLE|INDEX)\\s*/i, \"create table #{to_schema_x}.\"\n      @execute sql\n      if d.type is 'table'\n        sql     = \"insert into #{to_schema_x}.#{name_x} select * from #{from_schema_x}.#{name_x};\"\n        @execute sql\n    # me.$.db.\n    @pragma \"#{@as_identifier to_schema}.foreign_keys = on;\"\n    @pragma \"#{@as_identifier to_schema}.foreign_key_check;\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  type_of: ( me, name, schema = 'main' ) ->\n    for row from @catalog()\n      return row.type if row.name is name\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  column_types: ( me, table ) ->\n    R = {}\n    ### TAINT we apparently have to call the pragma in this roundabout fashion since SQLite refuses to\n    accept placeholders in that statement: ###\n    for row from @query @interpolate \"pragma table_info( $table );\", { table, }\n      R[ row.name ] = row.type\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _dependencies_of: ( me, table, schema = 'main' ) ->\n    return @query \"pragma #{@as_identifier schema}.foreign_key_list( #{@as_identifier table} )\"\n\n  #---------------------------------------------------------------------------------------------------------\n  dependencies_of:  ( me, table, schema = 'main' ) ->\n    validate.ic_schema schema\n    return ( row.table for row from @_dependencies_of table )\n\n  #---------------------------------------------------------------------------------------------------------\n  get_toposort: ( me, schema = 'main' ) ->\n    LTSORT  = require 'ltsort'\n    g       = LTSORT.new_graph()\n    indexes = []\n    types   = {}\n    for x from @list_objects schema\n      types[ x.name ] = x.type\n      unless x.type is 'table'\n        indexes.push x.name\n        continue\n      dependencies = @dependencies_of x.name\n      if dependencies.length is 0\n        LTSORT.add g, x.name\n      else\n        for dependency in dependencies\n          LTSORT.add g, x.name, dependency\n    R = [ ( LTSORT.linearize g )..., indexes..., ]\n    return ( { name, type: types[ name ], } for name in R )\n\n  #---------------------------------------------------------------------------------------------------------\n  clear: ( me ) ->\n    count = 0\n    for { type, name, } in @get_toposort()\n      statement = \"drop #{type} if exists #{@as_identifier name};\"\n      @execute statement\n      count += +1\n    return count\n\n  #---------------------------------------------------------------------------------------------------------\n  as_identifier:  ( me, text  ) -> '\"' + ( text.replace /\"/g, '\"\"' ) + '\"'\n\n  #---------------------------------------------------------------------------------------------------------\n  escape_text: ( me, x ) ->\n    validate.text x\n    x.replace /'/g, \"''\"\n\n  #---------------------------------------------------------------------------------------------------------\n  list_as_json: ( me, x ) ->\n    validate.list x\n    return jr x\n\n  #---------------------------------------------------------------------------------------------------------\n  as_sql: ( me, x ) ->\n    switch type = type_of x\n      when 'text'     then return \"'#{@escape_text x}'\"\n      when 'list'     then return \"'#{@list_as_json x}'\"\n      when 'float'    then return x.toString()\n      when 'boolean'  then return ( if x then '1' else '0' )\n      when 'null'     then return 'null'\n      when 'undefined'\n        throw new Error \"µ12341 unable to express 'undefined' as SQL literal\"\n    throw new Error \"µ12342 unable to express a #{type} as SQL literal, got #{rpr x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  interpolate: ( me, sql, Q ) ->\n    return sql.replace @_interpolation_pattern, ( $0, $1 ) =>\n      try\n        return @as_sql Q[ $1 ]\n      catch error\n        throw new Error \\\n          \"µ55563 when trying to express placeholder #{rpr $1} as SQL literal, an error occurred: #{rpr error.message}\"\n  _interpolation_pattern: /// \\$ (?: ( .+? ) \\b | \\{ ( [^}]+ ) \\} ) ///g\n\n  #---------------------------------------------------------------------------------------------------------\n  as_hollerith:   ( me, x ) -> HOLLERITH.encode x\n  from_hollerith: ( me, x ) -> HOLLERITH.decode x\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@bind = ( settings ) ->\n  validate.icql_settings settings\n  me            = { $: { _statements: {}, settings, }, }\n  connector     = settings.connector ? require 'better-sqlite3'\n  me.icql_path  = settings.icql_path\n  @connect                    me, connector, settings.db_path, settings.db_settings\n  @definitions_from_path_sync me, settings.icql_path\n  @bind_definitions           me\n  @bind_udfs                  me\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT should check connector API compatibility ###\n### TAINT consider to use `new`-less call convention (should be possible acc. to bsql3 docs) ###\n@connect = ( me, connector, db_path, db_settings = {} ) ->\n  me.$     ?= {}\n  me.$.db   = new connector db_path, db_settings\n  # me.$.dbr  = me.$.db\n  # me.$.dbw  = new connector db_path, db_settings\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@definitions_from_path_sync = ( me, icql_path ) ->\n  ( me.$ ?= {} ).sql = IC.definitions_from_path_sync icql_path\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@bind_definitions = ( me ) ->\n  check_unique = ( name ) ->\n    throw new Error \"µ11292 name collision: #{rpr name} already defined\" if me[ name ]?\n  me.$ ?= {}\n  #.........................................................................................................\n  for name, local_method of local_methods\n    do ( name, local_method ) ->\n      check_unique name\n      if ( isa.function local_method )\n        local_method  = local_method.bind me.$\n        method = ( P... ) ->\n          try\n            local_method me, P...\n          catch error\n            excerpt = rpr P\n            if excerpt.length > max_excerpt_length\n              x       = max_excerpt_length / 2\n              excerpt = excerpt[ .. x ] + ' ... ' + excerpt[ excerpt.length - x .. ]\n            warn \"^icql#15543^ when trying to call method #{name} with #{excerpt}\"\n            warn \"^icql#15544^ an error occurred: #{error.name ? error.code}: #{error.message}\"\n            throw error\n        me.$[ name ]  = method.bind me.$\n      else\n        me.$[ name ]  = local_method\n  #.........................................................................................................\n  for name, ic_entry of me.$.sql\n    ### TAINT fix in intercourse ###\n    ic_entry.name = name\n    check_unique name\n    me[ name ] = @_method_from_ic_entry me, ic_entry\n  #.........................................................................................................\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@bind_udfs = ( me ) ->\n  me.$.function 'as_hollerith',   { deterministic: true, varargs: false }, ( x ) => HOLLERITH.encode x\n  me.$.function 'from_hollerith', { deterministic: true, varargs: false }, ( x ) => HOLLERITH.decode x\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@_method_from_ic_entry = ( me, ic_entry ) ->\n  validate.ic_entry_type ic_entry.type\n  #.........................................................................................................\n  if ic_entry.type is 'fragment' then return ( Q ) =>\n    descriptor  = @_descriptor_from_arguments me, ic_entry, Q\n    sql         = descriptor.parts.join '\\n'\n    return me.$.interpolate sql, Q\n  #.........................................................................................................\n  return ( Q ) =>\n    descriptor  = @_descriptor_from_arguments me, ic_entry, Q\n    last_idx    = descriptor.parts.length - 1\n    try\n      for part, idx in descriptor.parts\n        is_last = idx is last_idx\n        R       = me.$._run_or_query ic_entry.type, is_last, part, Q\n    catch error\n      name      = ic_entry.name\n      type      = ic_entry.type\n      kenning   = descriptor.kenning\n      line_nr   = descriptor.location.line_nr\n      location  = \"line #{line_nr}, #{type} #{name}#{kenning}\"\n      throw new Error \"µ11123 At *.icql #{location}: #{error.message}\"\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_descriptor_from_arguments = ( me, ic_entry, Q ) ->\n  [ signature, kenning, ]         = IC.get_signature_and_kenning Q\n  is_void_signature               = kenning in [ '()', 'null', ]\n  if is_void_signature  then  R   = ic_entry[ '()'    ] ? ic_entry[ 'null' ]\n  else                        R   = ic_entry[ kenning ]\n  R                              ?= ic_entry[ 'null'  ]\n  #.........................................................................................................\n  unless R?\n    throw new Error \"µ93832 calling method #{rpr ic_entry.name} with signature #{kenning} not implemented\"\n  return R\n\n\n\n\n"
  ]
}