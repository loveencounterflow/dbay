{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require '../../../apps/guy'\n# E                         = require './errors'\n\ntypes.declare 'dba_urlsafe_word', tests:\n  \"@isa.nonempty_text x\":                 ( x ) -> @isa.nonempty_text x\n  \"/^[a-zA-Z0-9_]+$/.test x\":             ( x ) -> /^[a-zA-Z0-9_]+$/.test x\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa_optional.boolean x.ram\":              ( x ) -> @isa_optional.boolean x.ram\n  \"@isa_optional.nonempty_text x.url\":        ( x ) -> @isa_optional.nonempty_text x.url\n  \"@isa_optional.dba_urlsafe_word x.dbnick\":  ( x ) -> @isa_optional.dba_urlsafe_word x.dbnick\n  \"@isa_optional.dba_urlsafe_word x.dbnick\":  ( x ) -> @isa_optional.dba_urlsafe_word x.dbnick\n\nclass @Dbay\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: guy.lft.freeze\n    defaults:\n      constructor_cfg:\n        _temp_prefix: '_dba_temp_'\n        readonly:     false\n        create:       true\n        overwrite:    false\n        timeout:      5000\n        #...................................................................................................\n        ram:        false\n        path:       null\n        dbnick:     null\n\n  #---------------------------------------------------------------------------------------------------------\n  @cast_constructor_cfg: ( self ) ->\n    if ( self.cfg.ram is false ) and ( not self.cfg.path? )\n      throw new E.Dba_cfg_error '^dba@1^', \"missing argument `path`, got #{rpr self.cfg}\"\n    self.cfg.ram ?= not self.cfg.path?\n    if ( not self.cfg.ram ) and self.cfg.path? and self.cfg.dbnick?\n      throw new E.Dba_cfg_error '^dba@1^', \"only RAM DB can have both `path` and `dbnick`, got #{rpr self.cfg}\"\n    if self.cfg.ram\n      { dbnick\n        url    }        = _xxx_dba._get_connection_url self.cfg.dbnick ? null\n      self.cfg.dbnick  ?= dbnick\n      self.cfg.url      = url\n    else\n      self.cfg.url      = null\n    return self.cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  @declare_types: ( self ) ->\n    # debug '^133^', self.cfg, Object.isFrozen self.cfg\n    self.cfg = @cast_constructor_cfg self\n    self.types.validate.constructor_cfg self.cfg\n    # guy.props.def self, 'dba', { enumerable: false, value: self.cfg.dba, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    # super()\n    guy.cfg.configure_with_types @, cfg, types\n    # @_compile_sql()\n    # @_create_sql_functions()\n    # @_create_db_structure()\n    return undefined\n\n\n"
  ]
}