{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require 'guy'\nE                         = require './errors'\nnew_bsqlt3_connection     = require 'better-sqlite3'\nH                         = require './helpers'\n\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa_optional.nonempty_text x.location\":   ( x ) -> @isa_optional.nonempty_text x.location\n  \"@isa_optional.nonempty_text x.name\":       ( x ) -> @isa_optional.nonempty_text x.name\n  \"@isa_optional.nonempty_text x.path\":       ( x ) -> @isa_optional.nonempty_text x.path\n  \"@isa_optional.boolean x.temporary\":        ( x ) -> @isa_optional.boolean x.temporary\n\n\n\n#===========================================================================================================\nclass @Dbay extends H.Dbay_rnd\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: guy.lft.freeze\n    autolocation: H.autolocation\n    defaults:\n      constructor_cfg:\n        # _temp_prefix: '_dba_temp_'\n        readonly:     false\n        create:       true\n        timeout:      5000\n        #...................................................................................................\n        overwrite:    false\n        path:         null\n\n  #---------------------------------------------------------------------------------------------------------\n  @cast_sqlt_cfg: ( self ) ->\n    R                = guy.obj.pluck_with_fallback self.cfg, null, 'readonly', 'timeout'\n    R.fileMustExist  = not self.cfg.create; delete self.cfg.create\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  @cast_constructor_cfg: ( self ) ->\n    # debug '^344476^', self.cfg\n    clasz           = self.constructor\n    cfg             = self.cfg\n    #.......................................................................................................\n    if cfg.path?\n      cfg.temporary  ?= false\n      cfg.path        = PATH.resolve cfg.path\n    else\n      cfg.temporary  ?= true\n      filename        = self._get_random_filename()\n      cfg.path        = PATH.resolve PATH.join clasz.C.autolocation, filename\n    if cfg.temporary\n      guy.process.on_exit ->\n        try\n          FS.unlinkSync cfg.path\n        catch error\n          warn '^dbay@1^', error.message unless error.code is 'ENOENT'\n        return null\n    self.sqlt_cfg   = guy.lft.freeze guy.obj.omit_nullish @cast_sqlt_cfg self\n    self.cfg        = guy.lft.freeze guy.obj.omit_nullish cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  @declare_types: ( self ) ->\n    @cast_constructor_cfg self\n    # self.types.validate.constructor_cfg self.cfg\n    # # guy.props.def self, 'dba', { enumerable: false, value: self.cfg.dba, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_bsqlt3_connection: ->\n    path_or_url = if @cfg.ram then @cfg.url else @cfg.path\n    return new_bsqlt3_connection path_or_url, @sqlt_cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    cfg             = { cfg..., }\n    # @_signature     = H.get_cfg_signature cfg\n    guy.cfg.configure_with_types @, cfg, types\n    debug '^344476^', @cfg\n    unless @constructor._skip_sqlt\n      guy.props.def @, 'sqlt1', { enumerable: false, value: @_new_bsqlt3_connection(), }\n      guy.props.def @, 'sqlt2', { enumerable: false, value: @_new_bsqlt3_connection(), }\n    # delete @_signature\n    # @_compile_sql()\n    # @_create_sql_functions()\n    # @_create_db_structure()\n    return undefined\n\n\n"
  ]
}