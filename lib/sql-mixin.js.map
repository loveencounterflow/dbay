{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sql-mixin.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAZ5B;;;EAcA,CAAA,GAA4B,OAAA,CAAQ,UAAR,EAd5B;;;EAiBA,IAAC,CAAA,SAAD,GAAa,CAAE,QAAQ,MAAV,CAAA,GAAA;;;;eAAsB,MAAA,QAAc,MAAd,CAAA;;;;QAKjC,aAAgB,CAAE,CAAF,CAAA;UACd,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,IAAhB,CAAqB,CAArB;AACA,iBAAO,GAAA,GAAM,CAAE,CAAC,CAAC,OAAF,CAAU,IAAV,EAAgB,IAAhB,CAAF,CAAN,GAAiC;QAF1B,CAHlB;;;QAQE,WAAa,CAAE,CAAF,CAAA;UACX,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,IAAhB,CAAqB,CAArB;AACA,iBAAO,CAAC,CAAC,OAAF,CAAU,IAAV,EAAgB,IAAhB;QAFI,CARf;;;QAaE,YAAc,CAAE,CAAF,CAAA;UACZ,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,IAAhB,CAAqB,CAArB;AACA,iBAAO,IAAI,CAAC,SAAL,CAAe,CAAf;QAFK,CAbhB;;;QAkBE,MAAQ,CAAE,CAAF,CAAA;AACV,cAAA;AAAI,kBAAO,IAAA,GAAO,IAAC,CAAA,KAAK,CAAC,OAAP,CAAe,CAAf,CAAd;AAAA,iBACO,MADP;AACyB,qBAAO,CAAA,CAAA,CAAA,CAAI,IAAC,CAAA,WAAD,CAAa,CAAb,CAAJ,CAAA,CAAA;AADhC,iBAEO,MAFP;AAEyB,qBAAO,CAAA,CAAA,CAAA,CAAI,IAAC,CAAA,YAAD,CAAc,CAAd,CAAJ,CAAA,CAAA;AAFhC,iBAGO,OAHP;AAGyB,qBAAO,CAAC,CAAC,QAAF,CAAA;AAHhC,iBAIO,SAJP;AAIyB,qBAAO,CAAK,CAAH,GAAU,GAAV,GAAmB,GAArB;AAJhC,iBAKO,MALP;AAKyB,qBAAO;AALhC;UAMA,MAAM,IAAI,CAAC,CAAC,mBAAN,CAA0B,WAA1B,EAAuC,IAAvC,EAA6C,CAA7C;QAPA,CAlBV;;;QA4BE,WAAa,CAAE,GAAF,EAAO,CAAP,CAAA;iBAAc,GAAG,CAAC,OAAJ,CAAY,IAAC,CAAA,sBAAb,EAAqC,CAAE,EAAF,EAAM,EAAN,CAAA,GAAA;mBAAc,IAAC,CAAA,MAAD,CAAQ,CAAC,CAAE,EAAF,CAAT;UAAd,CAArC;QAAd;;MA9BoB;;;;;;;uBAoCjC,sBAAA,GAAwB;;;;;EApCb;AAjBb",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/SQL-MIXIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nE                         = require './errors'\n\n#-----------------------------------------------------------------------------------------------------------\n@Sql_mixin = ( clasz = Object ) => class extends clasz\n\n  #=========================================================================================================\n  # SQL CONSTRUCTION\n  #---------------------------------------------------------------------------------------------------------\n  as_identifier:  ( x  ) ->\n    @types.validate.text x\n    return '\"' + ( x.replace /\"/g, '\"\"' ) + '\"'\n\n  #---------------------------------------------------------------------------------------------------------\n  escape_text: ( x ) ->\n    @types.validate.text x\n    return x.replace /'/g, \"''\"\n\n  #---------------------------------------------------------------------------------------------------------\n  list_as_json: ( x ) ->\n    @types.validate.list x\n    return JSON.stringify x\n\n  #---------------------------------------------------------------------------------------------------------\n  as_sql: ( x ) ->\n    switch type = @types.type_of x\n      when 'text'       then return \"'#{@escape_text x}'\"\n      when 'list'       then return \"'#{@list_as_json x}'\"\n      when 'float'      then return x.toString()\n      when 'boolean'    then return ( if x then '1' else '0' )\n      when 'null'       then return 'null'\n    throw new E.Dba_sql_value_error '^dba@323^', type, x\n\n  #---------------------------------------------------------------------------------------------------------\n  interpolate: ( sql, Q ) -> sql.replace @_interpolation_pattern, ( $0, $1 ) => @as_sql Q[ $1 ]\n      # try\n      #   return @as_sql Q[ $1 ]\n      # catch error\n      #   throw new E.Dba_error \\\n      #     \"Âµ773 when trying to express placeholder #{rpr $1} as SQL literal, an error occurred: #{rpr error.message}\"\n  _interpolation_pattern: /// \\$ (?: ( .+? ) \\b | \\{ ( [^}]+ ) \\} ) ///g\n\n"
  ]
}