{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ctx-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nE                         = require './errors'\nSQL                       = String.raw\nGUY                       = require 'guy'\n\n\n#===========================================================================================================\n# CHECK, GETS, SETS\n#-----------------------------------------------------------------------------------------------------------\n@DBay_ctx = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  _$ctx_initialize: ->\n    @_me.state = GUY.lft.lets @_me.state, ( d ) -> d.in_unsafe_mode = false\n    return null\n\n  #=========================================================================================================\n  # JOURNAL MODE\n  #---------------------------------------------------------------------------------------------------------\n  get_journal_mode: -> ( @pragma \"journal_mode;\" )[ 0 ].journal_mode\n\n  #---------------------------------------------------------------------------------------------------------\n  set_journal_mode: ( journal_mode ) ->\n    @types.validate.dbay_journal_mode journal_mode\n    @pragma \"journal_mode = #{journal_mode};\"\n    return null\n\n  #=========================================================================================================\n  # FOREIGN KEYS MODE, DEFERRED\n  #---------------------------------------------------------------------------------------------------------\n  get_foreign_keys_state: -> not not ( @pragma \"foreign_keys;\" )[ 0 ].foreign_keys\n\n  #---------------------------------------------------------------------------------------------------------\n  set_foreign_keys_state: ( onoff ) ->\n    @types.validate.boolean onoff\n    @pragma \"foreign_keys = #{onoff};\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT add schema, table_name; currently only works for main(?) ###\n  check_foreign_keys: -> @pragma SQL\"foreign_key_check;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  set_foreign_keys_deferred: ( onoff ) -> @types.validate.boolean onoff; @pragma SQL\"defer_foreign_keys=#{onoff};\"\n  get_foreign_keys_deferred: -> not not ( @pragma SQL\"defer_foreign_keys;\" )?[ 0 ]?.defer_foreign_keys\n\n  #=========================================================================================================\n  # UNSAFE MODE\n  #---------------------------------------------------------------------------------------------------------\n  get_unsafe_mode: -> @state.in_unsafe_mode\n\n  #---------------------------------------------------------------------------------------------------------\n  set_unsafe_mode: ( onoff ) ->\n    @types.validate.boolean onoff\n    @sqlt1.unsafeMode onoff\n    @state = GUY.lft.lets @state, ( d ) -> d.in_unsafe_mode = onoff\n    return null\n\n\n  #=========================================================================================================\n  # TRANSACTIONS\n  #---------------------------------------------------------------------------------------------------------\n  within_transaction:   -> @sqlt1.inTransaction\n  begin_transaction:    -> @sqlt1.exec \"begin;\"\n  commit_transaction:   -> @sqlt1.exec \"commit;\"\n  rollback_transaction: -> @sqlt1.exec \"rollback;\"\n\n\n  #=========================================================================================================\n  # INTEGRITY\n  #---------------------------------------------------------------------------------------------------------\n  check_integrity:    -> @pragma SQL\"integrity_check;\"\n  check_quick:        -> @pragma SQL\"quick_check;\"\n\n\n  #=========================================================================================================\n  # CONTEXT HANDLERS\n  #---------------------------------------------------------------------------------------------------------\n  with_transaction: ( cfg, f ) ->\n    switch arity = arguments.length\n      when 1 then [ cfg, f, ] = [ null, cfg, ]\n      when 2 then null\n      else throw new E.DBay_wrong_arity '^dbay/ctx@4^', 'with_transaction()', 1, 2, arity\n    @types.validate.dbay_with_transaction_cfg ( cfg = { @constructor.C.defaults.dbay_with_transaction_cfg..., cfg..., } )\n    @types.validate.function f\n    throw new E.DBay_no_nested_transactions '^dbay/ctx@5^' if @sqlt1.inTransaction\n    @execute SQL\"begin #{cfg.mode} transaction;\"\n    error = null\n    try\n      R = f()\n    catch error\n      @execute SQL\"rollback;\" if @sqlt1.inTransaction\n      throw error\n    try\n      @execute SQL\"commit;\"   if @sqlt1.inTransaction\n    catch error\n      @execute SQL\"rollback;\" if @sqlt1.inTransaction\n      # try @execute SQL\"rollback;\" if @sqlt1.inTransaction catch error then null\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  with_unsafe_mode: ( f ) ->\n    @types.validate.function f\n    unsafe_mode_state = @get_unsafe_mode()\n    @set_unsafe_mode true\n    try\n      R = f()\n    finally\n      @set_unsafe_mode unsafe_mode_state\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  with_foreign_keys_deferred: ( f ) ->\n    @types.validate.function f\n    R = null\n    throw new E.DBay_no_deferred_fks_in_tx '^dbay/ctx@6^' if @sqlt1.inTransaction\n    @with_transaction =>\n      @sqlt1.pragma SQL\"defer_foreign_keys=true\"\n      R = f()\n    return R\n\n\n  #=========================================================================================================\n  # SHADOW DB FOR CONCURRENT WRITES\n  #---------------------------------------------------------------------------------------------------------\n  with_shadow: ( db, handler ) ->\n    original_path = db.cfg.path\n    GUY.temp.with_shadow_file { path: original_path, all: true, }, ({ path, }) =>\n      handler { db: ( new @constructor { path, } ), }\n      db.destroy()\n    return new @constructor { path: original_path, }\n\n  #---------------------------------------------------------------------------------------------------------\n  with_concurrent: ( cfg ) ->\n    return switch cfg.mode\n      when 'reader' then @with_concurrent_reader cfg\n      when 'shadow' then @with_concurrent_shadow cfg\n      else throw new E.DBay_internal_error '^dbay/main@1^', \"mode #{rpr cfg.mode} not implement\"\n\n  #---------------------------------------------------------------------------------------------------------\n  with_concurrent_reader: ( cfg ) ->\n    for d in @all_rows cfg.reader\n      cfg.writer @, d\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  with_concurrent_shadow: ( cfg ) ->\n    return @with_shadow read_db = @, ({ db: write_db, }) ->\n      write_db ->\n        for d from read_db cfg.reader\n          cfg.writer write_db, d\n        return null\n      return null\n\n\n\n"
  ]
}