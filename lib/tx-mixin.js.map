{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/tx-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY/MIXIN/TX'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nE                         = require './errors'\nSQL                       = String.raw\n{ lets\n  freeze }                = require 'letsfreezethat'\n\n\n#===========================================================================================================\n# CHECK, GETS, SETS\n#-----------------------------------------------------------------------------------------------------------\n@Dbay_tx = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  # _$tx_initialize: ->\n\n  #=========================================================================================================\n  # FOREIGN KEYS MODE, DEFERRED\n  #---------------------------------------------------------------------------------------------------------\n  get_foreign_keys_state: -> not not ( @pragma \"foreign_keys;\" )[ 0 ].foreign_keys\n\n  #---------------------------------------------------------------------------------------------------------\n  set_foreign_keys_state: ( onoff ) ->\n    @types.validate.boolean onoff\n    @pragma \"foreign_keys = #{onoff};\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT add schema, table_name; currently only works for main(?) ###\n  check_foreign_keys: -> @pragma SQL\"foreign_key_check;\"\n\n  #---------------------------------------------------------------------------------------------------------\n  set_foreign_keys_deferred: ( onoff ) -> @types.validate.boolean onoff; @pragma SQL\"defer_foreign_keys=#{onoff};\"\n  get_foreign_keys_deferred: -> not not ( @pragma SQL\"defer_foreign_keys;\" )?[ 0 ]?.defer_foreign_keys\n\n  #=========================================================================================================\n  # UNSAFE MODE\n  #---------------------------------------------------------------------------------------------------------\n  get_unsafe_mode: -> @_state.in_unsafe_mode\n\n  #---------------------------------------------------------------------------------------------------------\n  set_unsafe_mode: ( onoff ) ->\n    @types.validate.boolean onoff\n    @sqlt.unsafeMode onoff\n    @_state = lets @_state, ( d ) -> d.in_unsafe_mode = onoff\n    return null\n\n\n  #=========================================================================================================\n  # TRANSACTIONS\n  #---------------------------------------------------------------------------------------------------------\n  within_transaction:   -> @sqlt.inTransaction\n  begin_transaction:    -> throw new E.Dbay_not_implemented '^dbay/tx@1^', \"tx_begin\"\n  commit_transaction:   -> throw new E.Dbay_not_implemented '^dbay/tx@1^', \"tx_commit\"\n  rollback_transaction: -> throw new E.Dbay_not_implemented '^dbay/tx@1^', \"tx_rollback\"\n\n\n  #=========================================================================================================\n  # INTEGRITY\n  #---------------------------------------------------------------------------------------------------------\n  check_integrity:    -> @pragma SQL\"integrity_check;\"\n  check_quick:        -> @pragma SQL\"quick_check;\"\n\n\n\n"
  ]
}