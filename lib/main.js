// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, IC, Sqlite_db, assign, badge, debug, echo, help, info, inspect, jr, local_methods, rpr, urge, warn, whisper, xrpr;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'ICQL/MAIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  // PATH                      = require 'path'
  // PD                        = require 'pipedreams'
  // { $
  //   $async
  //   select }                = PD
  ({assign, jr} = CND);

  // #...........................................................................................................
  // join_path                 = ( P... ) -> PATH.resolve PATH.join P...
  // boolean_as_int            = ( x ) -> if x then 1 else 0
  ({inspect} = require('util'));

  xrpr = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 2e308,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  //...........................................................................................................
  IC = require('intercourse');

  Sqlite_db = require('better-sqlite3');

  //===========================================================================================================
  // LOCAL METHODS
  //-----------------------------------------------------------------------------------------------------------
  local_methods = {
    //---------------------------------------------------------------------------------------------------------
    limit: function*(me, n, iterator) {
      var count, x;
      count = 0;
      for (x of iterator) {
        if (count >= n) {
          return;
        }
        count += +1;
        yield x;
      }
    },
    //---------------------------------------------------------------------------------------------------------
    load: function(me, path) {
      return me.$.db.loadExtension(path);
    },
    prepare: function(me, sql) {
      return me.$.db.prepare(sql);
    },
    execute: function(me, sql) {
      return me.$.db.exec(sql);
    },
    query: function(me, sql, ...P) {
      return (this.prepare(sql)).iterate(...P);
    }
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.bind = async function(settings) {
    var R, ref;
    if (settings.db_path == null) {
      throw new Error("µ94721 need settings.db_path");
    }
    if (settings.icql_path == null) {
      throw new Error("µ94721 need settings.icql_path");
    }
    R = {
      $: {}
    };
    R.$.settings = assign({}, settings);
    R.$.db = new Sqlite_db(R.$.settings.db_path, (ref = R.$.settings.db_settings) != null ? ref : {});
    R.$.sql = (await IC.read_definitions(R.$.settings.icql_path));
    this._bind_definitions(R);
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._bind_definitions = function(me) {
    var check_unique, ic_entry, local_method, name, ref;
    check_unique = function(name) {
      if (me[name] != null) {
        throw new Error(`µ11292 name collision: ${rpr(name)} already defined`);
      }
    };
//.........................................................................................................
    for (name in local_methods) {
      local_method = local_methods[name];
      (function(name, local_method) {
        check_unique(name);
        local_method = local_method.bind(me.$);
        return me.$[name] = (function(...P) {
          return local_method(me, ...P);
        }).bind(me.$);
      })(name, local_method);
    }
    ref = me.$.sql;
    //.........................................................................................................
    for (name in ref) {
      ic_entry = ref[name];
      /* TAINT fix in intercourse */
      ic_entry.name = name;
      check_unique(name);
      me[name] = this._method_from_ic_entry(me, ic_entry);
    }
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._method_from_ic_entry = function(me, ic_entry) {
    var endpoint;
    endpoint = (function() {
      switch (ic_entry.type) {
        case 'procedure':
          return me.$.execute;
        case 'query':
          return me.$.query;
        default:
          throw new Error(`µ11109 unknown icSQL type ${rpr(ic_entry.type)}`);
      }
    })();
    return (Q) => {
      var descriptor;
      descriptor = this._descriptor_from_arguments(me, ic_entry, Q);
      if (Q != null) {
        return endpoint(descriptor.text, Q);
      }
      return endpoint(descriptor.text);
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  this._descriptor_from_arguments = function(me, ic_entry, Q) {
    var R, is_void_signature, kenning, ref, signature;
    [signature, kenning] = IC.get_signature_and_kenning(Q);
    is_void_signature = kenning === '()' || kenning === 'null';
    if (is_void_signature) {
      R = (ref = ic_entry['()']) != null ? ref : ic_entry['null'];
    } else {
      R = ic_entry[kenning];
    }
    if (R == null) {
      R = ic_entry['null'];
    }
    //.........................................................................................................
    if (R == null) {
      throw new Error(`µ93832 calling method with arguments ${ic_entry.name} with signature ${kenning} not implemented`);
    }
    return R;
  };

}).call(this);

//# sourceMappingURL=main.js.map
