{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/import-export-mixin.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAZ5B;;;EAcA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,CAAA,CAAE,MAAF,CAAA,GAA4B,OAAA,CAAQ,UAAR,CAA5B,EAhBA;;;EAmBA,IAAC,CAAA,mBAAD,GAAuB,CAAE,QAAQ,MAAV,CAAA,GAAA;WAAsB,MAAA,QAAc,MAAd,CAAA;;MAG3C,MAAQ,CAAE,GAAF,CAAA;QACN,GAAA,GAAc,CAAE,GAAA,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,cAAlB,EAAqC,GAAA,GAArC;;UACd,GAAG,CAAC,SAAU,IAAC,CAAA,iBAAD,CAAmB,GAAG,CAAC,IAAvB;;QACd,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,cAAhB,CAA+B,GAA/B;AACA,gBAAO,GAAG,CAAC,MAAX;AAAA,eACO,IADP;YACmB,IAAC,CAAA,UAAD,CAAa,GAAb;AAAZ;AADP,eAEO,KAFP;YAEmB,IAAC,CAAA,WAAD,CAAa,GAAb;AAAZ;AAFP,eAGO,KAHP;YAGmB,IAAC,CAAA,WAAD,CAAa,GAAb;AAAZ;AAHP;YAKI,MAAM,IAAI,CAAC,CAAC,kBAAN,CAAyB,WAAzB,EAAsC,MAAtC;AALV;AAMA,eAAO;MAVD,CADV;;;;;MAiBE,oBAAsB,CAAE,IAAF,CAAA;AAAW,YAAA;QAAC,IAAG,CAAE,CAAA,GAAI,IAAI,CAAC,OAAL,CAAa,IAAb,CAAN,CAAA,KAA6B,EAAhC;iBAAwC,KAAxC;SAAA,MAAA;iBAAkD,CAAC,UAAnD;;MAAZ;;MACtB,iBAAsB,CAAE,IAAF,CAAA;AAAW,YAAA;sFAA4C;MAAvD;;IApBqB;EAAtB;AAnBvB",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/IMPORT-EXPORT-MIXIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nE                         = require './errors'\n{ misfit }                = require './common'\n\n#-----------------------------------------------------------------------------------------------------------\n@Import_export_mixin = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  import: ( cfg ) ->\n    cfg         = { @types.defaults.dba_import_cfg..., cfg..., }\n    cfg.format ?= @_format_from_path cfg.path\n    @types.validate.dba_import_cfg cfg\n    switch cfg.format\n      when 'db'   then @_import_db  cfg\n      when 'sql'  then @_import_sql cfg\n      when 'csv'  then @_import_csv cfg\n      else\n        throw new E.Dba_format_unknown '^dba@309^', format\n    return null\n\n\n  #=========================================================================================================\n  # FORMAT GUESSING\n  #---------------------------------------------------------------------------------------------------------\n  _extension_from_path: ( path ) -> if ( R = PATH.extname path ) is '' then null else R[ 1 .. ]\n  _format_from_path:    ( path ) -> @_formats[ @._extension_from_path path ] ? null\n\n"
  ]
}